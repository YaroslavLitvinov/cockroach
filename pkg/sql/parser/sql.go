// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CSV = 57413
const CUBE = 57414
const CURRENT = 57415
const CURRENT_CATALOG = 57416
const CURRENT_DATE = 57417
const CURRENT_SCHEMA = 57418
const CURRENT_ROLE = 57419
const CURRENT_TIME = 57420
const CURRENT_TIMESTAMP = 57421
const CURRENT_USER = 57422
const CYCLE = 57423
const DATA = 57424
const DATABASE = 57425
const DATABASES = 57426
const DATE = 57427
const DAY = 57428
const DEC = 57429
const DECIMAL = 57430
const DEFAULT = 57431
const DEALLOCATE = 57432
const DEFERRABLE = 57433
const DELETE = 57434
const DESC = 57435
const DISCARD = 57436
const DISTINCT = 57437
const DO = 57438
const DOUBLE = 57439
const DROP = 57440
const ELSE = 57441
const ENCODING = 57442
const END = 57443
const ESCAPE = 57444
const EXCEPT = 57445
const EXISTS = 57446
const EXECUTE = 57447
const EXPERIMENTAL_FINGERPRINTS = 57448
const EXPLAIN = 57449
const EXTRACT = 57450
const EXTRACT_DURATION = 57451
const FALSE = 57452
const FAMILY = 57453
const FETCH = 57454
const FILTER = 57455
const FIRST = 57456
const FLOAT = 57457
const FLOAT4 = 57458
const FLOAT8 = 57459
const FLOORDIV = 57460
const FOLLOWING = 57461
const FOR = 57462
const FORCE_INDEX = 57463
const FOREIGN = 57464
const FROM = 57465
const FULL = 57466
const GRANT = 57467
const GRANTS = 57468
const GREATEST = 57469
const GROUP = 57470
const GROUPING = 57471
const HAVING = 57472
const HELP = 57473
const HIGH = 57474
const HOUR = 57475
const IMPORT = 57476
const INCREMENTAL = 57477
const IF = 57478
const IFNULL = 57479
const ILIKE = 57480
const IN = 57481
const INTERLEAVE = 57482
const INDEX = 57483
const INDEXES = 57484
const INITIALLY = 57485
const INNER = 57486
const INSERT = 57487
const INT = 57488
const INT2VECTOR = 57489
const INT2 = 57490
const INT4 = 57491
const INT8 = 57492
const INT64 = 57493
const INTEGER = 57494
const INTERSECT = 57495
const INTERVAL = 57496
const INTO = 57497
const IS = 57498
const ISOLATION = 57499
const JOB = 57500
const JOBS = 57501
const JOIN = 57502
const KEY = 57503
const KEYS = 57504
const KV = 57505
const LATERAL = 57506
const LC_CTYPE = 57507
const LC_COLLATE = 57508
const LEADING = 57509
const LEAST = 57510
const LEFT = 57511
const LEVEL = 57512
const LIKE = 57513
const LIMIT = 57514
const LOCAL = 57515
const LOCALTIME = 57516
const LOCALTIMESTAMP = 57517
const LOW = 57518
const LSHIFT = 57519
const MATCH = 57520
const MINUTE = 57521
const MONTH = 57522
const NAN = 57523
const NAME = 57524
const NAMES = 57525
const NATURAL = 57526
const NEXT = 57527
const NO = 57528
const NO_INDEX_JOIN = 57529
const NORMAL = 57530
const NOT = 57531
const NOTHING = 57532
const NULL = 57533
const NULLIF = 57534
const NULLS = 57535
const NUMERIC = 57536
const OF = 57537
const OFF = 57538
const OFFSET = 57539
const OID = 57540
const ON = 57541
const ONLY = 57542
const OPTIONS = 57543
const OR = 57544
const ORDER = 57545
const ORDINALITY = 57546
const OUT = 57547
const OUTER = 57548
const OVER = 57549
const OVERLAPS = 57550
const OVERLAY = 57551
const PARENT = 57552
const PARTIAL = 57553
const PARTITION = 57554
const PASSWORD = 57555
const PAUSE = 57556
const PLACING = 57557
const PLANS = 57558
const POSITION = 57559
const PRECEDING = 57560
const PRECISION = 57561
const PREPARE = 57562
const PRIMARY = 57563
const PRIORITY = 57564
const QUERIES = 57565
const QUERY = 57566
const RANGE = 57567
const READ = 57568
const REAL = 57569
const RECURSIVE = 57570
const REF = 57571
const REFERENCES = 57572
const REGCLASS = 57573
const REGPROC = 57574
const REGPROCEDURE = 57575
const REGNAMESPACE = 57576
const REGTYPE = 57577
const RENAME = 57578
const REPEATABLE = 57579
const RELEASE = 57580
const RESET = 57581
const RESTORE = 57582
const RESTRICT = 57583
const RESUME = 57584
const RETURNING = 57585
const REVOKE = 57586
const RIGHT = 57587
const ROLLBACK = 57588
const ROLLUP = 57589
const ROW = 57590
const ROWS = 57591
const RSHIFT = 57592
const SAVEPOINT = 57593
const SCATTER = 57594
const SEARCH = 57595
const SECOND = 57596
const SELECT = 57597
const SEQUENCES = 57598
const SERIAL = 57599
const SERIALIZABLE = 57600
const SESSION = 57601
const SESSIONS = 57602
const SESSION_USER = 57603
const SET = 57604
const SETTING = 57605
const SETTINGS = 57606
const SHOW = 57607
const SIMILAR = 57608
const SIMPLE = 57609
const SMALLINT = 57610
const SMALLSERIAL = 57611
const SNAPSHOT = 57612
const SOME = 57613
const SPLIT = 57614
const SQL = 57615
const START = 57616
const STATUS = 57617
const STDIN = 57618
const STRICT = 57619
const STRING = 57620
const STORE = 57621
const STORING = 57622
const SUBSTRING = 57623
const SYMMETRIC = 57624
const SYSTEM = 57625
const TABLE = 57626
const TABLES = 57627
const TEMP = 57628
const TEMPLATE = 57629
const TEMPORARY = 57630
const TESTING_RANGES = 57631
const TESTING_RELOCATE = 57632
const TEXT = 57633
const THEN = 57634
const TIME = 57635
const TIMESTAMP = 57636
const TIMESTAMPTZ = 57637
const TO = 57638
const TRAILING = 57639
const TRACE = 57640
const TRANSACTION = 57641
const TREAT = 57642
const TRIM = 57643
const TRUE = 57644
const TRUNCATE = 57645
const TYPE = 57646
const UNBOUNDED = 57647
const UNCOMMITTED = 57648
const UNION = 57649
const UNIQUE = 57650
const UNKNOWN = 57651
const UPDATE = 57652
const UPSERT = 57653
const USE = 57654
const USER = 57655
const USERS = 57656
const USING = 57657
const UUID = 57658
const VALID = 57659
const VALIDATE = 57660
const VALUE = 57661
const VALUES = 57662
const VARCHAR = 57663
const VARIADIC = 57664
const VIEW = 57665
const VARYING = 57666
const WHEN = 57667
const WHERE = 57668
const WINDOW = 57669
const WITH = 57670
const WITHIN = 57671
const WITHOUT = 57672
const WRITE = 57673
const YEAR = 57674
const ZONE = 57675
const NOT_LA = 57676
const WITH_LA = 57677
const AS_LA = 57678
const POSTFIXOP = 57679
const UMINUS = 57680
const HELPTOKEN = 57681

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6549

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	358, 53,
	-2, 681,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	141, 533,
	-2, 0,
	-1, 61,
	92, 681,
	145, 681,
	310, 681,
	311, 681,
	-2, 0,
	-1, 71,
	103, 656,
	112, 656,
	153, 656,
	172, 656,
	197, 656,
	203, 656,
	307, 656,
	-2, 645,
	-1, 103,
	4, 683,
	20, 683,
	21, 683,
	23, 683,
	28, 683,
	33, 683,
	34, 683,
	35, 683,
	36, 683,
	37, 683,
	38, 683,
	39, 683,
	40, 683,
	41, 683,
	42, 683,
	44, 683,
	45, 683,
	46, 683,
	47, 683,
	48, 683,
	51, 683,
	52, 683,
	53, 683,
	55, 683,
	56, 683,
	60, 683,
	61, 683,
	62, 683,
	64, 683,
	66, 683,
	67, 683,
	68, 683,
	71, 683,
	72, 683,
	73, 683,
	81, 683,
	82, 683,
	83, 683,
	84, 683,
	85, 683,
	86, 683,
	87, 683,
	88, 683,
	90, 683,
	92, 683,
	94, 683,
	97, 683,
	98, 683,
	100, 683,
	104, 683,
	105, 683,
	106, 683,
	107, 683,
	108, 683,
	109, 683,
	113, 683,
	114, 683,
	115, 683,
	116, 683,
	117, 683,
	119, 683,
	121, 683,
	126, 683,
	127, 683,
	129, 683,
	132, 683,
	133, 683,
	134, 683,
	135, 683,
	136, 683,
	137, 683,
	140, 683,
	142, 683,
	145, 683,
	146, 683,
	147, 683,
	148, 683,
	149, 683,
	150, 683,
	151, 683,
	152, 683,
	154, 683,
	157, 683,
	158, 683,
	159, 683,
	161, 683,
	162, 683,
	163, 683,
	165, 683,
	166, 683,
	168, 683,
	170, 683,
	173, 683,
	176, 683,
	178, 683,
	179, 683,
	180, 683,
	181, 683,
	182, 683,
	183, 683,
	185, 683,
	186, 683,
	187, 683,
	188, 683,
	192, 683,
	193, 683,
	194, 683,
	195, 683,
	196, 683,
	198, 683,
	200, 683,
	201, 683,
	204, 683,
	205, 683,
	207, 683,
	209, 683,
	210, 683,
	211, 683,
	212, 683,
	213, 683,
	214, 683,
	216, 683,
	217, 683,
	218, 683,
	219, 683,
	220, 683,
	222, 683,
	223, 683,
	224, 683,
	225, 683,
	226, 683,
	227, 683,
	228, 683,
	229, 683,
	231, 683,
	232, 683,
	233, 683,
	234, 683,
	235, 683,
	236, 683,
	237, 683,
	238, 683,
	239, 683,
	240, 683,
	241, 683,
	242, 683,
	244, 683,
	246, 683,
	247, 683,
	248, 683,
	249, 683,
	251, 683,
	252, 683,
	253, 683,
	254, 683,
	256, 683,
	257, 683,
	258, 683,
	259, 683,
	260, 683,
	262, 683,
	263, 683,
	264, 683,
	265, 683,
	267, 683,
	268, 683,
	269, 683,
	270, 683,
	272, 683,
	273, 683,
	274, 683,
	275, 683,
	276, 683,
	277, 683,
	278, 683,
	279, 683,
	280, 683,
	281, 683,
	283, 683,
	285, 683,
	286, 683,
	287, 683,
	288, 683,
	289, 683,
	290, 683,
	291, 683,
	293, 683,
	294, 683,
	295, 683,
	298, 683,
	299, 683,
	300, 683,
	301, 683,
	303, 683,
	304, 683,
	305, 683,
	306, 683,
	309, 683,
	310, 683,
	311, 683,
	312, 683,
	314, 683,
	316, 683,
	317, 683,
	318, 683,
	319, 683,
	320, 683,
	321, 683,
	324, 683,
	329, 683,
	330, 683,
	331, 683,
	332, 683,
	333, 683,
	-2, 0,
	-1, 116,
	103, 655,
	112, 655,
	153, 655,
	172, 655,
	197, 655,
	203, 655,
	307, 655,
	-2, 648,
	-1, 121,
	1, 582,
	157, 582,
	222, 582,
	226, 582,
	357, 582,
	358, 582,
	-2, 0,
	-1, 123,
	1, 582,
	357, 582,
	358, 582,
	-2, 0,
	-1, 124,
	1, 582,
	357, 582,
	358, 582,
	-2, 0,
	-1, 125,
	1, 586,
	357, 586,
	358, 586,
	-2, 0,
	-1, 132,
	4, 689,
	5, 689,
	6, 689,
	7, 689,
	8, 689,
	9, 689,
	20, 689,
	21, 689,
	23, 689,
	28, 689,
	29, 689,
	33, 689,
	34, 689,
	35, 689,
	36, 689,
	37, 689,
	38, 689,
	39, 689,
	40, 689,
	41, 689,
	42, 689,
	44, 689,
	45, 689,
	46, 689,
	47, 689,
	48, 689,
	49, 689,
	50, 689,
	51, 689,
	52, 689,
	53, 689,
	55, 689,
	56, 689,
	58, 689,
	60, 689,
	61, 689,
	62, 689,
	64, 689,
	66, 689,
	67, 689,
	68, 689,
	70, 689,
	71, 689,
	72, 689,
	73, 689,
	75, 689,
	76, 689,
	77, 689,
	79, 689,
	80, 689,
	81, 689,
	82, 689,
	83, 689,
	84, 689,
	85, 689,
	86, 689,
	87, 689,
	88, 689,
	90, 689,
	92, 689,
	94, 689,
	97, 689,
	98, 689,
	100, 689,
	104, 689,
	105, 689,
	106, 689,
	107, 689,
	108, 689,
	109, 689,
	110, 689,
	113, 689,
	114, 689,
	115, 689,
	116, 689,
	117, 689,
	119, 689,
	121, 689,
	124, 689,
	126, 689,
	127, 689,
	129, 689,
	132, 689,
	133, 689,
	134, 689,
	135, 689,
	136, 689,
	137, 689,
	138, 689,
	140, 689,
	142, 689,
	144, 689,
	145, 689,
	146, 689,
	147, 689,
	148, 689,
	149, 689,
	150, 689,
	151, 689,
	152, 689,
	154, 689,
	156, 689,
	157, 689,
	158, 689,
	159, 689,
	160, 689,
	161, 689,
	162, 689,
	163, 689,
	165, 689,
	166, 689,
	168, 689,
	169, 689,
	170, 689,
	171, 689,
	173, 689,
	176, 689,
	178, 689,
	179, 689,
	180, 689,
	181, 689,
	182, 689,
	183, 689,
	184, 689,
	185, 689,
	186, 689,
	187, 689,
	188, 689,
	189, 689,
	191, 689,
	192, 689,
	193, 689,
	194, 689,
	195, 689,
	196, 689,
	198, 689,
	201, 689,
	204, 689,
	205, 689,
	206, 689,
	207, 689,
	208, 689,
	209, 689,
	210, 689,
	211, 689,
	212, 689,
	213, 689,
	214, 689,
	216, 689,
	217, 689,
	218, 689,
	219, 689,
	220, 689,
	222, 689,
	223, 689,
	224, 689,
	225, 689,
	226, 689,
	227, 689,
	228, 689,
	229, 689,
	231, 689,
	232, 689,
	233, 689,
	234, 689,
	235, 689,
	236, 689,
	237, 689,
	238, 689,
	239, 689,
	240, 689,
	241, 689,
	242, 689,
	244, 689,
	245, 689,
	246, 689,
	247, 689,
	248, 689,
	249, 689,
	251, 689,
	252, 689,
	253, 689,
	254, 689,
	256, 689,
	257, 689,
	258, 689,
	259, 689,
	260, 689,
	261, 689,
	262, 689,
	263, 689,
	264, 689,
	265, 689,
	266, 689,
	267, 689,
	268, 689,
	269, 689,
	270, 689,
	272, 689,
	273, 689,
	274, 689,
	275, 689,
	276, 689,
	277, 689,
	278, 689,
	279, 689,
	280, 689,
	281, 689,
	283, 689,
	285, 689,
	286, 689,
	287, 689,
	288, 689,
	289, 689,
	290, 689,
	291, 689,
	293, 689,
	294, 689,
	295, 689,
	298, 689,
	299, 689,
	300, 689,
	301, 689,
	302, 689,
	303, 689,
	304, 689,
	305, 689,
	306, 689,
	309, 689,
	310, 689,
	311, 689,
	312, 689,
	313, 689,
	314, 689,
	316, 689,
	317, 689,
	318, 689,
	319, 689,
	320, 689,
	321, 689,
	324, 689,
	329, 689,
	330, 689,
	331, 689,
	332, 689,
	333, 689,
	334, 689,
	340, 689,
	345, 689,
	346, 689,
	347, 689,
	354, 689,
	360, 689,
	-2, 0,
	-1, 135,
	1, 53,
	358, 53,
	-2, 681,
	-1, 496,
	123, 1280,
	296, 1280,
	339, 1280,
	356, 1280,
	-2, 0,
	-1, 497,
	123, 1233,
	296, 1233,
	339, 1233,
	356, 1233,
	-2, 0,
	-1, 499,
	123, 1338,
	296, 1338,
	339, 1338,
	356, 1338,
	-2, 0,
	-1, 501,
	123, 1360,
	296, 1360,
	339, 1360,
	356, 1360,
	-2, 0,
	-1, 508,
	123, 1285,
	296, 1285,
	339, 1285,
	356, 1285,
	-2, 317,
	-1, 534,
	1, 394,
	353, 394,
	355, 394,
	357, 394,
	358, 394,
	-2, 0,
	-1, 535,
	1, 441,
	120, 441,
	353, 441,
	355, 441,
	357, 441,
	358, 441,
	-2, 0,
	-1, 541,
	1, 408,
	353, 408,
	355, 408,
	357, 408,
	358, 408,
	-2, 0,
	-1, 543,
	1, 412,
	353, 412,
	355, 412,
	357, 412,
	358, 412,
	-2, 0,
	-1, 546,
	1, 420,
	353, 420,
	355, 420,
	357, 420,
	358, 420,
	-2, 0,
	-1, 547,
	1, 425,
	353, 425,
	355, 425,
	357, 425,
	358, 425,
	-2, 0,
	-1, 550,
	1, 435,
	353, 435,
	355, 435,
	357, 435,
	358, 435,
	-2, 0,
	-1, 564,
	112, 691,
	172, 691,
	197, 691,
	-2, 651,
	-1, 567,
	112, 690,
	172, 690,
	197, 690,
	-2, 649,
	-1, 624,
	354, 1211,
	-2, 1204,
	-1, 625,
	354, 1212,
	-2, 1205,
	-1, 631,
	5, 866,
	354, 866,
	-2, 1411,
	-1, 656,
	5, 825,
	-2, 1381,
	-1, 657,
	5, 860,
	354, 860,
	-2, 1383,
	-1, 658,
	5, 835,
	-2, 1384,
	-1, 659,
	5, 834,
	-2, 1385,
	-1, 660,
	5, 860,
	354, 860,
	-2, 1388,
	-1, 661,
	5, 860,
	354, 860,
	-2, 1389,
	-1, 662,
	5, 861,
	-2, 1392,
	-1, 663,
	5, 817,
	-2, 1393,
	-1, 664,
	5, 817,
	-2, 1394,
	-1, 665,
	5, 842,
	-2, 1398,
	-1, 666,
	5, 827,
	-2, 1399,
	-1, 667,
	5, 828,
	-2, 1400,
	-1, 668,
	5, 818,
	-2, 1405,
	-1, 669,
	5, 819,
	-2, 1406,
	-1, 670,
	5, 820,
	-2, 1407,
	-1, 671,
	5, 821,
	-2, 1408,
	-1, 672,
	5, 822,
	-2, 1409,
	-1, 673,
	5, 823,
	-2, 1410,
	-1, 674,
	5, 817,
	-2, 1415,
	-1, 675,
	5, 826,
	-2, 1420,
	-1, 676,
	5, 824,
	-2, 1423,
	-1, 677,
	5, 858,
	354, 858,
	-2, 1425,
	-1, 678,
	5, 862,
	-2, 1428,
	-1, 679,
	5, 864,
	-2, 1429,
	-1, 680,
	5, 857,
	354, 857,
	-2, 1434,
	-1, 777,
	213, 679,
	-2, 526,
	-1, 781,
	199, 1208,
	-2, 0,
	-1, 816,
	1, 208,
	353, 208,
	355, 208,
	357, 208,
	358, 208,
	-2, 654,
	-1, 823,
	4, 1433,
	10, 1433,
	11, 1433,
	13, 1433,
	14, 1433,
	15, 1433,
	16, 1433,
	17, 1433,
	18, 1433,
	20, 1433,
	21, 1433,
	23, 1433,
	26, 1433,
	28, 1433,
	30, 1433,
	33, 1433,
	34, 1433,
	35, 1433,
	36, 1433,
	37, 1433,
	38, 1433,
	39, 1433,
	40, 1433,
	41, 1433,
	42, 1433,
	44, 1433,
	45, 1433,
	46, 1433,
	47, 1433,
	48, 1433,
	51, 1433,
	52, 1433,
	53, 1433,
	55, 1433,
	56, 1433,
	57, 1433,
	60, 1433,
	61, 1433,
	62, 1433,
	63, 1433,
	64, 1433,
	66, 1433,
	67, 1433,
	68, 1433,
	70, 1433,
	71, 1433,
	72, 1433,
	73, 1433,
	81, 1433,
	82, 1433,
	83, 1433,
	84, 1433,
	85, 1433,
	86, 1433,
	87, 1433,
	88, 1433,
	90, 1433,
	92, 1433,
	94, 1433,
	97, 1433,
	98, 1433,
	100, 1433,
	104, 1433,
	105, 1433,
	106, 1433,
	107, 1433,
	108, 1433,
	109, 1433,
	113, 1433,
	114, 1433,
	115, 1433,
	116, 1433,
	117, 1433,
	118, 1433,
	119, 1433,
	121, 1433,
	124, 1433,
	126, 1433,
	127, 1433,
	129, 1433,
	132, 1433,
	133, 1433,
	134, 1433,
	135, 1433,
	136, 1433,
	137, 1433,
	138, 1433,
	139, 1433,
	140, 1433,
	142, 1433,
	144, 1433,
	145, 1433,
	146, 1433,
	147, 1433,
	148, 1433,
	149, 1433,
	150, 1433,
	151, 1433,
	152, 1433,
	154, 1433,
	156, 1433,
	157, 1433,
	158, 1433,
	159, 1433,
	160, 1433,
	161, 1433,
	162, 1433,
	163, 1433,
	165, 1433,
	166, 1433,
	168, 1433,
	169, 1433,
	170, 1433,
	171, 1433,
	173, 1433,
	176, 1433,
	177, 1433,
	178, 1433,
	179, 1433,
	180, 1433,
	181, 1433,
	182, 1433,
	183, 1433,
	184, 1433,
	185, 1433,
	186, 1433,
	187, 1433,
	188, 1433,
	192, 1433,
	193, 1433,
	194, 1433,
	195, 1433,
	196, 1433,
	198, 1433,
	201, 1433,
	202, 1433,
	204, 1433,
	205, 1433,
	207, 1433,
	209, 1433,
	210, 1433,
	211, 1433,
	212, 1433,
	213, 1433,
	214, 1433,
	216, 1433,
	217, 1433,
	218, 1433,
	219, 1433,
	220, 1433,
	222, 1433,
	223, 1433,
	224, 1433,
	225, 1433,
	226, 1433,
	227, 1433,
	228, 1433,
	229, 1433,
	231, 1433,
	232, 1433,
	233, 1433,
	234, 1433,
	235, 1433,
	236, 1433,
	237, 1433,
	238, 1433,
	239, 1433,
	240, 1433,
	241, 1433,
	242, 1433,
	244, 1433,
	245, 1433,
	246, 1433,
	247, 1433,
	248, 1433,
	249, 1433,
	250, 1433,
	251, 1433,
	252, 1433,
	253, 1433,
	254, 1433,
	256, 1433,
	257, 1433,
	258, 1433,
	259, 1433,
	260, 1433,
	262, 1433,
	263, 1433,
	264, 1433,
	265, 1433,
	266, 1433,
	267, 1433,
	268, 1433,
	269, 1433,
	270, 1433,
	272, 1433,
	273, 1433,
	274, 1433,
	275, 1433,
	276, 1433,
	277, 1433,
	278, 1433,
	279, 1433,
	280, 1433,
	281, 1433,
	283, 1433,
	285, 1433,
	286, 1433,
	287, 1433,
	288, 1433,
	289, 1433,
	290, 1433,
	291, 1433,
	293, 1433,
	294, 1433,
	295, 1433,
	298, 1433,
	299, 1433,
	300, 1433,
	301, 1433,
	303, 1433,
	304, 1433,
	305, 1433,
	306, 1433,
	309, 1433,
	310, 1433,
	311, 1433,
	312, 1433,
	314, 1433,
	316, 1433,
	317, 1433,
	318, 1433,
	319, 1433,
	320, 1433,
	321, 1433,
	324, 1433,
	329, 1433,
	330, 1433,
	331, 1433,
	332, 1433,
	333, 1433,
	334, 1433,
	335, 1433,
	337, 1433,
	338, 1433,
	339, 1433,
	340, 1433,
	342, 1433,
	343, 1433,
	344, 1433,
	345, 1433,
	346, 1433,
	347, 1433,
	348, 1433,
	349, 1433,
	350, 1433,
	352, 1433,
	355, 1433,
	356, 1433,
	359, 1433,
	360, 1433,
	-2, 0,
	-1, 837,
	123, 1338,
	296, 1338,
	339, 1338,
	356, 1338,
	-2, 0,
	-1, 854,
	123, 1360,
	296, 1360,
	339, 1360,
	356, 1360,
	-2, 0,
	-1, 855,
	157, 594,
	222, 594,
	226, 594,
	-2, 305,
	-1, 924,
	112, 690,
	172, 690,
	197, 690,
	-2, 652,
	-1, 993,
	103, 656,
	112, 656,
	153, 656,
	172, 656,
	197, 656,
	203, 656,
	307, 656,
	-2, 985,
	-1, 1003,
	354, 1188,
	-2, 1176,
	-1, 1021,
	355, 1128,
	-2, 0,
	-1, 1045,
	157, 594,
	222, 594,
	226, 594,
	-2, 589,
	-1, 1077,
	103, 656,
	112, 656,
	153, 656,
	172, 656,
	197, 656,
	203, 656,
	307, 656,
	-2, 752,
	-1, 1303,
	157, 594,
	222, 594,
	226, 594,
	-2, 307,
	-1, 1401,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 901,
	-1, 1402,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 902,
	-1, 1403,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 903,
	-1, 1407,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 907,
	-1, 1408,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 908,
	-1, 1409,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 909,
	-1, 1412,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 914,
	-1, 1418,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 916,
	-1, 1420,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 920,
	-1, 1421,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 921,
	-1, 1422,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 922,
	-1, 1423,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 923,
	-1, 1449,
	208, 1070,
	-2, 1073,
	-1, 1493,
	123, 1110,
	354, 1211,
	-2, 1204,
	-1, 1494,
	123, 1111,
	-2, 1377,
	-1, 1495,
	123, 1112,
	-2, 1284,
	-1, 1496,
	123, 1113,
	-2, 1248,
	-1, 1497,
	123, 1114,
	-2, 1264,
	-1, 1498,
	123, 1115,
	-2, 1283,
	-1, 1499,
	123, 1116,
	-2, 1335,
	-1, 1575,
	1, 753,
	70, 753,
	103, 753,
	112, 753,
	124, 753,
	128, 753,
	130, 753,
	144, 753,
	153, 753,
	160, 753,
	169, 753,
	172, 753,
	184, 753,
	197, 753,
	199, 753,
	203, 753,
	243, 753,
	245, 753,
	307, 753,
	315, 753,
	326, 753,
	327, 753,
	336, 753,
	353, 753,
	355, 753,
	357, 753,
	358, 753,
	359, 753,
	-2, 752,
	-1, 1721,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 915,
	-1, 1722,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 917,
	-1, 1727,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 918,
	-1, 1745,
	208, 1069,
	-2, 1072,
	-1, 1976,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 919,
	-1, 1981,
	156, 0,
	-2, 935,
	-1, 1991,
	208, 1071,
	-2, 1074,
	-1, 2033,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 962,
	-1, 2034,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 963,
	-1, 2035,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 964,
	-1, 2039,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 968,
	-1, 2040,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 969,
	-1, 2041,
	13, 0,
	14, 0,
	15, 0,
	337, 0,
	338, 0,
	339, 0,
	-2, 970,
	-1, 2172,
	156, 0,
	-2, 936,
	-1, 2175,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 939,
	-1, 2176,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 941,
	-1, 2298,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 940,
	-1, 2299,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	138, 0,
	139, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 942,
	-1, 2306,
	156, 0,
	-2, 971,
	-1, 2387,
	156, 0,
	-2, 972,
	-1, 2470,
	36, 0,
	138, 0,
	171, 0,
	266, 0,
	334, 0,
	340, 0,
	-2, 1380,
}

const sqlPrivate = 57344

const sqlLast = 42331

var sqlAct = [...]int{

	625, 2469, 2122, 2478, 2442, 2517, 2479, 1958, 2480, 2332,
	2010, 1644, 1652, 568, 1201, 2392, 2468, 623, 2279, 70,
	584, 1106, 875, 615, 2138, 2226, 2240, 1715, 1212, 2160,
	727, 2093, 1924, 2162, 1298, 601, 1297, 1926, 1247, 769,
	173, 2312, 1932, 2094, 173, 1641, 2206, 1225, 1859, 1075,
	1570, 2154, 173, 1617, 1622, 1838, 1071, 1054, 1653, 1811,
	1621, 173, 2064, 1588, 1579, 622, 173, 173, 1571, 439,
	173, 1611, 1810, 173, 1846, 1618, 507, 999, 1208, 576,
	115, 173, 1380, 1756, 1375, 1711, 1447, 1197, 858, 1083,
	1699, 1055, 927, 1473, 1457, 1085, 595, 1435, 1324, 1328,
	1432, 1522, 806, 436, 857, 1031, 733, 1467, 1619, 877,
	817, 803, 1080, 796, 1557, 1646, 1625, 715, 736, 1062,
	1544, 487, 988, 1489, 594, 926, 1035, 173, 173, 504,
	116, 928, 1327, 164, 1045, 173, 617, 465, 573, 1219,
	500, 115, 793, 713, 169, 1044, 932, 2241, 2078, 117,
	1744, 2079, 528, 1645, 1227, 1227, 1227, 572, 39, 572,
	1072, 173, 173, 173, 173, 1974, 2513, 1102, 173, 173,
	1105, 42, 2494, 2490, 1612, 1667, 2239, 1667, 1781, 1782,
	2489, 2486, 2438, 2466, 1667, 1105, 1941, 1682, 2465, 2437,
	2432, 2428, 1682, 1675, 2293, 1105, 1682, 2067, 2416, 2389,
	479, 567, 2239, 1675, 2367, 2360, 2358, 2343, 2239, 1105,
	2239, 1105, 2342, 1942, 1612, 115, 2239, 1781, 1782, 2320,
	582, 2317, 2300, 1105, 2261, 1105, 1675, 1546, 1667, 2259,
	2238, 1796, 2219, 1667, 2239, 2199, 1105, 1682, 719, 1667,
	720, 1248, 454, 25, 757, 2177, 565, 730, 2174, 1667,
	2153, 2148, 1675, 2293, 1616, 1616, 2067, 1525, 63, 1781,
	1782, 1545, 1799, 1800, 1801, 564, 751, 741, 745, 2074,
	1985, 717, 577, 2075, 1667, 2171, 1952, 1907, 1862, 1835,
	1908, 1105, 1667, 1105, 1828, 1826, 1787, 1825, 1829, 1667,
	1969, 1667, 1577, 943, 944, 2046, 963, 964, 965, 973,
	974, 975, 1824, 1748, 1747, 1988, 1667, 1745, 1105, 1749,
	1667, 1667, 1796, 1667, 1686, 1755, 946, 1674, 1667, 977,
	1666, 1675, 1615, 1908, 1667, 1787, 1616, 943, 944, 132,
	963, 964, 965, 973, 974, 975, 1714, 1551, 64, 1697,
	945, 1550, 1306, 966, 1049, 1797, 960, 1228, 1228, 1228,
	946, 1240, 1451, 977, 755, 1241, 839, 135, 134, 836,
	835, 834, 833, 119, 66, 832, 67, 1787, 831, 830,
	2242, 575, 829, 828, 945, 827, 826, 825, 25, 132,
	960, 721, 718, 560, 1797, 132, 460, 559, 558, 99,
	526, 525, 524, 523, 133, 1325, 522, 521, 520, 173,
	519, 951, 126, 173, 173, 1802, 173, 518, 134, 127,
	517, 173, 516, 515, 134, 514, 513, 173, 1798, 512,
	511, 970, 978, 510, 495, 494, 1797, 493, 118, 492,
	173, 173, 173, 173, 173, 951, 491, 427, 426, 820,
	425, 424, 1470, 423, 133, 408, 407, 1649, 397, 1941,
	133, 396, 126, 395, 968, 970, 978, 1798, 573, 127,
	961, 173, 394, 1545, 2512, 1233, 1226, 1359, 387, 386,
	158, 157, 156, 976, 173, 773, 155, 154, 118, 153,
	779, 761, 943, 944, 118, 152, 151, 1854, 968, 1471,
	173, 150, 1781, 1782, 961, 149, 148, 147, 146, 1798,
	173, 145, 144, 143, 142, 946, 799, 799, 141, 810,
	1792, 1790, 1791, 1783, 1784, 1785, 1786, 1788, 1789, 967,
	140, 139, 138, 795, 137, 1076, 136, 1331, 1486, 945,
	870, 820, 2485, 962, 1484, 1472, 1469, 2467, 943, 944,
	768, 2447, 2420, 1482, 800, 939, 2418, 2384, 818, 971,
	840, 1791, 1783, 1784, 1785, 1786, 1788, 1789, 1480, 2361,
	2205, 946, 173, 2204, 2200, 873, 2286, 962, 2192, 1781,
	1782, 2191, 2190, 2186, 2185, 1781, 1782, 2184, 925, 2183,
	2159, 2134, 2131, 971, 2061, 945, 1793, 1794, 1795, 2056,
	951, 1792, 1790, 1791, 1783, 1784, 1785, 1786, 1788, 1789,
	1787, 2055, 2054, 1996, 1244, 1906, 1866, 1833, 868, 1830,
	1474, 943, 944, 132, 1818, 1809, 1780, 969, 1777, 573,
	957, 958, 959, 972, 132, 956, 954, 955, 947, 948,
	949, 950, 952, 953, 946, 1776, 855, 1774, 1443, 1761,
	852, 1910, 134, 1760, 1575, 939, 951, 1007, 924, 938,
	728, 969, 600, 134, 957, 958, 959, 972, 945, 956,
	954, 955, 947, 948, 949, 950, 952, 953, 923, 761,
	1211, 1000, 1074, 991, 174, 2012, 2201, 1787, 133, 1073,
	2455, 2423, 871, 1787, 2413, 2412, 126, 766, 1468, 133,
	2411, 2403, 2401, 127, 2379, 2378, 391, 126, 2377, 943,
	944, 2329, 2308, 2294, 127, 961, 2274, 565, 2271, 2267,
	1680, 2245, 1648, 173, 2197, 173, 2136, 935, 936, 951,
	2128, 2285, 946, 118, 2127, 2125, 564, 2102, 2101, 681,
	2082, 940, 2070, 1326, 1710, 1980, 1797, 1897, 173, 173,
	1892, 1879, 1709, 1956, 1444, 1878, 945, 1864, 1834, 1808,
	1060, 1053, 960, 1770, 1769, 820, 173, 573, 1003, 1766,
	1741, 1736, 1109, 1437, 1036, 1039, 1033, 1034, 173, 1635,
	1632, 1562, 1534, 1478, 1200, 729, 173, 173, 962, 1052,
	1043, 1058, 173, 1029, 1028, 1027, 1026, 734, 173, 1103,
	173, 1037, 173, 1025, 1210, 1024, 173, 1023, 1022, 1021,
	1020, 1040, 1019, 1018, 1017, 1016, 683, 951, 1199, 1798,
	1015, 1014, 115, 743, 747, 1013, 753, 947, 948, 949,
	950, 952, 953, 1012, 1011, 1781, 1782, 1783, 1784, 1785,
	1786, 1788, 1789, 1004, 1048, 1852, 1070, 992, 173, 173,
	991, 851, 843, 814, 2395, 820, 2292, 173, 1230, 1046,
	173, 1232, 1204, 1206, 1879, 1235, 1078, 995, 1050, 618,
	2179, 1216, 2158, 2077, 2073, 1677, 961, 1563, 1781, 1782,
	1000, 1109, 955, 947, 948, 949, 950, 952, 953, 1954,
	173, 1485, 989, 1074, 867, 173, 1685, 1483, 1927, 1245,
	173, 173, 1332, 173, 795, 173, 1481, 173, 1612, 173,
	1104, 1792, 1790, 1791, 1783, 1784, 1785, 1786, 1788, 1789,
	173, 1479, 1785, 1786, 1788, 1789, 173, 173, 767, 2296,
	1093, 943, 944, 682, 2295, 2289, 2080, 1943, 1076, 1684,
	1218, 1221, 1041, 1787, 943, 944, 1832, 1042, 1831, 962,
	1091, 1720, 173, 864, 946, 1009, 1109, 921, 949, 950,
	952, 953, 1959, 1209, 2313, 1645, 1333, 946, 1092, 1312,
	943, 944, 2013, 1458, 1752, 1032, 915, 1389, 945, 1937,
	1358, 2089, 1242, 2450, 1671, 2510, 413, 1243, 852, 1300,
	1299, 945, 2509, 946, 115, 2427, 1687, 1966, 2253, 1303,
	1589, 1581, 1797, 1086, 710, 1087, 1006, 2113, 2353, 1329,
	428, 1317, 729, 1581, 708, 916, 907, 945, 1347, 1580,
	2352, 573, 571, 2351, 1337, 1074, 573, 2350, 706, 2117,
	1341, 1362, 1342, 1340, 1343, 704, 1344, 2115, 1345, 414,
	701, 956, 954, 955, 947, 948, 949, 950, 952, 953,
	2086, 2085, 951, 1199, 1765, 1351, 1353, 1764, 173, 1763,
	173, 1360, 159, 173, 1762, 2264, 1723, 865, 1592, 1361,
	1670, 1470, 570, 565, 173, 1798, 565, 565, 951, 747,
	1088, 1379, 1238, 1109, 1608, 1604, 173, 1602, 1455, 1419,
	173, 432, 1371, 173, 753, 1372, 1373, 173, 1047, 1955,
	1313, 173, 754, 1538, 1565, 1537, 173, 1390, 1642, 573,
	866, 961, 173, 1109, 1100, 2426, 173, 1357, 1471, 1301,
	1445, 1442, 572, 821, 1316, 1315, 562, 1325, 1322, 776,
	1099, 1564, 1356, 775, 1610, 2120, 1434, 961, 1543, 474,
	1434, 2121, 399, 162, 1086, 2334, 1087, 1903, 1195, 431,
	1097, 1582, 1500, 1781, 1782, 630, 1799, 1800, 1801, 2482,
	914, 1507, 1593, 1595, 1472, 1469, 942, 1591, 1098, 2170,
	1783, 1784, 1785, 1786, 1788, 1789, 1441, 1541, 822, 1540,
	2463, 1439, 1781, 1782, 962, 1336, 1554, 1222, 850, 1549,
	901, 1559, 1560, 1474, 1555, 1381, 1388, 2501, 1678, 588,
	1458, 163, 1934, 2509, 416, 415, 1796, 1598, 1078, 1319,
	962, 173, 1603, 1585, 1609, 821, 2006, 1086, 1789, 1087,
	2104, 1088, 173, 405, 747, 1690, 569, 902, 1430, 1633,
	1899, 1636, 1894, 173, 2434, 173, 1692, 173, 2111, 1474,
	173, 1965, 173, 1428, 173, 173, 2483, 173, 173, 880,
	1578, 1096, 820, 1094, 1590, 2406, 173, 1693, 2435, 1030,
	1448, 1787, 2525, 1637, 995, 2520, 1712, 1713, 1452, 1691,
	822, 953, 1460, 1967, 1291, 1355, 956, 954, 955, 947,
	948, 949, 950, 952, 953, 1492, 1492, 1505, 920, 1517,
	1787, 1474, 430, 1320, 1088, 1529, 1530, 1532, 712, 1802,
	1089, 711, 2484, 954, 955, 947, 948, 949, 950, 952,
	953, 702, 906, 1659, 1424, 911, 799, 1468, 799, 1733,
	1797, 433, 1425, 1665, 1426, 702, 1673, 1935, 1431, 2304,
	115, 429, 703, 986, 1731, 1227, 115, 702, 422, 2357,
	1065, 1568, 1109, 1768, 160, 1600, 1662, 1651, 388, 1797,
	173, 1606, 2003, 1660, 1668, 1661, 1663, 2335, 417, 1890,
	1068, 818, 1669, 1698, 1672, 1558, 173, 173, 173, 1061,
	173, 1934, 1679, 1574, 572, 872, 1556, 553, 2166, 1681,
	912, 553, 931, 161, 2105, 1066, 1725, 2481, 466, 173,
	1433, 888, 2508, 1798, 2506, 581, 1304, 2500, 2004, 581,
	734, 1081, 2234, 2518, 2278, 1728, 1416, 1639, 563, 1034,
	1033, 471, 846, 2195, 838, 1729, 1037, 467, 1040, 1734,
	1688, 473, 1798, 1065, 398, 1440, 400, 941, 401, 1902,
	1198, 685, 1084, 913, 861, 1427, 2531, 2235, 115, 821,
	2042, 1089, 1429, 1068, 468, 930, 1110, 1335, 406, 849,
	747, 2345, 1220, 402, 1220, 2526, 554, 484, 2519, 1063,
	554, 1067, 1702, 403, 470, 1326, 1323, 573, 1066, 1704,
	881, 856, 1647, 1474, 1647, 1708, 1706, 463, 2398, 2521,
	1793, 1794, 1795, 1064, 1754, 1792, 1790, 1791, 1783, 1784,
	1785, 1786, 1788, 1789, 822, 2344, 2499, 2327, 1848, 862,
	2088, 1111, 2249, 863, 389, 929, 1311, 882, 1414, 1417,
	879, 1875, 1871, 2196, 1089, 1790, 1791, 1783, 1784, 1785,
	1786, 1788, 1789, 1640, 466, 1726, 1730, 1724, 1228, 821,
	931, 1634, 1631, 1732, 2043, 2002, 2443, 2230, 2530, 2231,
	2044, 1413, 573, 1217, 1067, 1740, 1202, 471, 1350, 930,
	1309, 861, 418, 467, 771, 1110, 555, 173, 1109, 2139,
	555, 1751, 1310, 173, 173, 770, 1836, 173, 1307, 2233,
	390, 1842, 173, 1367, 469, 173, 2280, 2328, 2236, 1841,
	468, 1843, 1860, 173, 822, 1881, 166, 1880, 889, 173,
	173, 173, 419, 1718, 2252, 173, 1849, 861, 173, 1553,
	470, 2251, 2248, 1552, 173, 173, 173, 173, 173, 929,
	1111, 482, 781, 173, 1847, 173, 862, 476, 570, 173,
	863, 792, 420, 1855, 421, 1856, 861, 173, 2123, 472,
	1110, 1815, 1816, 1817, 556, 1865, 1415, 173, 556, 173,
	1851, 173, 2265, 173, 1368, 1901, 173, 1837, 1861, 1872,
	173, 790, 2325, 462, 173, 3, 2232, 459, 33, 173,
	1285, 173, 2207, 2065, 1477, 1909, 557, 1911, 173, 1840,
	557, 610, 2307, 463, 2194, 1844, 1845, 2326, 573, 1850,
	2119, 173, 820, 1867, 1812, 1111, 458, 32, 457, 29,
	1979, 862, 700, 820, 173, 863, 1915, 1904, 1889, 1918,
	1775, 2250, 910, 1735, 1939, 1739, 1683, 456, 76, 1614,
	469, 170, 1742, 1254, 1607, 392, 1951, 1913, 1945, 1946,
	466, 1947, 1948, 409, 899, 759, 734, 1960, 897, 173,
	1758, 1759, 434, 1601, 1321, 919, 760, 477, 170, 918,
	844, 485, 734, 471, 490, 1576, 1936, 1930, 579, 467,
	553, 1813, 509, 747, 756, 1944, 684, 1110, 747, 1348,
	1285, 1285, 455, 75, 753, 472, 895, 481, 581, 452,
	21, 1950, 1061, 475, 791, 1339, 468, 1284, 1010, 173,
	1807, 1998, 1999, 2000, 1961, 1982, 1964, 1110, 1476, 2477,
	2440, 739, 1820, 33, 1962, 1963, 470, 2223, 716, 716,
	2109, 580, 893, 1970, 789, 627, 392, 1968, 2107, 1972,
	453, 22, 1111, 1254, 1254, 891, 705, 707, 451, 27,
	450, 19, 32, 909, 29, 2087, 1065, 448, 18, 554,
	449, 17, 392, 392, 749, 392, 885, 1992, 1876, 170,
	758, 1989, 1111, 76, 1923, 898, 1068, 443, 14, 896,
	788, 905, 1891, 444, 15, 442, 13, 1917, 1896, 1914,
	173, 2019, 1063, 1643, 2014, 2016, 173, 2005, 2007, 2008,
	1630, 1066, 1876, 1237, 2021, 173, 173, 1284, 1284, 1236,
	2049, 1234, 1912, 1231, 1229, 1656, 1064, 894, 1101, 1095,
	1090, 1921, 447, 11, 2050, 1993, 753, 753, 75, 441,
	9, 446, 7, 1925, 2372, 21, 469, 2099, 445, 6,
	440, 5, 2510, 2100, 2063, 2068, 2076, 933, 2118, 173,
	2066, 173, 2081, 892, 115, 173, 821, 1953, 173, 555,
	2069, 1716, 2291, 2290, 173, 1330, 890, 820, 2129, 2155,
	2374, 1597, 1581, 2108, 2084, 2110, 22, 1067, 1596, 2126,
	2083, 2091, 173, 173, 27, 2098, 19, 884, 724, 2141,
	2147, 472, 2149, 18, 2408, 2112, 17, 461, 2242, 904,
	173, 787, 2072, 2140, 2152, 883, 2386, 2208, 725, 2124,
	173, 822, 2143, 14, 937, 1109, 2144, 1605, 1581, 15,
	934, 13, 1599, 1717, 1594, 943, 944, 2439, 2366, 1253,
	2364, 2130, 2145, 2270, 2133, 578, 2169, 556, 2151, 1986,
	2150, 2168, 1919, 1916, 2156, 2516, 1110, 2142, 1703, 753,
	1705, 1650, 747, 173, 1381, 2017, 943, 944, 11, 2173,
	1638, 1629, 1542, 1381, 2022, 9, 483, 7, 1302, 557,
	1246, 1719, 945, 2529, 6, 2319, 5, 1781, 1782, 946,
	2213, 726, 943, 944, 1695, 1694, 2157, 2062, 2009, 1695,
	1957, 1857, 1827, 1696, 1539, 1840, 2053, 1536, 1535, 1466,
	509, 1111, 997, 945, 777, 509, 2047, 782, 173, 2181,
	2001, 173, 785, 1920, 1007, 1005, 917, 2057, 392, 2193,
	908, 1109, 173, 173, 903, 900, 173, 173, 173, 1253,
	1253, 509, 509, 392, 807, 758, 886, 848, 1305, 561,
	2333, 464, 2215, 173, 1338, 887, 1853, 1561, 173, 2433,
	173, 2187, 173, 173, 173, 2210, 173, 1767, 173, 2099,
	820, 1370, 509, 2243, 2391, 2100, 2303, 2214, 173, 173,
	2212, 1475, 2217, 2246, 2273, 509, 1008, 2276, 52, 2096,
	604, 820, 2222, 2099, 2224, 2272, 2211, 2090, 2275, 2100,
	2114, 847, 1624, 1623, 2099, 2116, 2263, 2266, 2218, 2132,
	2100, 509, 2135, 2282, 1112, 1314, 626, 2098, 2277, 1491,
	1382, 699, 628, 1251, 629, 1252, 1038, 2281, 2247, 616,
	2209, 1249, 2269, 815, 1654, 1318, 1438, 1456, 2283, 1750,
	1001, 2098, 2288, 596, 608, 607, 2302, 2297, 1453, 734,
	842, 1858, 2098, 2268, 1933, 734, 734, 2284, 1366, 734,
	1508, 1707, 1363, 1929, 2106, 404, 1778, 813, 1514, 1506,
	1502, 922, 1110, 392, 173, 1059, 173, 987, 1109, 173,
	1655, 1868, 869, 1940, 1676, 1051, 2309, 173, 1374, 723,
	722, 1308, 1689, 1109, 980, 979, 709, 2400, 860, 2323,
	859, 1207, 2316, 1874, 2524, 1893, 2407, 2099, 2103, 2449,
	131, 128, 2318, 2100, 2338, 1287, 130, 129, 2337, 1905,
	1900, 2339, 173, 79, 31, 173, 30, 1111, 2321, 173,
	98, 1199, 820, 2336, 97, 2099, 173, 96, 2355, 95,
	94, 2100, 1922, 93, 173, 173, 820, 820, 92, 2359,
	2354, 1198, 2348, 2349, 2370, 2098, 91, 90, 89, 88,
	1198, 87, 86, 85, 173, 84, 2371, 2385, 2369, 173,
	2375, 83, 82, 81, 2381, 2363, 173, 2380, 2365, 505,
	2382, 2383, 502, 2098, 78, 2402, 77, 28, 24, 102,
	23, 74, 73, 26, 16, 10, 821, 2388, 2396, 20,
	57, 173, 173, 58, 2397, 2405, 56, 821, 173, 55,
	54, 2373, 12, 50, 2417, 1287, 1287, 2404, 2415, 2394,
	820, 1973, 49, 47, 490, 173, 716, 2422, 46, 820,
	820, 45, 44, 8, 101, 41, 40, 100, 113, 110,
	112, 2287, 2424, 1285, 109, 111, 2425, 573, 1060, 392,
	392, 822, 173, 114, 173, 106, 107, 173, 108, 1109,
	105, 104, 822, 37, 36, 2430, 2431, 170, 2456, 35,
	34, 2458, 2, 2459, 1, 2460, 2457, 1285, 0, 392,
	2451, 0, 2446, 0, 0, 0, 0, 509, 509, 173,
	2464, 2099, 0, 1215, 2462, 0, 1254, 2100, 0, 392,
	2476, 392, 2474, 392, 2475, 2461, 173, 1223, 0, 0,
	2493, 0, 0, 2487, 173, 0, 2315, 0, 2491, 0,
	0, 0, 2498, 2496, 2497, 0, 2495, 0, 173, 2445,
	1254, 0, 1285, 0, 0, 0, 0, 2507, 2505, 2098,
	0, 0, 2511, 0, 0, 2347, 0, 0, 0, 509,
	170, 0, 734, 2341, 2514, 0, 0, 2515, 170, 0,
	1284, 509, 0, 2362, 0, 2523, 2522, 2527, 2528, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2492, 0, 0, 0, 1254, 0, 0, 0, 0,
	0, 509, 0, 1285, 1284, 0, 509, 0, 0, 0,
	0, 170, 509, 0, 509, 0, 509, 0, 509, 0,
	509, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1349, 0, 0, 0, 0, 0, 509, 509, 1285,
	1285, 0, 0, 0, 1737, 1738, 0, 0, 1285, 1285,
	1286, 0, 0, 0, 1656, 734, 1254, 0, 0, 1284,
	0, 821, 0, 509, 0, 0, 0, 2419, 0, 2421,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1285, 1508, 1508, 0, 0, 0, 0, 943, 944,
	0, 0, 1254, 1254, 0, 0, 0, 0, 0, 1250,
	0, 1254, 1254, 0, 2436, 0, 0, 0, 0, 1110,
	0, 946, 0, 605, 71, 0, 822, 0, 0, 0,
	1284, 1804, 1805, 1806, 0, 0, 0, 0, 0, 2452,
	2453, 2454, 0, 0, 1254, 945, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1286, 1286, 0, 0, 0, 0, 1284, 1284, 0, 1508,
	1508, 1508, 0, 0, 1111, 1284, 1284, 0, 0, 490,
	0, 716, 0, 0, 758, 71, 0, 0, 0, 0,
	734, 0, 0, 0, 0, 392, 0, 0, 0, 0,
	0, 0, 1253, 0, 1239, 0, 951, 1573, 1284, 1250,
	1250, 392, 0, 0, 392, 0, 0, 0, 1586, 0,
	0, 0, 392, 0, 0, 1110, 0, 392, 0, 0,
	0, 0, 0, 392, 2256, 0, 1253, 1613, 2260, 566,
	0, 0, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1285, 735, 71,
	0, 0, 0, 0, 821, 961, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1111, 0, 0, 0, 0, 821, 0, 0, 0, 0,
	0, 1253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1254, 0, 0, 0, 0, 0, 0, 0, 0, 822,
	0, 0, 0, 0, 0, 586, 0, 0, 0, 0,
	0, 0, 1620, 0, 0, 0, 0, 0, 962, 0,
	822, 0, 0, 758, 0, 0, 1977, 1978, 0, 0,
	0, 0, 1253, 0, 392, 0, 1658, 0, 509, 2331,
	0, 509, 0, 509, 0, 392, 392, 0, 1664, 758,
	0, 0, 1110, 0, 1284, 0, 0, 1586, 0, 0,
	0, 0, 0, 0, 1508, 1508, 0, 1110, 1253, 1253,
	0, 0, 0, 0, 0, 0, 0, 1253, 1253, 0,
	0, 2368, 0, 0, 0, 2023, 2024, 2025, 2026, 2027,
	2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
	2038, 2039, 2040, 2041, 0, 2045, 821, 1111, 0, 0,
	1253, 0, 0, 947, 948, 949, 950, 952, 953, 0,
	821, 821, 1111, 1508, 1508, 1508, 1508, 1508, 1508, 1508,
	1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508,
	1508, 1508, 0, 1508, 0, 0, 0, 0, 0, 0,
	0, 1700, 0, 0, 1285, 0, 0, 0, 1287, 0,
	2414, 822, 0, 0, 0, 0, 0, 392, 392, 392,
	0, 392, 0, 943, 944, 822, 822, 0, 0, 973,
	974, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	392, 0, 1287, 0, 821, 0, 946, 0, 0, 977,
	0, 0, 0, 821, 821, 0, 0, 1254, 0, 2448,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 960, 0, 0, 0,
	0, 0, 0, 1110, 0, 2234, 0, 0, 2227, 0,
	0, 0, 574, 0, 0, 0, 2225, 1287, 0, 822,
	2229, 0, 0, 0, 0, 0, 0, 0, 822, 822,
	0, 0, 0, 1254, 0, 1285, 1656, 0, 0, 0,
	2235, 1284, 0, 0, 762, 764, 1253, 0, 0, 0,
	0, 951, 0, 0, 0, 0, 0, 0, 1111, 0,
	0, 0, 2228, 0, 0, 0, 0, 0, 0, 0,
	0, 970, 978, 0, 0, 0, 0, 0, 1287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1254, 0,
	0, 0, 0, 0, 0, 0, 0, 1284, 0, 0,
	0, 0, 0, 0, 968, 0, 0, 38, 0, 0,
	961, 0, 0, 0, 1287, 1287, 0, 0, 39, 0,
	0, 0, 0, 1287, 1287, 0, 0, 0, 392, 0,
	841, 42, 0, 0, 392, 392, 845, 0, 392, 0,
	2230, 0, 2231, 1573, 0, 0, 1573, 0, 0, 0,
	566, 0, 1284, 48, 1863, 0, 1287, 0, 0, 0,
	392, 1869, 1870, 586, 0, 0, 1586, 0, 0, 1877,
	0, 990, 2233, 993, 0, 1882, 1883, 1885, 1887, 1888,
	998, 2236, 59, 962, 392, 0, 1895, 0, 0, 60,
	1898, 61, 0, 0, 0, 0, 0, 0, 392, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 1215, 0,
	1215, 0, 509, 0, 1620, 0, 0, 1620, 63, 0,
	0, 392, 0, 0, 0, 1928, 0, 0, 0, 0,
	392, 0, 1938, 0, 0, 0, 0, 0, 0, 392,
	0, 0, 0, 0, 981, 982, 983, 984, 985, 0,
	0, 0, 1700, 1286, 994, 0, 0, 0, 0, 2232,
	0, 0, 0, 1253, 1002, 1700, 2306, 969, 0, 0,
	0, 0, 0, 972, 0, 956, 954, 955, 947, 948,
	949, 950, 952, 953, 0, 0, 0, 1286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 0,
	392, 0, 1250, 0, 1508, 0, 71, 2330, 0, 0,
	0, 1077, 0, 0, 0, 0, 0, 0, 0, 1253,
	0, 0, 1287, 119, 66, 0, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1250, 0, 0, 132,
	0, 0, 1286, 1701, 0, 1508, 460, 0, 0, 99,
	2011, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 1253, 0, 0, 1056, 1056, 2387,
	0, 0, 0, 0, 586, 0, 0, 0, 0, 0,
	0, 1250, 1781, 1782, 0, 1799, 1800, 1801, 0, 0,
	0, 0, 0, 1286, 133, 0, 1781, 1782, 1984, 1799,
	1800, 1801, 126, 0, 0, 0, 0, 1508, 0, 127,
	1781, 1782, 0, 1799, 1800, 1801, 0, 0, 0, 0,
	0, 392, 0, 0, 0, 0, 1983, 1573, 118, 1286,
	1286, 0, 0, 0, 0, 1796, 758, 1573, 1286, 1286,
	0, 0, 1250, 0, 0, 0, 0, 0, 0, 1796,
	0, 2095, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1796, 0, 0, 0, 0, 71, 0,
	0, 1286, 0, 0, 0, 0, 0, 0, 1250, 1250,
	1586, 0, 1215, 0, 0, 0, 509, 1250, 1250, 509,
	1787, 0, 0, 0, 0, 2137, 566, 0, 0, 566,
	566, 0, 0, 0, 1787, 0, 0, 0, 0, 0,
	586, 586, 0, 392, 392, 0, 0, 0, 1787, 0,
	1250, 0, 0, 0, 0, 0, 0, 0, 1802, 1287,
	0, 2163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2165, 1436, 0, 0, 0, 0, 0, 0, 1797,
	0, 0, 0, 0, 0, 574, 1802, 0, 0, 0,
	993, 0, 0, 1797, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1364, 0, 1369, 1797, 0, 0,
	0, 0, 1376, 0, 2188, 1287, 0, 0, 0, 0,
	0, 0, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 0, 1418, 0, 1420, 1421, 1422,
	1423, 0, 1798, 0, 0, 0, 0, 735, 0, 0,
	0, 0, 0, 0, 1446, 0, 1798, 1286, 0, 392,
	1287, 994, 758, 1077, 0, 0, 0, 0, 0, 0,
	1798, 0, 0, 1573, 758, 0, 71, 2220, 2221, 1586,
	1487, 1488, 71, 0, 1504, 0, 1516, 1518, 1523, 1526,
	1527, 1528, 0, 2095, 758, 0, 0, 0, 0, 2254,
	0, 2255, 0, 392, 2257, 2258, 1250, 392, 0, 2262,
	0, 0, 0, 0, 0, 0, 0, 2095, 0, 758,
	1620, 0, 0, 0, 0, 0, 0, 0, 2095, 1793,
	1794, 1795, 0, 0, 1792, 1790, 1791, 1783, 1784, 1785,
	1786, 1788, 1789, 1793, 1794, 1795, 0, 0, 1792, 1790,
	1791, 1783, 1784, 1785, 1786, 1788, 1789, 1793, 1794, 1795,
	0, 0, 1792, 1790, 1791, 1783, 1784, 1785, 1786, 1788,
	1789, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 71, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1586, 0, 2322, 0, 0,
	2324, 0, 0, 0, 71, 0, 0, 0, 392, 0,
	71, 2095, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 38, 0, 0, 0, 0, 2356, 0, 0, 2095,
	0, 0, 39, 1620, 0, 0, 1620, 0, 0, 0,
	392, 0, 0, 0, 1286, 42, 0, 758, 0, 0,
	0, 0, 0, 0, 0, 2163, 2163, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 0, 0,
	0, 0, 0, 0, 0, 2393, 0, 0, 0, 0,
	1573, 0, 0, 0, 0, 0, 0, 1215, 0, 0,
	0, 0, 0, 1250, 0, 0, 59, 0, 0, 0,
	1286, 0, 71, 60, 0, 61, 0, 0, 0, 0,
	0, 0, 2409, 2410, 0, 0, 0, 0, 0, 392,
	0, 0, 943, 944, 0, 963, 964, 965, 973, 974,
	975, 0, 63, 0, 0, 0, 2429, 0, 966, 0,
	0, 0, 0, 0, 0, 946, 0, 0, 977, 1250,
	0, 0, 0, 0, 0, 1286, 1781, 1782, 0, 1799,
	1800, 1801, 0, 2444, 0, 758, 0, 0, 392, 945,
	0, 1436, 0, 0, 0, 960, 943, 944, 0, 963,
	964, 965, 973, 974, 975, 2095, 0, 0, 0, 0,
	0, 993, 966, 0, 0, 0, 0, 0, 0, 946,
	2393, 0, 977, 0, 1250, 0, 0, 0, 0, 1796,
	0, 0, 64, 0, 0, 0, 0, 758, 0, 0,
	0, 0, 0, 945, 0, 392, 0, 0, 0, 960,
	951, 0, 0, 0, 0, 0, 0, 119, 66, 2504,
	67, 0, 0, 0, 0, 0, 0, 0, 1721, 1722,
	970, 978, 0, 132, 1727, 0, 0, 1346, 0, 0,
	460, 0, 0, 99, 1787, 0, 993, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 968, 951, 1803, 1746, 0, 0, 961,
	0, 0, 0, 1753, 0, 0, 1757, 0, 0, 0,
	735, 0, 1802, 0, 970, 978, 735, 735, 0, 0,
	735, 0, 0, 1771, 967, 0, 0, 0, 133, 0,
	0, 0, 976, 1797, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 127, 0, 0, 0, 968, 0, 0,
	0, 0, 0, 961, 0, 0, 0, 994, 0, 0,
	0, 0, 118, 71, 1523, 1523, 1523, 0, 0, 71,
	0, 0, 962, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 971, 0,
	1056, 0, 0, 71, 0, 586, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 0, 1798, 0, 0, 0,
	0, 0, 574, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 962, 0, 0, 943,
	944, 0, 963, 964, 965, 973, 974, 975, 0, 0,
	0, 0, 971, 0, 0, 966, 0, 0, 0, 0,
	0, 0, 946, 0, 0, 977, 969, 0, 0, 957,
	958, 959, 972, 0, 956, 954, 955, 947, 948, 949,
	950, 952, 953, 0, 0, 0, 945, 0, 0, 0,
	0, 1823, 960, 0, 0, 0, 0, 0, 0, 0,
	1931, 0, 0, 1793, 1794, 1795, 0, 0, 1792, 1790,
	1791, 1783, 1784, 1785, 1786, 1788, 1789, 0, 0, 0,
	969, 0, 1949, 957, 958, 959, 972, 0, 956, 954,
	955, 947, 948, 949, 950, 952, 953, 0, 0, 586,
	586, 0, 0, 0, 0, 1822, 0, 951, 0, 0,
	0, 0, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1971, 0, 0, 970, 978, 1376,
	0, 0, 0, 0, 0, 1975, 0, 0, 1976, 0,
	0, 0, 0, 0, 0, 976, 0, 0, 0, 0,
	1981, 0, 0, 0, 0, 0, 0, 0, 0, 1990,
	968, 0, 0, 0, 0, 0, 961, 1994, 71, 0,
	1949, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 0, 0, 0, 0,
	2018, 967, 0, 0, 2020, 0, 943, 944, 0, 963,
	964, 965, 973, 974, 975, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 0, 0, 946,
	0, 0, 977, 0, 0, 0, 0, 2051, 2052, 0,
	0, 0, 0, 0, 0, 0, 2058, 2059, 2060, 962,
	0, 0, 0, 945, 0, 0, 0, 0, 0, 960,
	71, 0, 0, 71, 0, 971, 0, 0, 0, 0,
	0, 0, 0, 2071, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 735, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2092, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 951, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 969, 970, 978, 957, 958, 959, 972,
	0, 956, 954, 955, 947, 948, 949, 950, 952, 953,
	0, 0, 976, 0, 0, 0, 0, 0, 1821, 1056,
	0, 0, 0, 0, 0, 0, 0, 968, 586, 0,
	0, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 38, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 39, 121, 0, 0, 967, 0,
	0, 0, 0, 0, 2172, 0, 0, 42, 2175, 2176,
	0, 735, 0, 2178, 0, 0, 0, 0, 0, 0,
	2180, 123, 2182, 0, 0, 0, 0, 43, 0, 48,
	0, 0, 0, 0, 0, 0, 0, 0, 2189, 0,
	0, 0, 0, 0, 0, 0, 962, 0, 0, 0,
	51, 0, 0, 0, 53, 0, 0, 0, 59, 0,
	0, 124, 971, 0, 0, 60, 0, 61, 0, 0,
	1069, 2198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 38, 0, 0, 0,
	0, 0, 71, 0, 63, 0, 0, 39, 0, 0,
	943, 944, 0, 963, 964, 965, 973, 974, 975, 0,
	42, 0, 0, 0, 0, 0, 966, 0, 0, 0,
	0, 0, 2244, 946, 0, 0, 977, 0, 0, 0,
	969, 0, 48, 957, 958, 959, 972, 0, 956, 954,
	955, 947, 948, 949, 950, 952, 953, 945, 0, 0,
	0, 0, 0, 960, 0, 1773, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 0, 0, 0, 60, 0,
	61, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2298, 2299, 63, 72, 119,
	66, 0, 67, 0, 68, 0, 125, 0, 951, 0,
	0, 69, 0, 0, 71, 132, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 99, 2311, 0, 970, 978,
	0, 0, 2314, 2376, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 134, 0, 976, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 103, 0, 0, 0, 961, 0, 0,
	0, 0, 120, 0, 0, 0, 2346, 64, 0, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 967, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 119, 66, 0, 67, 0, 0, 71, 0,
	71, 0, 0, 0, 118, 0, 0, 4, 132, 0,
	0, 993, 0, 0, 0, 460, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 2399, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 957, 958, 959,
	972, 0, 956, 954, 955, 947, 948, 949, 950, 952,
	953, 0, 0, 0, 0, 2441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2473,
	2473, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2488, 0, 0, 0, 0,
	0, 0, 1108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2473, 0, 0, 175, 176,
	1113, 177, 1114, 1115, 1116, 1117, 330, 1118, 1119, 1120,
	1121, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 1122, 182, 337, 338, 183, 184, 1123, 1124, 339,
	340, 341, 1125, 185, 342, 1126, 824, 1127, 186, 187,
	188, 2473, 189, 1128, 190, 191, 192, 1129, 686, 193,
	194, 195, 1130, 1131, 1133, 1132, 1134, 1135, 1136, 196,
	197, 393, 198, 343, 199, 344, 345, 1137, 200, 1138,
	201, 1139, 202, 1140, 1141, 203, 204, 1142, 205, 1143,
	0, 1144, 346, 206, 207, 208, 347, 348, 1145, 1146,
	1147, 209, 210, 349, 350, 351, 0, 211, 1148, 212,
	1149, 1150, 687, 1151, 213, 352, 1152, 353, 1153, 0,
	214, 215, 216, 217, 354, 355, 689, 1154, 221, 1155,
	218, 1156, 688, 219, 356, 220, 357, 358, 359, 360,
	361, 1157, 362, 1158, 690, 222, 223, 224, 691, 225,
	226, 227, 1159, 229, 228, 1160, 363, 692, 230, 693,
	1161, 231, 1162, 1163, 232, 0, 233, 234, 235, 237,
	364, 236, 694, 238, 239, 241, 240, 1164, 1165, 1166,
	365, 242, 366, 243, 244, 1167, 245, 1168, 1169, 246,
	1170, 1171, 247, 367, 695, 248, 696, 368, 249, 250,
	251, 252, 253, 1172, 254, 369, 255, 370, 256, 1173,
	257, 258, 259, 260, 261, 371, 262, 263, 1174, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 1175, 276, 697, 277, 278, 372, 279, 0, 283,
	284, 285, 286, 1176, 288, 373, 287, 289, 290, 1177,
	291, 280, 281, 292, 698, 293, 374, 375, 294, 1178,
	301, 295, 296, 282, 297, 300, 376, 298, 299, 377,
	1179, 302, 1180, 303, 304, 305, 306, 307, 308, 309,
	1181, 378, 379, 380, 1182, 1183, 310, 311, 381, 382,
	1184, 312, 313, 314, 315, 1185, 1186, 316, 317, 318,
	319, 1187, 320, 1188, 383, 321, 322, 323, 384, 385,
	1189, 1190, 324, 1191, 1192, 1193, 1194, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1108, 0, 0, 0, 0, 0,
	1566, 0, 0, 0, 0, 0, 0, 0, 0, 1567,
	175, 176, 1113, 177, 1114, 1115, 1116, 1117, 330, 1118,
	1119, 1120, 1121, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 1122, 182, 337, 338, 183, 184, 1123,
	1124, 339, 340, 341, 1125, 185, 342, 1126, 824, 1127,
	186, 187, 188, 0, 189, 1128, 190, 191, 192, 1129,
	686, 193, 194, 195, 1130, 1131, 1133, 1132, 1134, 1135,
	1136, 196, 197, 393, 198, 343, 199, 344, 345, 1137,
	200, 1138, 201, 1139, 202, 1140, 1141, 203, 204, 1142,
	205, 1143, 0, 1144, 346, 206, 207, 208, 347, 348,
	1145, 1146, 1147, 209, 210, 349, 350, 351, 0, 211,
	1148, 212, 1149, 1150, 687, 1151, 213, 352, 1152, 353,
	1153, 0, 214, 215, 216, 217, 354, 355, 689, 1154,
	221, 1155, 218, 1156, 688, 219, 356, 220, 357, 358,
	359, 360, 361, 1157, 362, 1158, 690, 222, 223, 224,
	691, 225, 226, 227, 1159, 229, 228, 1160, 363, 692,
	230, 693, 1161, 231, 1162, 1163, 232, 0, 233, 234,
	235, 237, 364, 236, 694, 238, 239, 241, 240, 1164,
	1165, 1166, 365, 242, 366, 243, 244, 1167, 245, 1168,
	1169, 246, 1170, 1171, 247, 367, 695, 248, 696, 368,
	249, 250, 251, 252, 253, 1172, 254, 369, 255, 370,
	256, 1173, 257, 258, 259, 260, 261, 371, 262, 263,
	1174, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 1175, 276, 697, 277, 278, 372, 279,
	0, 283, 284, 285, 286, 1176, 288, 373, 287, 289,
	290, 1177, 291, 280, 281, 292, 698, 293, 374, 375,
	294, 1178, 301, 295, 296, 282, 297, 300, 376, 298,
	299, 377, 1179, 302, 1180, 303, 304, 305, 306, 307,
	308, 309, 1181, 378, 379, 380, 1182, 1183, 310, 311,
	381, 382, 1184, 312, 313, 314, 315, 1185, 1186, 316,
	317, 318, 319, 1187, 320, 1188, 383, 321, 322, 323,
	384, 385, 1189, 1190, 324, 1191, 1192, 1193, 1194, 325,
	326, 327, 328, 329, 0, 0, 0, 1108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2216, 175, 176, 1113, 177, 1114, 1115, 1116,
	1117, 330, 1118, 1119, 1120, 1121, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 1122, 182, 337, 338,
	183, 184, 1123, 1124, 339, 340, 341, 1125, 185, 342,
	1126, 824, 1127, 186, 187, 188, 0, 189, 1128, 190,
	191, 192, 1129, 686, 193, 194, 195, 1130, 1131, 1133,
	1132, 1134, 1135, 1136, 196, 197, 393, 198, 343, 199,
	344, 345, 1137, 200, 1138, 201, 1139, 202, 1140, 1141,
	203, 204, 1142, 205, 1143, 0, 1144, 346, 206, 207,
	208, 347, 348, 1145, 1146, 1147, 209, 210, 349, 350,
	351, 0, 211, 1148, 212, 1149, 1150, 687, 1151, 213,
	352, 1152, 353, 1153, 0, 214, 215, 216, 217, 354,
	355, 689, 1154, 221, 1155, 218, 1156, 688, 219, 356,
	220, 357, 358, 359, 360, 361, 1157, 362, 1158, 690,
	222, 223, 224, 691, 225, 226, 227, 1159, 229, 228,
	1160, 363, 692, 230, 693, 1161, 231, 1162, 1163, 232,
	0, 233, 234, 235, 237, 364, 236, 694, 238, 239,
	241, 240, 1164, 1165, 1166, 365, 242, 366, 243, 244,
	1167, 245, 1168, 1169, 246, 1170, 1171, 247, 367, 695,
	248, 696, 368, 249, 250, 251, 252, 253, 1172, 254,
	369, 255, 370, 256, 1173, 257, 258, 259, 260, 261,
	371, 262, 263, 1174, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 1175, 276, 697, 277,
	278, 372, 279, 0, 283, 284, 285, 286, 1176, 288,
	373, 287, 289, 290, 1177, 291, 280, 281, 292, 698,
	293, 374, 375, 294, 1178, 301, 295, 296, 282, 297,
	300, 376, 298, 299, 377, 1179, 302, 1180, 303, 304,
	305, 306, 307, 308, 309, 1181, 378, 379, 380, 1182,
	1183, 310, 311, 381, 382, 1184, 312, 313, 314, 315,
	1185, 1186, 316, 317, 318, 319, 1187, 320, 1188, 383,
	321, 322, 323, 384, 385, 1189, 1190, 324, 1191, 1192,
	1193, 1194, 325, 326, 327, 328, 329, 1108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1107, 0, 0, 175, 176, 1113, 177, 1114, 1115, 1116,
	1117, 330, 1118, 1119, 1120, 1121, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 1122, 182, 337, 338,
	183, 184, 1123, 1124, 339, 340, 341, 1125, 185, 342,
	1126, 824, 1127, 186, 187, 188, 0, 189, 1128, 190,
	191, 192, 1129, 686, 193, 194, 195, 1130, 1131, 1133,
	1132, 1134, 1135, 1136, 196, 197, 393, 198, 343, 199,
	344, 345, 1137, 200, 1138, 201, 1139, 202, 1140, 1141,
	203, 204, 1142, 205, 1143, 0, 1144, 346, 206, 207,
	208, 347, 348, 1145, 1146, 1147, 209, 210, 349, 350,
	351, 0, 211, 1148, 212, 1149, 1150, 687, 1151, 213,
	352, 1152, 353, 1153, 0, 214, 215, 216, 217, 354,
	355, 689, 1154, 221, 1155, 218, 1156, 688, 219, 356,
	220, 357, 358, 359, 360, 361, 1157, 362, 1158, 690,
	222, 223, 224, 691, 225, 226, 227, 1159, 229, 228,
	1160, 363, 692, 230, 693, 1161, 231, 1162, 1163, 232,
	0, 233, 234, 235, 237, 364, 236, 694, 238, 239,
	241, 240, 1164, 1165, 1166, 365, 242, 366, 243, 244,
	1167, 245, 1168, 1169, 246, 1170, 1171, 247, 367, 695,
	248, 696, 368, 249, 250, 251, 252, 253, 1172, 254,
	369, 255, 370, 256, 1173, 257, 258, 259, 260, 261,
	371, 262, 263, 1174, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 1175, 276, 697, 277,
	278, 372, 279, 0, 283, 284, 285, 286, 1176, 288,
	373, 287, 289, 290, 1177, 291, 280, 281, 292, 698,
	293, 374, 375, 294, 1178, 301, 295, 296, 282, 297,
	300, 376, 298, 299, 377, 1179, 302, 1180, 303, 304,
	305, 306, 307, 308, 309, 1181, 378, 379, 380, 1182,
	1183, 310, 311, 381, 382, 1184, 312, 313, 314, 315,
	1185, 1186, 316, 317, 318, 319, 1187, 320, 1188, 383,
	321, 322, 323, 384, 385, 1189, 1190, 324, 1191, 1192,
	1193, 1194, 325, 326, 327, 328, 329, 1465, 0, 624,
	613, 614, 611, 612, 603, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 1462, 177, 0,
	0, 0, 0, 641, 606, 0, 0, 0, 178, 179,
	180, 331, 656, 333, 657, 181, 658, 659, 0, 182,
	337, 338, 183, 184, 609, 640, 660, 661, 341, 0,
	185, 652, 0, 632, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 686, 193, 194, 195, 0,
	633, 634, 636, 0, 635, 637, 196, 197, 393, 198,
	662, 199, 663, 664, 0, 200, 0, 201, 0, 202,
	1463, 0, 655, 204, 0, 205, 0, 0, 0, 597,
	206, 207, 208, 642, 643, 620, 0, 0, 209, 210,
	665, 666, 667, 0, 211, 0, 212, 0, 0, 687,
	0, 213, 653, 0, 353, 0, 0, 214, 215, 216,
	217, 649, 651, 689, 0, 221, 0, 218, 0, 688,
	219, 668, 220, 669, 670, 671, 672, 673, 0, 631,
	0, 690, 222, 223, 224, 691, 225, 226, 227, 0,
	229, 228, 0, 654, 692, 230, 693, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 694,
	238, 239, 241, 240, 592, 0, 621, 650, 242, 674,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 695, 248, 696, 644, 249, 250, 251, 252, 253,
	0, 254, 645, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 675, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	697, 277, 278, 598, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 638, 291, 280, 281,
	292, 698, 293, 676, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 677, 298, 299, 646, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 678,
	679, 0, 0, 310, 311, 647, 648, 619, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 639, 320,
	0, 383, 321, 322, 323, 384, 680, 1461, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 593,
	0, 0, 0, 0, 0, 591, 0, 0, 0, 0,
	589, 590, 1464, 624, 613, 614, 611, 612, 603, 599,
	1459, 0, 0, 0, 0, 602, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 641, 606, 0,
	0, 0, 178, 179, 180, 331, 656, 333, 657, 181,
	658, 659, 0, 182, 337, 338, 183, 184, 609, 640,
	660, 661, 341, 0, 185, 652, 0, 632, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 686,
	193, 194, 195, 0, 633, 634, 636, 0, 635, 637,
	196, 197, 393, 198, 662, 199, 663, 664, 587, 200,
	0, 201, 0, 202, 0, 0, 655, 204, 0, 205,
	0, 0, 0, 597, 206, 207, 208, 642, 643, 620,
	0, 0, 209, 210, 665, 666, 667, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 653, 0, 353, 0,
	0, 214, 215, 216, 217, 649, 651, 689, 0, 221,
	0, 218, 0, 688, 219, 668, 220, 669, 670, 671,
	672, 673, 0, 631, 0, 690, 222, 223, 224, 691,
	225, 226, 227, 0, 229, 228, 0, 654, 692, 230,
	693, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 694, 238, 239, 241, 240, 592, 0,
	621, 650, 242, 674, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 367, 695, 248, 696, 644, 249,
	250, 251, 252, 253, 0, 254, 645, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 675, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 598, 279, 0,
	283, 284, 285, 286, 132, 288, 373, 287, 289, 290,
	638, 291, 280, 281, 292, 698, 293, 676, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 677, 298, 299,
	646, 0, 302, 134, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 678, 679, 0, 0, 310, 311, 647,
	648, 619, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 639, 320, 0, 383, 321, 322, 323, 823,
	680, 0, 0, 324, 0, 0, 0, 126, 325, 326,
	327, 328, 329, 593, 127, 0, 0, 0, 0, 591,
	0, 0, 0, 0, 589, 590, 0, 0, 0, 0,
	0, 0, 0, 996, 0, 0, 0, 0, 575, 602,
	624, 613, 614, 611, 612, 603, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 641, 606, 0, 0, 0, 178,
	179, 180, 331, 656, 333, 657, 181, 658, 659, 0,
	182, 337, 338, 183, 184, 609, 640, 660, 661, 341,
	0, 185, 652, 0, 632, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 686, 193, 194, 195,
	0, 633, 634, 636, 0, 635, 637, 196, 197, 393,
	198, 662, 199, 663, 664, 0, 200, 0, 201, 0,
	202, 0, 0, 655, 204, 0, 205, 0, 0, 0,
	597, 206, 207, 208, 642, 643, 620, 0, 0, 209,
	210, 665, 666, 667, 0, 211, 0, 212, 0, 0,
	687, 0, 213, 653, 0, 353, 0, 0, 214, 215,
	216, 217, 649, 651, 689, 0, 221, 0, 218, 0,
	688, 219, 668, 220, 669, 670, 671, 672, 673, 0,
	631, 0, 690, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 654, 692, 230, 693, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	694, 238, 239, 241, 240, 592, 0, 621, 650, 242,
	674, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 695, 248, 696, 644, 249, 250, 251, 252,
	253, 0, 254, 645, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 675, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 598, 279, 0, 283, 284, 285,
	286, 132, 288, 373, 287, 289, 290, 638, 291, 280,
	281, 292, 698, 293, 676, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 677, 298, 299, 646, 0, 302,
	134, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	678, 679, 0, 0, 310, 311, 647, 648, 619, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 639,
	320, 0, 383, 321, 322, 323, 823, 680, 0, 0,
	324, 0, 0, 0, 126, 325, 326, 327, 328, 329,
	593, 127, 0, 0, 0, 0, 591, 0, 0, 0,
	0, 589, 590, 624, 613, 614, 611, 612, 603, 0,
	996, 0, 0, 0, 0, 0, 602, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 641, 606, 0,
	0, 0, 178, 179, 180, 331, 656, 333, 657, 181,
	658, 659, 0, 182, 337, 338, 183, 184, 609, 640,
	660, 661, 341, 0, 185, 652, 0, 632, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 686,
	193, 194, 195, 0, 633, 634, 636, 0, 635, 637,
	196, 197, 393, 198, 662, 199, 663, 664, 0, 200,
	0, 201, 0, 202, 0, 0, 655, 204, 0, 205,
	0, 0, 0, 597, 206, 207, 208, 642, 643, 620,
	0, 0, 209, 210, 665, 666, 667, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 653, 0, 353, 0,
	0, 214, 215, 216, 217, 649, 651, 689, 0, 221,
	0, 218, 0, 688, 219, 668, 220, 669, 670, 671,
	672, 673, 0, 631, 0, 690, 222, 223, 224, 691,
	225, 226, 227, 0, 229, 228, 0, 654, 692, 230,
	693, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 694, 238, 239, 241, 240, 592, 0,
	621, 650, 242, 674, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 367, 695, 248, 696, 644, 249,
	250, 251, 252, 253, 0, 254, 645, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 675, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 598, 279, 0,
	283, 284, 285, 286, 132, 288, 373, 287, 289, 290,
	638, 291, 280, 281, 292, 698, 293, 676, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 677, 298, 299,
	646, 0, 302, 134, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 678, 679, 0, 0, 310, 311, 647,
	648, 619, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 639, 320, 0, 383, 321, 322, 323, 823,
	680, 0, 0, 324, 0, 0, 0, 126, 325, 326,
	327, 328, 329, 593, 127, 0, 0, 0, 0, 591,
	0, 0, 0, 0, 589, 590, 624, 613, 614, 611,
	612, 603, 0, 996, 0, 0, 0, 0, 0, 602,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	641, 606, 0, 0, 0, 178, 179, 180, 331, 656,
	333, 657, 181, 658, 659, 1519, 182, 337, 338, 183,
	184, 609, 640, 660, 661, 341, 0, 185, 652, 0,
	632, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 686, 193, 194, 195, 0, 633, 634, 636,
	0, 635, 637, 196, 197, 393, 198, 662, 199, 663,
	664, 0, 200, 0, 201, 0, 202, 0, 0, 655,
	204, 0, 205, 0, 0, 0, 597, 206, 207, 208,
	642, 643, 620, 0, 0, 209, 210, 665, 666, 667,
	0, 211, 0, 212, 0, 1524, 687, 0, 213, 653,
	0, 353, 0, 0, 214, 215, 216, 217, 649, 651,
	689, 0, 221, 0, 218, 0, 688, 219, 668, 220,
	669, 670, 671, 672, 673, 0, 631, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 1520,
	654, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 694, 238, 239, 241,
	240, 592, 0, 621, 650, 242, 674, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 367, 695, 248,
	696, 644, 249, 250, 251, 252, 253, 0, 254, 645,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 675,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 697, 277, 278,
	598, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 638, 291, 280, 281, 292, 698, 293,
	676, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	677, 298, 299, 646, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 678, 679, 0, 1521,
	310, 311, 647, 648, 619, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 639, 320, 0, 383, 321,
	322, 323, 384, 680, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 593, 0, 0, 0,
	0, 0, 591, 0, 0, 0, 0, 589, 590, 0,
	0, 0, 0, 0, 0, 0, 599, 0, 0, 0,
	0, 583, 602, 624, 613, 614, 611, 612, 603, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 641, 606, 0,
	0, 0, 178, 179, 180, 331, 656, 333, 657, 181,
	658, 659, 0, 182, 337, 338, 183, 184, 609, 640,
	660, 661, 341, 0, 185, 652, 0, 632, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 686,
	193, 194, 195, 0, 633, 634, 636, 0, 635, 637,
	196, 197, 393, 198, 662, 199, 663, 664, 587, 200,
	0, 201, 0, 202, 0, 0, 655, 204, 0, 205,
	0, 0, 0, 597, 206, 207, 208, 642, 643, 620,
	0, 0, 209, 210, 665, 666, 667, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 653, 0, 353, 0,
	0, 214, 215, 216, 217, 649, 651, 689, 0, 221,
	0, 218, 0, 688, 219, 668, 220, 669, 670, 671,
	672, 673, 0, 631, 0, 690, 222, 223, 224, 691,
	225, 226, 227, 0, 229, 228, 0, 654, 692, 230,
	693, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 694, 238, 239, 241, 240, 592, 0,
	621, 650, 242, 674, 243, 244, 0, 245, 585, 0,
	246, 0, 0, 247, 367, 695, 248, 696, 644, 249,
	250, 251, 252, 253, 0, 254, 645, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 675, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 598, 279, 0,
	283, 284, 285, 286, 0, 288, 373, 287, 289, 290,
	638, 291, 280, 281, 292, 698, 293, 676, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 677, 298, 299,
	646, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 678, 679, 0, 0, 310, 311, 647,
	648, 619, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 639, 320, 0, 383, 321, 322, 323, 384,
	680, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 593, 0, 0, 0, 0, 0, 591,
	0, 0, 0, 0, 589, 590, 624, 613, 614, 611,
	612, 603, 0, 599, 0, 0, 0, 0, 0, 602,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	641, 606, 0, 0, 0, 178, 179, 180, 331, 656,
	333, 657, 181, 658, 659, 0, 182, 337, 338, 183,
	184, 609, 640, 660, 661, 341, 0, 185, 652, 0,
	632, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 686, 193, 194, 195, 0, 633, 634, 636,
	0, 635, 637, 196, 197, 393, 198, 662, 199, 663,
	664, 0, 200, 0, 201, 0, 202, 0, 0, 655,
	204, 0, 205, 0, 0, 0, 597, 206, 207, 208,
	642, 643, 620, 0, 0, 209, 210, 665, 666, 667,
	0, 211, 0, 212, 0, 0, 687, 0, 213, 653,
	0, 353, 0, 0, 214, 215, 216, 217, 649, 651,
	689, 0, 221, 0, 218, 0, 688, 219, 668, 220,
	669, 670, 671, 672, 673, 0, 631, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 0,
	654, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 694, 238, 239, 241,
	240, 592, 2146, 621, 650, 242, 674, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 367, 695, 248,
	696, 644, 249, 250, 251, 252, 253, 0, 254, 645,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 675,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 697, 277, 278,
	598, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 638, 291, 280, 281, 292, 698, 293,
	676, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	677, 298, 299, 646, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 678, 679, 0, 0,
	310, 311, 647, 648, 619, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 639, 320, 0, 383, 321,
	322, 323, 384, 680, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 593, 0, 0, 0,
	0, 0, 591, 0, 0, 0, 0, 589, 590, 1057,
	624, 613, 614, 611, 612, 603, 599, 0, 0, 0,
	0, 0, 602, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 641, 606, 0, 0, 0, 178,
	179, 180, 331, 656, 333, 657, 181, 658, 659, 0,
	182, 337, 338, 183, 184, 609, 640, 660, 661, 341,
	0, 185, 652, 0, 632, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 686, 193, 194, 195,
	0, 633, 634, 636, 0, 635, 637, 196, 197, 393,
	198, 662, 199, 663, 664, 0, 200, 0, 201, 0,
	202, 0, 0, 655, 204, 0, 205, 0, 0, 0,
	597, 206, 207, 208, 642, 643, 620, 0, 0, 209,
	210, 665, 666, 667, 0, 211, 0, 212, 0, 0,
	687, 0, 213, 653, 0, 353, 0, 0, 214, 215,
	216, 217, 649, 651, 689, 0, 221, 1378, 218, 0,
	688, 219, 668, 220, 669, 670, 671, 672, 673, 0,
	631, 0, 690, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 654, 692, 230, 693, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	694, 238, 239, 241, 240, 592, 0, 621, 650, 242,
	674, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 695, 248, 696, 644, 249, 250, 251, 252,
	253, 0, 254, 645, 255, 370, 256, 1377, 257, 258,
	259, 260, 261, 675, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 598, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 638, 291, 280,
	281, 292, 698, 293, 676, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 677, 298, 299, 646, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	678, 679, 0, 0, 310, 311, 647, 648, 619, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 639,
	320, 0, 383, 321, 322, 323, 384, 680, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	593, 0, 0, 0, 0, 0, 591, 0, 0, 0,
	0, 589, 590, 624, 613, 614, 611, 612, 603, 0,
	599, 0, 0, 0, 0, 0, 602, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 641, 606, 0,
	0, 0, 178, 179, 180, 331, 656, 333, 657, 181,
	658, 659, 0, 182, 337, 338, 183, 184, 609, 640,
	660, 661, 341, 0, 185, 652, 0, 632, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 686,
	193, 194, 195, 0, 633, 634, 636, 0, 635, 637,
	196, 197, 393, 198, 662, 199, 663, 664, 587, 200,
	0, 201, 0, 202, 0, 0, 655, 204, 0, 205,
	0, 0, 0, 597, 206, 207, 208, 642, 643, 620,
	0, 0, 209, 210, 665, 666, 667, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 653, 0, 353, 0,
	0, 214, 215, 216, 217, 649, 651, 689, 0, 221,
	0, 218, 0, 688, 219, 668, 220, 669, 670, 671,
	672, 673, 0, 631, 0, 690, 222, 223, 224, 691,
	225, 226, 227, 0, 229, 228, 0, 654, 692, 230,
	693, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 694, 238, 239, 241, 240, 592, 0,
	621, 650, 242, 674, 243, 244, 0, 245, 585, 0,
	246, 0, 0, 247, 367, 695, 248, 696, 644, 249,
	250, 251, 252, 253, 0, 254, 645, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 675, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 598, 279, 0,
	283, 284, 285, 286, 0, 288, 373, 287, 289, 290,
	638, 291, 280, 281, 292, 698, 293, 676, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 677, 298, 299,
	646, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 678, 679, 0, 0, 310, 311, 647,
	648, 619, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 639, 320, 0, 383, 321, 322, 323, 384,
	680, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 593, 0, 0, 0, 0, 0, 591,
	0, 0, 0, 0, 589, 590, 624, 613, 614, 611,
	612, 603, 0, 599, 0, 0, 0, 0, 0, 602,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	641, 606, 0, 0, 0, 178, 179, 180, 331, 656,
	333, 657, 181, 658, 659, 0, 182, 337, 338, 183,
	184, 609, 640, 660, 661, 341, 0, 185, 652, 0,
	632, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 686, 193, 194, 195, 0, 633, 634, 636,
	0, 635, 637, 196, 197, 393, 198, 662, 199, 663,
	664, 0, 200, 0, 201, 0, 202, 0, 0, 655,
	204, 0, 205, 0, 0, 0, 597, 206, 207, 208,
	642, 643, 620, 0, 0, 209, 210, 665, 666, 667,
	0, 211, 0, 212, 0, 0, 687, 0, 213, 653,
	0, 353, 0, 0, 214, 215, 216, 217, 649, 651,
	689, 0, 221, 0, 218, 0, 688, 219, 668, 220,
	669, 670, 671, 672, 673, 0, 631, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 0,
	654, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 694, 238, 239, 241,
	240, 592, 0, 621, 650, 242, 674, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 367, 695, 248,
	696, 644, 249, 250, 251, 252, 253, 0, 254, 645,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 675,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 697, 277, 278,
	598, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 638, 291, 280, 281, 292, 698, 293,
	676, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	677, 298, 299, 646, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 678, 679, 0, 0,
	310, 311, 647, 648, 619, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 639, 320, 0, 383, 321,
	322, 323, 384, 680, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 593, 0, 0, 0,
	0, 0, 591, 0, 0, 0, 0, 589, 590, 0,
	0, 0, 0, 0, 1000, 1454, 599, 0, 0, 0,
	0, 0, 602, 624, 613, 614, 611, 612, 603, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 641, 606, 0,
	0, 0, 178, 179, 180, 331, 656, 333, 657, 181,
	658, 659, 0, 182, 337, 338, 183, 184, 609, 640,
	660, 661, 341, 0, 185, 652, 0, 632, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 686,
	193, 194, 195, 0, 633, 634, 636, 0, 635, 637,
	196, 197, 393, 198, 662, 199, 663, 664, 587, 200,
	0, 201, 0, 202, 0, 0, 655, 204, 0, 205,
	0, 0, 0, 597, 206, 207, 208, 642, 643, 620,
	0, 0, 209, 210, 665, 666, 667, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 653, 0, 353, 0,
	0, 214, 215, 216, 217, 649, 651, 689, 0, 221,
	0, 218, 0, 688, 219, 668, 220, 669, 670, 671,
	672, 673, 0, 631, 0, 690, 222, 223, 224, 691,
	225, 226, 227, 0, 229, 228, 0, 654, 692, 230,
	693, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 694, 238, 239, 241, 240, 592, 0,
	621, 650, 242, 674, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 367, 695, 248, 696, 644, 249,
	250, 251, 252, 253, 0, 254, 645, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 675, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 598, 279, 0,
	283, 284, 285, 286, 0, 288, 373, 287, 289, 290,
	638, 291, 280, 281, 292, 698, 293, 676, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 677, 298, 299,
	646, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 678, 679, 0, 0, 310, 311, 647,
	648, 619, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 639, 320, 0, 383, 321, 322, 323, 384,
	680, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 593, 0, 0, 0, 0, 0, 591,
	0, 0, 0, 0, 589, 590, 624, 613, 614, 611,
	612, 603, 0, 599, 0, 0, 0, 0, 0, 602,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	641, 606, 0, 0, 0, 178, 179, 180, 331, 656,
	333, 657, 181, 658, 659, 0, 182, 337, 338, 183,
	184, 609, 640, 660, 661, 341, 0, 185, 652, 0,
	632, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 686, 193, 194, 195, 0, 633, 634, 636,
	0, 635, 637, 196, 197, 393, 198, 662, 199, 663,
	664, 0, 200, 0, 201, 0, 202, 0, 0, 655,
	204, 0, 205, 0, 0, 0, 597, 206, 207, 208,
	642, 643, 620, 0, 0, 209, 210, 665, 666, 667,
	0, 211, 0, 212, 0, 0, 687, 0, 213, 653,
	0, 353, 0, 0, 214, 215, 216, 217, 649, 651,
	689, 0, 221, 0, 218, 0, 688, 219, 668, 220,
	669, 670, 671, 672, 673, 0, 631, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 0,
	654, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 694, 238, 239, 241,
	240, 592, 0, 621, 650, 242, 674, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 367, 695, 248,
	696, 644, 249, 250, 251, 252, 253, 0, 254, 645,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 675,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 697, 277, 278,
	598, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 638, 291, 280, 281, 292, 698, 293,
	676, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	677, 298, 299, 646, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 678, 679, 0, 0,
	310, 311, 647, 648, 619, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 639, 320, 0, 383, 321,
	322, 323, 384, 680, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 593, 0, 0, 0,
	0, 0, 591, 0, 0, 0, 0, 589, 590, 624,
	613, 614, 611, 612, 603, 0, 599, 2048, 0, 0,
	0, 0, 602, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 641, 606, 0, 0, 0, 178, 179,
	180, 331, 656, 333, 657, 181, 658, 659, 0, 182,
	337, 338, 183, 184, 609, 640, 660, 661, 341, 0,
	185, 652, 0, 632, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 686, 193, 194, 195, 0,
	633, 634, 636, 0, 635, 637, 196, 197, 393, 198,
	662, 199, 663, 664, 0, 200, 0, 201, 0, 202,
	0, 0, 655, 204, 0, 205, 0, 0, 0, 597,
	206, 207, 208, 642, 643, 620, 0, 0, 209, 210,
	665, 666, 667, 0, 211, 0, 212, 0, 0, 687,
	0, 213, 653, 0, 353, 0, 0, 214, 215, 216,
	217, 649, 651, 689, 0, 221, 0, 218, 0, 688,
	219, 668, 220, 669, 670, 671, 672, 673, 0, 631,
	0, 690, 222, 223, 224, 691, 225, 226, 227, 0,
	229, 228, 0, 654, 692, 230, 693, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 694,
	238, 239, 241, 240, 592, 0, 621, 650, 242, 674,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 695, 248, 696, 644, 249, 250, 251, 252, 253,
	0, 254, 645, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 675, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	697, 277, 278, 598, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 638, 291, 280, 281,
	292, 698, 293, 676, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 677, 298, 299, 646, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 678,
	679, 0, 0, 310, 311, 647, 648, 619, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 639, 320,
	0, 383, 321, 322, 323, 384, 680, 1997, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 593,
	0, 0, 0, 0, 0, 591, 0, 0, 0, 0,
	589, 590, 624, 613, 614, 611, 612, 603, 0, 599,
	0, 0, 0, 0, 0, 602, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 641, 606, 0, 0,
	0, 178, 179, 180, 331, 656, 333, 657, 181, 658,
	659, 0, 182, 337, 338, 183, 184, 609, 640, 660,
	661, 341, 0, 185, 652, 0, 632, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 686, 193,
	194, 195, 0, 633, 634, 636, 0, 635, 637, 196,
	197, 393, 198, 662, 199, 663, 664, 0, 200, 0,
	201, 0, 202, 0, 0, 655, 204, 0, 205, 0,
	0, 0, 597, 206, 207, 208, 642, 643, 620, 0,
	0, 209, 210, 665, 666, 667, 0, 211, 0, 212,
	0, 0, 687, 0, 213, 653, 0, 353, 0, 0,
	214, 215, 216, 217, 649, 651, 689, 0, 221, 0,
	218, 0, 688, 219, 668, 220, 669, 670, 671, 672,
	673, 0, 631, 0, 690, 222, 223, 224, 691, 225,
	226, 227, 0, 229, 228, 0, 654, 692, 230, 693,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 694, 238, 239, 241, 240, 592, 0, 621,
	650, 242, 674, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 367, 695, 248, 696, 644, 249, 250,
	251, 252, 253, 0, 254, 645, 255, 370, 256, 0,
	257, 258, 259, 260, 261, 675, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 697, 277, 278, 598, 279, 0, 283,
	284, 285, 286, 0, 288, 373, 287, 289, 290, 638,
	291, 280, 281, 292, 698, 293, 676, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 677, 298, 299, 646,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 678, 679, 0, 0, 310, 311, 647, 648,
	619, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 639, 320, 0, 383, 321, 322, 323, 384, 680,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 593, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 589, 590, 624, 613, 614, 611, 612,
	603, 0, 599, 1987, 0, 0, 0, 0, 602, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 641,
	606, 0, 0, 0, 178, 179, 180, 331, 656, 333,
	657, 181, 658, 659, 0, 182, 337, 338, 183, 184,
	609, 640, 660, 661, 341, 0, 185, 652, 0, 632,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 686, 193, 194, 195, 0, 633, 634, 636, 0,
	635, 637, 196, 197, 393, 198, 662, 199, 663, 664,
	0, 200, 0, 201, 0, 202, 0, 0, 655, 204,
	0, 205, 0, 0, 0, 597, 206, 207, 208, 642,
	643, 620, 0, 0, 209, 210, 665, 666, 667, 0,
	211, 0, 212, 0, 0, 687, 0, 213, 653, 0,
	353, 0, 0, 214, 215, 216, 217, 649, 651, 689,
	0, 221, 0, 218, 0, 688, 219, 668, 220, 669,
	670, 671, 672, 673, 0, 631, 0, 690, 222, 223,
	224, 691, 225, 226, 227, 0, 229, 228, 0, 654,
	692, 230, 693, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 694, 238, 239, 241, 240,
	592, 0, 621, 650, 242, 674, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 367, 695, 248, 696,
	644, 249, 250, 251, 252, 253, 0, 254, 645, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 675, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 697, 277, 278, 598,
	279, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 638, 291, 280, 281, 292, 698, 293, 676,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 677,
	298, 299, 646, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 678, 679, 0, 0, 310,
	311, 647, 648, 619, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 639, 320, 0, 383, 321, 322,
	323, 384, 680, 0, 0, 324, 0, 0, 0, 0,
	325, 326, 327, 328, 329, 593, 0, 0, 0, 0,
	0, 591, 0, 0, 0, 0, 589, 590, 1057, 624,
	613, 614, 611, 612, 603, 599, 0, 0, 0, 0,
	0, 602, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 641, 606, 0, 0, 0, 178, 179,
	180, 331, 656, 333, 657, 181, 658, 659, 0, 182,
	337, 338, 183, 184, 609, 640, 660, 661, 341, 0,
	185, 652, 0, 632, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 686, 193, 194, 195, 0,
	633, 634, 636, 0, 635, 637, 196, 197, 393, 198,
	662, 199, 663, 664, 0, 200, 0, 201, 0, 202,
	0, 0, 655, 204, 0, 205, 0, 0, 0, 597,
	206, 207, 208, 642, 643, 620, 0, 0, 209, 210,
	665, 666, 667, 0, 211, 0, 212, 0, 1524, 687,
	0, 213, 653, 0, 353, 0, 0, 214, 215, 216,
	217, 649, 651, 689, 0, 221, 0, 218, 0, 688,
	219, 668, 220, 669, 670, 671, 672, 673, 0, 631,
	0, 690, 222, 223, 224, 691, 225, 226, 227, 0,
	229, 228, 0, 654, 692, 230, 693, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 694,
	238, 239, 241, 240, 592, 0, 621, 650, 242, 674,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 695, 248, 696, 644, 249, 250, 251, 252, 253,
	0, 254, 645, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 675, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	697, 277, 278, 598, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 638, 291, 280, 281,
	292, 698, 293, 676, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 677, 298, 299, 646, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 678,
	679, 0, 0, 310, 311, 647, 648, 619, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 639, 320,
	0, 383, 321, 322, 323, 384, 680, 0, 0, 324,
	0, 0, 0, 0, 325, 326, 327, 328, 329, 593,
	0, 0, 0, 0, 0, 591, 0, 0, 0, 0,
	589, 590, 0, 0, 0, 0, 0, 0, 0, 599,
	0, 0, 0, 0, 1569, 602, 624, 613, 614, 611,
	612, 603, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	641, 606, 0, 0, 0, 178, 179, 180, 331, 656,
	333, 657, 181, 658, 659, 0, 182, 337, 338, 183,
	184, 609, 640, 660, 661, 341, 0, 185, 652, 0,
	632, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 686, 193, 194, 195, 0, 633, 634, 636,
	0, 635, 637, 196, 197, 393, 198, 662, 199, 663,
	664, 0, 200, 0, 201, 0, 202, 0, 0, 655,
	204, 0, 205, 0, 0, 0, 597, 206, 207, 208,
	642, 643, 620, 0, 0, 209, 210, 665, 666, 667,
	0, 211, 0, 212, 0, 0, 687, 0, 213, 653,
	0, 353, 0, 0, 214, 215, 216, 217, 649, 651,
	689, 0, 221, 0, 218, 0, 688, 219, 668, 220,
	669, 670, 671, 672, 673, 0, 631, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 0,
	654, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 694, 238, 239, 241,
	240, 592, 0, 621, 650, 242, 674, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 367, 695, 248,
	696, 644, 249, 250, 251, 252, 253, 0, 254, 645,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 675,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 697, 277, 278,
	598, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 638, 291, 280, 281, 292, 698, 293,
	676, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	677, 298, 299, 646, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 678, 679, 0, 0,
	310, 311, 647, 648, 619, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 639, 320, 0, 383, 321,
	322, 323, 384, 680, 0, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 593, 0, 0, 0,
	0, 0, 591, 0, 0, 0, 0, 589, 590, 0,
	0, 0, 0, 0, 0, 0, 599, 0, 0, 0,
	0, 1533, 602, 624, 613, 614, 611, 612, 603, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 641, 606, 0,
	0, 0, 178, 179, 180, 331, 656, 333, 657, 181,
	658, 659, 0, 182, 337, 338, 183, 184, 609, 640,
	660, 661, 341, 0, 185, 652, 0, 632, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 686,
	193, 194, 195, 0, 633, 634, 636, 0, 635, 637,
	196, 197, 393, 198, 662, 199, 663, 664, 0, 200,
	0, 201, 0, 202, 0, 0, 655, 204, 0, 205,
	0, 0, 0, 597, 206, 207, 208, 642, 643, 620,
	0, 0, 209, 210, 665, 666, 667, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 653, 0, 353, 0,
	0, 214, 215, 216, 217, 649, 651, 689, 0, 221,
	0, 218, 0, 688, 219, 668, 220, 669, 670, 671,
	672, 673, 0, 631, 0, 690, 222, 223, 224, 691,
	225, 226, 227, 0, 229, 228, 0, 654, 692, 230,
	693, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 694, 238, 239, 241, 240, 592, 0,
	621, 650, 242, 674, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 367, 695, 248, 696, 644, 249,
	250, 251, 252, 253, 0, 254, 645, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 675, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 598, 279, 0,
	283, 284, 285, 286, 0, 288, 373, 287, 289, 290,
	638, 291, 280, 281, 292, 698, 293, 676, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 677, 298, 299,
	646, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 678, 679, 0, 0, 310, 311, 647,
	648, 619, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 639, 320, 0, 383, 321, 322, 323, 384,
	680, 0, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 593, 0, 0, 0, 0, 0, 591,
	0, 0, 0, 0, 589, 590, 0, 0, 0, 0,
	0, 0, 0, 599, 0, 0, 0, 0, 1531, 602,
	624, 613, 614, 611, 612, 603, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 641, 606, 0, 0, 0, 178,
	179, 180, 331, 656, 333, 657, 181, 658, 659, 0,
	182, 337, 338, 183, 184, 609, 640, 660, 661, 341,
	0, 185, 652, 0, 632, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 686, 193, 194, 195,
	0, 633, 634, 636, 0, 635, 637, 196, 197, 393,
	198, 662, 199, 663, 664, 0, 200, 0, 201, 0,
	202, 0, 0, 655, 204, 0, 205, 0, 0, 0,
	597, 206, 207, 208, 642, 643, 620, 0, 0, 209,
	210, 665, 666, 667, 0, 211, 0, 212, 0, 0,
	687, 0, 213, 653, 0, 353, 0, 0, 214, 215,
	216, 217, 649, 651, 689, 0, 221, 0, 218, 0,
	688, 219, 668, 220, 669, 670, 671, 672, 673, 0,
	631, 0, 690, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 654, 692, 230, 693, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	694, 238, 239, 241, 240, 592, 0, 621, 650, 242,
	674, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 695, 248, 696, 644, 249, 250, 251, 252,
	253, 0, 254, 645, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 675, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 598, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 638, 291, 280,
	281, 292, 698, 293, 676, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 677, 298, 299, 646, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	678, 679, 0, 0, 310, 311, 647, 648, 619, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 639,
	320, 0, 383, 321, 322, 323, 384, 680, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	593, 0, 0, 0, 0, 0, 591, 0, 0, 0,
	0, 589, 590, 0, 0, 0, 0, 0, 0, 0,
	599, 0, 0, 0, 0, 1515, 602, 624, 613, 614,
	611, 612, 603, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 641, 606, 0, 0, 0, 178, 179, 180, 331,
	656, 333, 657, 181, 658, 659, 0, 182, 337, 338,
	183, 184, 609, 640, 660, 661, 341, 0, 185, 652,
	0, 632, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 686, 193, 194, 195, 0, 633, 634,
	636, 0, 635, 637, 196, 197, 393, 198, 662, 199,
	663, 664, 0, 200, 0, 201, 0, 202, 0, 0,
	655, 204, 0, 205, 0, 0, 0, 597, 206, 207,
	208, 642, 643, 620, 0, 0, 209, 210, 665, 666,
	667, 0, 211, 0, 212, 0, 0, 687, 0, 213,
	653, 0, 353, 0, 0, 214, 215, 216, 217, 649,
	651, 689, 0, 221, 0, 218, 0, 688, 219, 668,
	220, 669, 670, 671, 672, 673, 0, 631, 0, 690,
	222, 223, 224, 691, 225, 226, 227, 0, 229, 228,
	0, 654, 692, 230, 693, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 364, 236, 694, 238, 239,
	241, 240, 592, 0, 621, 650, 242, 674, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 367, 695,
	248, 696, 644, 249, 250, 251, 252, 253, 0, 254,
	645, 255, 370, 256, 0, 257, 258, 259, 260, 261,
	675, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 697, 277,
	278, 598, 279, 0, 283, 284, 285, 286, 0, 288,
	373, 287, 289, 290, 638, 291, 280, 281, 292, 698,
	293, 676, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 677, 298, 299, 646, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 378, 678, 679, 0,
	0, 310, 311, 647, 648, 619, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 639, 320, 0, 383,
	321, 322, 323, 384, 680, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 593, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 589, 590,
	0, 0, 0, 0, 0, 0, 0, 599, 0, 0,
	0, 0, 1503, 602, 624, 613, 614, 611, 612, 603,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 641, 606,
	0, 0, 0, 178, 179, 180, 331, 656, 333, 657,
	181, 658, 659, 0, 182, 337, 338, 183, 184, 609,
	640, 660, 661, 341, 0, 185, 652, 0, 632, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	686, 193, 194, 195, 0, 633, 634, 636, 0, 635,
	637, 196, 197, 393, 198, 662, 199, 663, 664, 0,
	200, 0, 201, 0, 202, 0, 0, 655, 204, 0,
	205, 0, 0, 0, 597, 206, 207, 208, 642, 643,
	620, 0, 0, 209, 210, 665, 666, 667, 0, 211,
	0, 212, 0, 0, 687, 0, 213, 653, 0, 353,
	0, 0, 214, 215, 216, 217, 649, 651, 689, 0,
	221, 0, 218, 0, 688, 219, 668, 220, 669, 670,
	671, 672, 673, 0, 631, 0, 690, 222, 223, 224,
	691, 225, 226, 227, 0, 229, 228, 0, 654, 692,
	230, 693, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 364, 236, 694, 238, 239, 241, 240, 592,
	0, 621, 650, 242, 674, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 367, 695, 248, 696, 644,
	249, 250, 251, 252, 253, 0, 254, 645, 255, 370,
	256, 0, 257, 258, 259, 260, 261, 675, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 697, 277, 278, 598, 279,
	0, 283, 284, 285, 286, 0, 288, 373, 287, 289,
	290, 638, 291, 280, 281, 292, 698, 293, 676, 375,
	294, 0, 301, 295, 296, 282, 297, 300, 677, 298,
	299, 646, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 378, 678, 679, 0, 0, 310, 311,
	647, 648, 619, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 639, 320, 0, 383, 321, 322, 323,
	384, 680, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 593, 0, 0, 0, 0, 0,
	591, 0, 0, 0, 0, 589, 590, 0, 0, 0,
	0, 0, 0, 0, 599, 0, 0, 0, 0, 1501,
	602, 1493, 613, 614, 611, 612, 603, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 641, 606, 0, 0, 0,
	178, 179, 180, 331, 656, 333, 657, 181, 658, 659,
	0, 182, 337, 338, 183, 184, 609, 640, 660, 661,
	341, 0, 185, 652, 0, 632, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 686, 193, 194,
	195, 0, 633, 634, 636, 0, 635, 637, 196, 197,
	393, 198, 662, 1496, 663, 664, 0, 200, 0, 201,
	0, 202, 0, 0, 655, 204, 0, 205, 0, 0,
	0, 597, 206, 207, 208, 642, 643, 620, 0, 0,
	209, 210, 665, 666, 667, 0, 211, 0, 212, 0,
	0, 687, 0, 213, 653, 0, 353, 0, 0, 214,
	1497, 216, 217, 649, 651, 689, 0, 221, 0, 218,
	0, 688, 219, 668, 220, 669, 670, 671, 672, 673,
	0, 631, 0, 690, 222, 223, 224, 691, 225, 226,
	227, 0, 229, 228, 0, 654, 692, 230, 693, 0,
	231, 0, 0, 232, 0, 233, 1498, 1495, 237, 364,
	236, 694, 238, 239, 241, 240, 592, 0, 621, 650,
	242, 674, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 695, 248, 696, 644, 249, 250, 251,
	252, 253, 0, 254, 645, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 675, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 697, 277, 278, 598, 279, 0, 283, 284,
	285, 1499, 0, 288, 373, 287, 289, 290, 638, 291,
	280, 281, 292, 698, 293, 676, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 677, 298, 299, 646, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 678, 679, 0, 0, 310, 311, 647, 648, 619,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	639, 320, 0, 383, 321, 322, 323, 384, 680, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 1494,
	329, 593, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 589, 590, 0, 0, 0, 0, 0, 0,
	0, 599, 0, 0, 0, 0, 1490, 602, 1493, 613,
	614, 611, 612, 603, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 641, 606, 0, 0, 0, 178, 179, 180,
	331, 656, 333, 657, 181, 658, 659, 0, 182, 337,
	338, 183, 184, 609, 640, 660, 661, 341, 0, 185,
	652, 0, 632, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 686, 193, 194, 195, 0, 633,
	634, 636, 0, 635, 637, 196, 197, 393, 198, 662,
	1496, 663, 664, 0, 200, 0, 201, 0, 202, 0,
	0, 655, 204, 0, 205, 0, 0, 0, 597, 206,
	207, 208, 642, 643, 620, 0, 0, 209, 210, 665,
	666, 667, 0, 211, 0, 212, 0, 0, 687, 0,
	213, 653, 0, 353, 0, 0, 214, 1497, 216, 217,
	649, 651, 689, 0, 221, 0, 218, 0, 688, 219,
	668, 220, 669, 670, 671, 672, 673, 0, 631, 0,
	690, 222, 223, 224, 691, 225, 226, 227, 0, 229,
	228, 0, 654, 692, 230, 693, 0, 231, 0, 0,
	232, 0, 233, 1498, 1495, 237, 364, 236, 694, 238,
	239, 241, 240, 592, 0, 621, 650, 242, 674, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 367,
	695, 248, 696, 644, 249, 250, 251, 252, 253, 0,
	254, 645, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 675, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 697,
	277, 278, 598, 279, 0, 283, 284, 285, 1499, 0,
	288, 373, 287, 289, 290, 638, 291, 280, 281, 292,
	698, 293, 676, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 677, 298, 299, 646, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 378, 678, 679,
	0, 0, 310, 311, 647, 648, 619, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 639, 320, 0,
	383, 321, 322, 323, 384, 680, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 1494, 329, 593, 0,
	0, 0, 0, 0, 591, 0, 0, 0, 0, 589,
	590, 624, 613, 614, 611, 612, 603, 0, 599, 0,
	0, 0, 0, 0, 602, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 641, 606, 0, 0, 0,
	178, 179, 180, 331, 656, 333, 657, 181, 658, 659,
	0, 182, 337, 338, 183, 184, 609, 640, 660, 661,
	341, 0, 185, 652, 0, 632, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 686, 193, 194,
	195, 0, 633, 634, 636, 0, 635, 637, 196, 197,
	393, 198, 662, 199, 663, 664, 0, 200, 0, 201,
	0, 202, 0, 0, 655, 204, 0, 205, 0, 0,
	0, 597, 206, 207, 208, 642, 643, 620, 0, 0,
	209, 210, 665, 666, 667, 0, 211, 0, 212, 0,
	0, 687, 0, 213, 653, 0, 353, 0, 0, 214,
	215, 216, 217, 649, 651, 689, 0, 221, 0, 218,
	0, 688, 219, 668, 220, 669, 670, 671, 672, 673,
	0, 631, 0, 690, 222, 223, 224, 691, 225, 226,
	227, 0, 229, 228, 0, 654, 692, 230, 693, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 694, 238, 239, 241, 240, 592, 0, 621, 650,
	242, 674, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 695, 248, 696, 644, 249, 250, 251,
	252, 253, 0, 254, 645, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 675, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 697, 277, 278, 598, 279, 0, 283, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 638, 291,
	280, 281, 292, 698, 293, 676, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 677, 298, 299, 646, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 678, 679, 0, 0, 310, 311, 647, 648, 619,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	639, 320, 0, 383, 321, 322, 323, 384, 680, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 593, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 589, 590, 624, 613, 614, 611, 612, 603,
	0, 599, 1449, 0, 0, 0, 0, 602, 0, 0,
	175, 176, 1365, 177, 0, 0, 0, 0, 641, 606,
	0, 0, 0, 178, 179, 180, 331, 656, 333, 657,
	181, 658, 659, 0, 182, 337, 338, 183, 184, 609,
	640, 660, 661, 341, 0, 185, 652, 0, 632, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	686, 193, 194, 195, 0, 633, 634, 636, 0, 635,
	637, 196, 197, 393, 198, 662, 199, 663, 664, 0,
	200, 0, 201, 0, 202, 0, 0, 655, 204, 0,
	205, 0, 0, 0, 597, 206, 207, 208, 642, 643,
	620, 0, 0, 209, 210, 665, 666, 667, 0, 211,
	0, 212, 0, 0, 687, 0, 213, 653, 0, 353,
	0, 0, 214, 215, 216, 217, 649, 651, 689, 0,
	221, 0, 218, 0, 688, 219, 668, 220, 669, 670,
	671, 672, 673, 0, 631, 0, 690, 222, 223, 224,
	691, 225, 226, 227, 0, 229, 228, 0, 654, 692,
	230, 693, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 364, 236, 694, 238, 239, 241, 240, 592,
	0, 621, 650, 242, 674, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 367, 695, 248, 696, 644,
	249, 250, 251, 252, 253, 0, 254, 645, 255, 370,
	256, 0, 257, 258, 259, 260, 261, 675, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 697, 277, 278, 598, 279,
	0, 283, 284, 285, 286, 0, 288, 373, 287, 289,
	290, 638, 291, 280, 281, 292, 698, 293, 676, 375,
	294, 0, 301, 295, 296, 282, 297, 300, 677, 298,
	299, 646, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 378, 678, 679, 0, 0, 310, 311,
	647, 648, 619, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 639, 320, 0, 383, 321, 322, 323,
	384, 680, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 593, 0, 0, 0, 0, 0,
	591, 0, 0, 0, 0, 589, 590, 0, 0, 0,
	0, 0, 0, 0, 599, 0, 0, 0, 0, 765,
	602, 624, 613, 614, 611, 612, 603, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 641, 606, 0, 0, 0,
	178, 179, 180, 331, 656, 333, 657, 181, 658, 659,
	0, 182, 337, 338, 183, 184, 609, 640, 660, 661,
	341, 0, 185, 652, 0, 632, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 686, 193, 194,
	195, 0, 633, 634, 636, 0, 635, 637, 196, 197,
	393, 198, 662, 199, 663, 664, 0, 200, 0, 201,
	0, 202, 0, 0, 655, 204, 0, 205, 0, 0,
	0, 597, 206, 207, 208, 642, 643, 620, 0, 0,
	209, 210, 665, 666, 667, 0, 211, 0, 212, 0,
	0, 687, 0, 213, 653, 0, 353, 0, 0, 214,
	215, 216, 217, 649, 651, 689, 0, 221, 0, 218,
	0, 688, 219, 668, 220, 669, 670, 671, 672, 673,
	0, 631, 0, 690, 222, 223, 224, 691, 225, 226,
	227, 0, 229, 228, 0, 654, 692, 230, 693, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 694, 238, 239, 241, 240, 592, 0, 621, 650,
	242, 674, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 695, 248, 696, 644, 249, 250, 251,
	252, 253, 0, 254, 645, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 675, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 697, 277, 278, 598, 279, 0, 283, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 638, 291,
	280, 281, 292, 698, 293, 676, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 677, 298, 299, 646, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 678, 679, 0, 0, 310, 311, 647, 648, 619,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	639, 320, 0, 383, 321, 322, 323, 384, 680, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 593, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 589, 590, 0, 0, 0, 0, 0, 0,
	0, 599, 0, 0, 0, 0, 763, 602, 624, 613,
	614, 611, 612, 603, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 641, 606, 0, 0, 0, 178, 179, 180,
	331, 656, 333, 657, 181, 658, 659, 0, 182, 337,
	338, 183, 184, 609, 640, 660, 661, 341, 0, 185,
	652, 0, 632, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 686, 193, 194, 195, 0, 633,
	634, 636, 0, 635, 637, 196, 197, 393, 198, 662,
	199, 663, 664, 0, 200, 0, 201, 0, 202, 0,
	0, 655, 204, 0, 205, 0, 0, 0, 597, 206,
	207, 208, 642, 643, 620, 0, 0, 209, 210, 665,
	666, 667, 0, 211, 0, 212, 0, 0, 687, 0,
	213, 653, 0, 353, 0, 0, 214, 215, 216, 217,
	649, 651, 689, 0, 221, 0, 218, 0, 688, 219,
	668, 220, 669, 670, 671, 672, 673, 0, 631, 0,
	690, 222, 223, 224, 691, 225, 226, 227, 0, 229,
	228, 0, 654, 692, 230, 693, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 236, 694, 238,
	239, 241, 240, 592, 0, 621, 650, 242, 674, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 367,
	695, 248, 696, 644, 249, 250, 251, 252, 253, 0,
	254, 645, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 675, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 697,
	277, 278, 598, 279, 0, 283, 284, 285, 286, 0,
	288, 373, 287, 289, 290, 638, 291, 280, 281, 292,
	698, 293, 676, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 677, 298, 299, 646, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 378, 678, 679,
	0, 0, 310, 311, 647, 648, 619, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 639, 320, 0,
	383, 321, 322, 323, 384, 680, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 593, 0,
	0, 0, 0, 0, 591, 0, 0, 0, 0, 589,
	590, 624, 613, 614, 611, 612, 603, 0, 599, 0,
	0, 0, 0, 0, 602, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 641, 606, 0, 0, 0,
	178, 179, 180, 331, 656, 333, 657, 181, 658, 659,
	0, 182, 337, 338, 183, 184, 609, 640, 660, 661,
	341, 0, 185, 652, 0, 632, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 686, 193, 194,
	2472, 0, 633, 634, 636, 0, 635, 637, 196, 197,
	393, 198, 662, 199, 663, 664, 0, 200, 0, 201,
	0, 202, 0, 0, 655, 204, 0, 205, 0, 0,
	0, 597, 206, 207, 208, 642, 643, 620, 0, 0,
	209, 210, 665, 666, 667, 0, 211, 0, 212, 0,
	0, 687, 0, 213, 653, 0, 353, 0, 0, 214,
	215, 216, 217, 649, 651, 689, 0, 221, 0, 218,
	0, 688, 219, 668, 220, 669, 670, 671, 672, 673,
	0, 631, 0, 690, 222, 223, 224, 691, 225, 226,
	227, 0, 229, 228, 0, 654, 692, 230, 693, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 694, 238, 239, 241, 240, 592, 0, 621, 650,
	242, 674, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 695, 248, 696, 644, 249, 250, 251,
	252, 253, 0, 254, 645, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 675, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 697, 277, 278, 598, 279, 0, 283, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 638, 291,
	280, 281, 292, 698, 293, 676, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 677, 298, 299, 646, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 678, 679, 0, 0, 310, 311, 647, 648, 619,
	312, 313, 2471, 315, 0, 0, 316, 317, 318, 319,
	639, 320, 0, 383, 321, 322, 323, 384, 680, 0,
	0, 324, 0, 0, 0, 0, 325, 326, 327, 328,
	329, 593, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 589, 590, 624, 613, 614, 611, 612, 603,
	0, 599, 0, 0, 0, 0, 0, 602, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 641, 606,
	0, 0, 0, 178, 179, 180, 331, 656, 333, 657,
	181, 658, 659, 0, 182, 337, 338, 183, 184, 609,
	640, 660, 661, 341, 0, 185, 652, 0, 632, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	686, 193, 194, 195, 0, 633, 634, 636, 0, 635,
	637, 196, 197, 393, 198, 662, 199, 663, 664, 0,
	200, 0, 201, 0, 202, 0, 0, 655, 204, 0,
	205, 0, 0, 0, 597, 206, 207, 208, 642, 643,
	620, 0, 0, 209, 210, 665, 666, 667, 0, 211,
	0, 212, 0, 0, 687, 0, 213, 653, 0, 353,
	0, 0, 214, 215, 216, 217, 649, 651, 689, 0,
	221, 0, 218, 0, 688, 219, 668, 220, 669, 670,
	671, 672, 673, 0, 631, 0, 690, 222, 223, 224,
	691, 225, 226, 227, 0, 229, 228, 0, 654, 692,
	230, 693, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 364, 236, 694, 238, 239, 241, 240, 592,
	0, 621, 650, 242, 674, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 367, 695, 248, 696, 644,
	249, 250, 251, 252, 253, 0, 254, 645, 255, 370,
	256, 0, 257, 258, 259, 260, 261, 675, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 697, 277, 278, 598, 279,
	0, 283, 284, 285, 286, 0, 288, 373, 287, 289,
	290, 638, 291, 280, 281, 292, 698, 293, 676, 375,
	294, 0, 301, 295, 296, 282, 297, 300, 677, 298,
	299, 646, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 378, 678, 679, 0, 0, 310, 311,
	647, 648, 619, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 639, 320, 0, 383, 321, 322, 323,
	384, 680, 0, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 593, 0, 0, 0, 0, 0,
	591, 0, 0, 0, 0, 589, 590, 624, 613, 614,
	611, 612, 603, 0, 599, 0, 0, 0, 0, 0,
	602, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 641, 606, 0, 0, 0, 178, 179, 180, 2470,
	656, 333, 657, 181, 658, 659, 0, 182, 337, 338,
	183, 184, 609, 640, 660, 661, 341, 0, 185, 652,
	0, 632, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 686, 193, 194, 2472, 0, 633, 634,
	636, 0, 635, 637, 196, 197, 393, 198, 662, 199,
	663, 664, 0, 200, 0, 201, 0, 202, 0, 0,
	655, 204, 0, 205, 0, 0, 0, 597, 206, 207,
	208, 642, 643, 620, 0, 0, 209, 210, 665, 666,
	667, 0, 211, 0, 212, 0, 0, 687, 0, 213,
	653, 0, 353, 0, 0, 214, 215, 216, 217, 649,
	651, 689, 0, 221, 0, 218, 0, 688, 219, 668,
	220, 669, 670, 671, 672, 673, 0, 631, 0, 690,
	222, 223, 224, 691, 225, 226, 227, 0, 229, 228,
	0, 654, 692, 230, 693, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 364, 236, 694, 238, 239,
	241, 240, 592, 0, 621, 650, 242, 674, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 367, 695,
	248, 696, 644, 249, 250, 251, 252, 253, 0, 254,
	645, 255, 370, 256, 0, 257, 258, 259, 260, 261,
	675, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 697, 277,
	278, 598, 279, 0, 283, 284, 285, 286, 0, 288,
	373, 287, 289, 290, 638, 291, 280, 281, 292, 698,
	293, 676, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 677, 298, 299, 646, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 378, 678, 679, 0,
	0, 310, 311, 647, 648, 619, 312, 313, 2471, 315,
	0, 0, 316, 317, 318, 319, 639, 320, 0, 383,
	321, 322, 323, 384, 680, 0, 0, 324, 0, 0,
	0, 0, 325, 326, 327, 328, 329, 593, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 589, 590,
	624, 613, 614, 611, 612, 603, 0, 599, 0, 0,
	0, 0, 0, 602, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 641, 606, 0, 0, 0, 178,
	179, 180, 331, 656, 333, 657, 181, 658, 659, 0,
	182, 337, 338, 183, 184, 609, 640, 660, 661, 341,
	0, 185, 652, 0, 632, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 686, 193, 194, 195,
	0, 633, 634, 636, 0, 635, 637, 196, 197, 393,
	198, 662, 199, 663, 664, 0, 200, 0, 201, 0,
	202, 0, 0, 655, 204, 0, 205, 0, 0, 0,
	597, 206, 207, 208, 642, 643, 620, 0, 0, 209,
	210, 665, 666, 667, 0, 211, 0, 212, 0, 0,
	687, 0, 213, 653, 0, 353, 0, 0, 214, 215,
	216, 217, 649, 651, 689, 0, 221, 0, 218, 0,
	688, 219, 668, 220, 669, 670, 671, 672, 673, 0,
	631, 0, 690, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 654, 692, 230, 693, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	694, 238, 239, 241, 240, 0, 0, 621, 650, 242,
	674, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 695, 248, 696, 644, 249, 250, 251, 252,
	253, 0, 254, 645, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 675, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 1513, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 638, 291, 280,
	281, 292, 698, 293, 676, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 677, 298, 299, 646, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	678, 679, 0, 0, 310, 311, 647, 648, 619, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 639,
	320, 0, 383, 321, 322, 323, 384, 680, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	624, 613, 614, 611, 612, 603, 1511, 0, 0, 0,
	0, 1509, 1510, 0, 0, 0, 175, 176, 0, 177,
	1512, 0, 0, 0, 641, 606, 602, 0, 0, 178,
	179, 180, 331, 656, 333, 657, 181, 658, 659, 0,
	182, 337, 338, 183, 184, 0, 640, 660, 661, 341,
	0, 185, 652, 0, 632, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 686, 193, 194, 195,
	0, 633, 634, 636, 0, 635, 637, 196, 197, 393,
	198, 662, 199, 663, 664, 0, 200, 0, 201, 0,
	202, 0, 0, 655, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 642, 643, 620, 0, 0, 209,
	210, 665, 666, 667, 0, 211, 0, 212, 0, 0,
	687, 0, 213, 653, 0, 353, 0, 0, 214, 215,
	216, 217, 649, 651, 689, 0, 221, 0, 218, 0,
	688, 219, 668, 220, 669, 670, 671, 672, 673, 0,
	631, 0, 690, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 654, 692, 230, 693, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	694, 238, 239, 241, 240, 0, 0, 621, 650, 242,
	674, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 695, 248, 696, 644, 249, 250, 251, 252,
	253, 0, 254, 645, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 675, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 1513, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 638, 291, 280,
	281, 292, 698, 293, 676, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 677, 298, 299, 646, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	678, 679, 0, 0, 310, 311, 647, 648, 619, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 639,
	320, 0, 383, 321, 322, 323, 384, 680, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	624, 613, 614, 611, 612, 603, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	1512, 0, 0, 0, 641, 606, 602, 0, 0, 178,
	179, 180, 0, 656, 333, 657, 181, 658, 659, 0,
	182, 337, 338, 183, 184, 609, 640, 660, 661, 341,
	0, 185, 652, 0, 632, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 686, 193, 194, 2472,
	0, 633, 634, 636, 0, 635, 637, 196, 197, 393,
	198, 662, 199, 663, 664, 0, 200, 0, 201, 0,
	202, 0, 0, 655, 204, 0, 205, 0, 0, 0,
	597, 206, 207, 208, 642, 643, 620, 0, 0, 209,
	210, 665, 666, 667, 0, 211, 0, 212, 0, 0,
	687, 0, 213, 653, 0, 353, 0, 0, 214, 215,
	216, 217, 649, 651, 0, 0, 221, 0, 218, 0,
	688, 219, 668, 220, 669, 670, 671, 672, 673, 0,
	631, 0, 0, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 654, 692, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	694, 238, 239, 241, 240, 592, 0, 621, 650, 242,
	674, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 695, 248, 696, 644, 249, 250, 251, 252,
	253, 0, 254, 645, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 675, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 598, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 638, 291, 280,
	281, 292, 0, 293, 676, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 677, 298, 299, 646, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	678, 679, 0, 0, 310, 311, 647, 648, 619, 312,
	313, 2471, 315, 0, 0, 316, 317, 318, 319, 639,
	320, 0, 383, 321, 322, 323, 384, 680, 0, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 589, 590, 0, 0, 0, 175, 176, 0, 177,
	599, 0, 0, 0, 641, 0, 602, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 640, 339, 340, 341,
	0, 185, 652, 0, 632, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 686, 193, 194, 195,
	0, 633, 634, 636, 0, 635, 637, 196, 197, 393,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 642, 643, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	687, 0, 213, 653, 0, 353, 0, 0, 214, 215,
	216, 217, 649, 651, 689, 0, 221, 0, 218, 0,
	688, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 690, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 654, 692, 230, 693, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	694, 238, 239, 241, 240, 0, 0, 0, 650, 242,
	366, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 695, 248, 696, 644, 249, 250, 251, 252,
	253, 0, 254, 645, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 638, 291, 280,
	281, 292, 698, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 646, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 647, 648, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 639,
	320, 0, 383, 321, 322, 323, 384, 385, 0, 0,
	324, 816, 0, 819, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	2097, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 824, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 686,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 393, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 687, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 354, 355, 689, 0, 221,
	0, 218, 0, 688, 219, 356, 220, 357, 358, 359,
	360, 361, 0, 362, 0, 690, 222, 223, 224, 691,
	225, 226, 227, 0, 229, 228, 0, 363, 692, 230,
	693, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 694, 238, 239, 241, 240, 0, 0,
	0, 365, 242, 366, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 367, 695, 248, 696, 368, 249,
	250, 251, 252, 253, 0, 254, 369, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 371, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 697, 277, 278, 372, 279, 0,
	283, 284, 285, 286, 132, 288, 373, 287, 289, 290,
	0, 291, 280, 281, 292, 698, 293, 374, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 376, 298, 299,
	377, 0, 302, 134, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 379, 380, 0, 0, 310, 311, 381,
	382, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 383, 321, 322, 323, 823,
	385, 0, 0, 324, 575, 0, 172, 126, 325, 326,
	327, 328, 329, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 118, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 393, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	0, 0, 221, 0, 218, 0, 0, 219, 356, 220,
	357, 358, 359, 360, 361, 0, 362, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	363, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 365, 242, 366, 243, 244, 0,
	245, 0, 738, 246, 0, 0, 247, 367, 0, 248,
	0, 368, 249, 250, 251, 252, 253, 0, 254, 369,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 371,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	372, 279, 0, 283, 284, 285, 286, 132, 288, 373,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	374, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	376, 298, 299, 377, 0, 302, 134, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 379, 380, 0, 0,
	310, 311, 381, 382, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 383, 321,
	322, 323, 823, 385, 0, 0, 324, 0, 172, 0,
	126, 325, 326, 327, 328, 329, 0, 127, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 732, 0, 1079, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 393, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 0, 0, 221, 0, 218, 0, 0, 219,
	356, 220, 357, 358, 359, 360, 361, 0, 362, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 363, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 365, 242, 366, 243,
	244, 0, 245, 0, 738, 246, 0, 0, 247, 367,
	0, 248, 0, 368, 249, 250, 251, 252, 253, 0,
	254, 369, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 371, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 372, 279, 0, 283, 284, 285, 286, 132,
	288, 373, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 374, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 376, 298, 299, 377, 0, 302, 134, 303,
	304, 305, 306, 307, 308, 309, 0, 378, 379, 380,
	0, 0, 310, 311, 381, 382, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	383, 321, 322, 323, 823, 385, 0, 0, 324, 575,
	0, 172, 126, 325, 326, 327, 328, 329, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 732, 0, 1079, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	393, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 221, 0, 218,
	0, 0, 219, 356, 220, 357, 358, 359, 360, 361,
	0, 362, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 363, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 365,
	242, 366, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 0, 248, 0, 368, 249, 250, 251,
	252, 253, 0, 254, 369, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 371, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 372, 279, 0, 283, 284,
	285, 286, 132, 288, 373, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 374, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 376, 298, 299, 377, 0,
	302, 134, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 379, 380, 0, 0, 310, 311, 381, 382, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 383, 321, 322, 323, 823, 385, 0,
	0, 324, 1839, 0, 172, 126, 325, 326, 327, 328,
	329, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 118, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 393, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	221, 0, 218, 0, 0, 219, 356, 220, 357, 358,
	359, 360, 361, 0, 362, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 363, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 364, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 365, 242, 366, 243, 244, 0, 245, 0,
	738, 246, 0, 0, 247, 367, 0, 248, 0, 368,
	249, 250, 251, 252, 253, 0, 254, 369, 255, 370,
	256, 0, 257, 258, 259, 260, 261, 371, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 372, 279,
	0, 283, 284, 285, 286, 0, 288, 373, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 374, 375,
	294, 0, 301, 295, 296, 282, 297, 300, 376, 298,
	299, 377, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 378, 379, 380, 0, 0, 310, 311,
	381, 382, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 383, 321, 322, 323,
	384, 385, 0, 0, 324, 731, 0, 172, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 732, 0, 737, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 393, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 221, 0, 218, 0, 0, 219, 356,
	220, 357, 358, 359, 360, 361, 0, 362, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 363, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 364, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 365, 242, 366, 243, 244,
	0, 245, 0, 738, 246, 0, 0, 247, 367, 0,
	248, 0, 368, 249, 250, 251, 252, 253, 0, 254,
	369, 255, 370, 256, 0, 257, 258, 259, 260, 261,
	371, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 372, 279, 0, 283, 284, 285, 286, 0, 288,
	373, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 374, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 376, 298, 299, 377, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 378, 379, 380, 0,
	0, 310, 311, 381, 382, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 383,
	321, 322, 323, 384, 385, 0, 0, 324, 0, 172,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 732, 0, 737, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 393, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 0, 0, 221, 0, 218, 0, 0,
	219, 356, 220, 357, 358, 359, 360, 361, 0, 362,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 363, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 365, 242, 366,
	243, 244, 0, 245, 0, 738, 246, 0, 0, 247,
	367, 0, 248, 0, 368, 249, 250, 251, 252, 253,
	0, 254, 369, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 371, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 372, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 374, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 376, 298, 299, 377, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 379,
	380, 0, 0, 310, 311, 381, 382, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 383, 321, 322, 323, 384, 385, 0, 0, 324,
	0, 172, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 732, 0, 737,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	393, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 221, 0, 218,
	0, 0, 219, 356, 220, 357, 358, 359, 360, 361,
	0, 362, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 363, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 365,
	242, 366, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 0, 248, 0, 368, 249, 250, 251,
	252, 253, 0, 254, 369, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 371, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 372, 279, 0, 283, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 374, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 376, 298, 299, 377, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 379, 380, 0, 0, 310, 311, 381, 382, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 383, 321, 322, 323, 384, 385, 0,
	0, 324, 0, 0, 172, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 1196, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 393, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	221, 0, 218, 0, 0, 219, 356, 220, 357, 358,
	359, 360, 361, 0, 362, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 363, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 364, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 365, 242, 366, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 367, 0, 248, 0, 368,
	249, 250, 251, 252, 253, 0, 254, 369, 255, 370,
	256, 0, 257, 258, 259, 260, 261, 371, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 372, 279,
	0, 283, 284, 285, 286, 0, 288, 373, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 374, 375,
	294, 0, 301, 295, 296, 282, 297, 300, 376, 298,
	299, 377, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 378, 379, 380, 0, 0, 310, 311,
	381, 382, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 383, 321, 322, 323,
	384, 385, 0, 0, 324, 0, 172, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 1657, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 393, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	0, 0, 221, 0, 218, 0, 0, 219, 356, 220,
	357, 358, 359, 360, 361, 0, 362, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	363, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 365, 242, 366, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 367, 0, 248,
	0, 368, 249, 250, 251, 252, 253, 0, 254, 369,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 371,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	372, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	374, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	376, 298, 299, 377, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 379, 380, 0, 0,
	310, 311, 381, 382, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 383, 321,
	322, 323, 384, 385, 0, 0, 324, 0, 172, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 2012, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 393, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 0, 0, 221, 0, 218, 0, 0, 219,
	356, 220, 357, 358, 359, 360, 361, 0, 362, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 363, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 365, 242, 366, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 367,
	0, 248, 0, 368, 249, 250, 251, 252, 253, 0,
	254, 369, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 371, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 372, 279, 0, 283, 284, 285, 286, 0,
	288, 373, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 374, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 376, 298, 299, 377, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 378, 379, 380,
	0, 0, 310, 311, 381, 382, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	383, 321, 322, 323, 384, 385, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 624, 613,
	614, 611, 612, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 1082, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 656, 333, 657, 181, 658, 659, 0, 182, 337,
	338, 183, 184, 0, 0, 660, 661, 341, 0, 185,
	342, 0, 824, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 686, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 393, 198, 662,
	199, 663, 664, 0, 200, 0, 201, 0, 202, 0,
	0, 655, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 620, 0, 0, 209, 210, 665,
	666, 667, 0, 211, 0, 212, 0, 0, 687, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 689, 0, 221, 0, 218, 0, 688, 219,
	668, 220, 669, 670, 671, 672, 673, 0, 631, 0,
	690, 222, 223, 224, 691, 225, 226, 227, 0, 229,
	228, 0, 363, 692, 230, 693, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 236, 694, 238,
	239, 241, 240, 0, 0, 621, 365, 242, 674, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 367,
	695, 248, 696, 368, 249, 250, 251, 252, 253, 0,
	254, 369, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 675, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 697,
	277, 278, 372, 279, 0, 283, 284, 285, 286, 0,
	288, 373, 287, 289, 290, 0, 291, 280, 281, 292,
	698, 293, 676, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 677, 298, 299, 377, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 378, 678, 679,
	0, 0, 310, 311, 381, 382, 619, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	383, 321, 322, 323, 384, 680, 0, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 874, 0,
	819, 878, 0, 0, 0, 876, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 824, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 686, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 393,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	687, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 689, 0, 221, 0, 218, 0,
	688, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 690, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 363, 692, 230, 693, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	694, 238, 239, 241, 240, 0, 0, 0, 365, 242,
	366, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 695, 248, 696, 368, 249, 250, 251, 252,
	253, 0, 254, 369, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 0, 291, 280,
	281, 292, 698, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 377, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 381, 382, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 383, 321, 322, 323, 384, 385, 0, 480,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	168, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 221, 0, 218,
	0, 0, 219, 356, 220, 357, 358, 359, 360, 361,
	0, 362, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 363, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 365,
	242, 366, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 0, 248, 0, 368, 249, 250, 251,
	252, 253, 0, 254, 369, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 371, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 372, 279, 0, 283, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 374, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 376, 298, 299, 377, 0,
	302, 167, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 379, 380, 0, 0, 310, 311, 381, 382, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 383, 321, 322, 323, 384, 385, 0,
	165, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 171, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 168, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 221, 0,
	218, 0, 0, 219, 356, 220, 357, 358, 359, 360,
	361, 0, 362, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 363, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	365, 242, 366, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 367, 0, 248, 0, 368, 249, 250,
	251, 252, 253, 0, 254, 369, 255, 370, 256, 0,
	257, 258, 259, 260, 261, 371, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 372, 279, 0, 283,
	284, 285, 286, 0, 288, 373, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 374, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 376, 298, 299, 377,
	0, 302, 167, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 379, 380, 0, 0, 310, 311, 381, 382,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 383, 321, 322, 323, 384, 385,
	819, 878, 324, 0, 0, 876, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 171, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 824, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 686, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 393,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	687, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 689, 0, 221, 0, 218, 0,
	688, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 690, 222, 223, 224, 691, 225, 226, 227,
	0, 229, 228, 0, 363, 692, 230, 693, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	694, 238, 239, 241, 240, 0, 0, 0, 365, 242,
	366, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 695, 248, 696, 368, 249, 250, 251, 252,
	253, 0, 254, 369, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 697, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 0, 291, 280,
	281, 292, 698, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 377, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 381, 382, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 383, 321, 322, 323, 384, 385, 172, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 168, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 0, 0, 221, 0, 218, 0, 0, 219,
	356, 220, 357, 358, 359, 360, 361, 0, 362, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 363, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 365, 242, 366, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 367,
	0, 248, 0, 368, 249, 250, 251, 252, 253, 0,
	254, 369, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 371, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 372, 279, 0, 283, 284, 285, 286, 0,
	288, 373, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 374, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 376, 298, 299, 377, 0, 302, 167, 303,
	304, 305, 306, 307, 308, 309, 0, 378, 379, 380,
	0, 0, 310, 311, 381, 382, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	383, 321, 322, 323, 384, 385, 819, 878, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 171, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	824, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 686, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 393, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 687, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	689, 0, 221, 0, 218, 0, 688, 219, 356, 220,
	357, 358, 359, 360, 361, 0, 362, 0, 690, 222,
	223, 224, 691, 225, 226, 227, 0, 229, 228, 0,
	363, 692, 230, 693, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 694, 238, 239, 241,
	240, 0, 0, 0, 365, 242, 366, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 367, 695, 248,
	696, 368, 249, 250, 251, 252, 253, 0, 254, 369,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 371,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 697, 277, 278,
	372, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 0, 291, 280, 281, 292, 698, 293,
	374, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	376, 298, 299, 377, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 379, 380, 0, 0,
	310, 311, 381, 382, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 383, 321,
	322, 323, 384, 385, 172, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 393, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	221, 0, 218, 0, 0, 219, 356, 220, 357, 358,
	359, 360, 361, 0, 362, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 363, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 364, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 365, 242, 366, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 367, 0, 248, 0, 368,
	249, 250, 251, 252, 253, 0, 254, 369, 255, 370,
	256, 0, 257, 258, 259, 260, 261, 371, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 372, 279,
	0, 283, 284, 285, 286, 0, 288, 373, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 374, 375,
	294, 0, 301, 295, 296, 282, 297, 300, 376, 298,
	299, 377, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 378, 379, 380, 0, 0, 310, 311,
	381, 382, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 383, 321, 322, 323,
	384, 385, 819, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 171, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 824, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 686, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 393, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 687, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 689, 0, 221, 0,
	218, 0, 688, 219, 356, 220, 357, 358, 359, 360,
	361, 0, 362, 0, 690, 222, 223, 224, 691, 225,
	226, 227, 0, 229, 228, 0, 363, 692, 230, 693,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 694, 238, 239, 241, 240, 0, 0, 0,
	365, 242, 366, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 367, 695, 248, 696, 368, 249, 250,
	251, 252, 253, 0, 254, 369, 255, 370, 256, 0,
	257, 258, 259, 260, 261, 371, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 697, 277, 278, 372, 279, 0, 283,
	284, 285, 286, 0, 288, 373, 287, 289, 290, 0,
	291, 280, 281, 292, 698, 293, 374, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 376, 298, 299, 377,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 379, 380, 0, 0, 310, 311, 381, 382,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 383, 321, 322, 323, 384, 385,
	172, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	1589, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 1587, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 393,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 1628, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 1592, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 221, 1626, 218, 0,
	0, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 363, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 365, 242,
	366, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 0, 248, 0, 368, 249, 250, 251, 252,
	253, 0, 254, 369, 255, 370, 256, 1591, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 377, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 381, 382, 0, 312,
	313, 314, 315, 0, 1627, 316, 317, 318, 319, 0,
	320, 0, 383, 321, 322, 323, 384, 385, 172, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 1589, 185,
	342, 0, 0, 1584, 186, 187, 188, 0, 189, 1587,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 393, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 1592, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	1583, 355, 0, 0, 221, 0, 218, 0, 0, 219,
	356, 220, 357, 358, 359, 360, 361, 0, 362, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 363, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 365, 242, 366, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 367,
	0, 248, 0, 368, 249, 250, 251, 252, 253, 0,
	254, 369, 255, 370, 256, 1591, 257, 258, 259, 260,
	261, 371, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 372, 279, 0, 283, 284, 285, 286, 0,
	288, 373, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 374, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 376, 298, 299, 377, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 378, 379, 380,
	0, 0, 310, 311, 381, 382, 0, 312, 313, 314,
	315, 0, 1590, 316, 317, 318, 319, 0, 320, 0,
	383, 321, 322, 323, 384, 385, 0, 794, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 393, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 0, 0, 221, 0, 218, 0, 0,
	219, 356, 220, 357, 358, 359, 360, 361, 0, 362,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 363, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 365, 242, 366,
	243, 244, 0, 245, 0, 738, 246, 0, 0, 247,
	367, 0, 248, 0, 368, 249, 250, 251, 252, 253,
	0, 254, 369, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 371, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 372, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 374, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 376, 298, 299, 377, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 379,
	380, 0, 0, 310, 311, 381, 382, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 383, 321, 322, 323, 384, 385, 0, 744, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 393,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 746, 355, 0, 0, 221, 0, 218, 0,
	0, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 363, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 365, 242,
	366, 243, 244, 0, 245, 0, 738, 246, 0, 0,
	247, 367, 0, 248, 0, 368, 249, 250, 251, 252,
	253, 0, 254, 369, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 377, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 381, 382, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 383, 321, 322, 323, 384, 385, 0, 740,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	393, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 742, 355, 0, 0, 221, 0, 218,
	0, 0, 219, 356, 220, 357, 358, 359, 360, 361,
	0, 362, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 363, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 365,
	242, 366, 243, 244, 0, 245, 0, 738, 246, 0,
	0, 247, 367, 0, 248, 0, 368, 249, 250, 251,
	252, 253, 0, 254, 369, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 371, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 372, 279, 0, 283, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 374, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 376, 298, 299, 377, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 379, 380, 0, 0, 310, 311, 381, 382, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 383, 321, 322, 323, 384, 385, 0,
	412, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	411, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 393, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 221, 0,
	218, 0, 0, 219, 356, 220, 357, 358, 359, 360,
	361, 0, 362, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 363, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	365, 242, 366, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 367, 0, 248, 0, 368, 249, 250,
	251, 252, 253, 0, 254, 369, 255, 370, 410, 0,
	257, 258, 259, 260, 261, 371, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 372, 279, 0, 283,
	284, 285, 286, 0, 288, 373, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 374, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 376, 298, 299, 377,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 379, 380, 0, 0, 310, 311, 381, 382,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 383, 321, 322, 323, 384, 385,
	172, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 1572, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 393,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 221, 0, 218, 0,
	0, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 363, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 365, 242,
	366, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 0, 248, 0, 368, 249, 250, 251, 252,
	253, 0, 254, 369, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 377, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 381, 382, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 383, 321, 322, 323, 384, 385, 172, 2164,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 393, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 0, 0, 221, 0, 218, 0, 0, 219,
	356, 220, 357, 358, 359, 360, 361, 0, 362, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 363, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 365, 242, 366, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 367,
	0, 248, 0, 368, 249, 250, 251, 252, 253, 0,
	254, 369, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 371, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 372, 279, 0, 283, 284, 285, 286, 0,
	288, 373, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 374, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 376, 298, 299, 377, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 378, 379, 380,
	0, 0, 310, 311, 381, 382, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	383, 321, 322, 323, 384, 385, 172, 2164, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 393, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	0, 0, 221, 0, 218, 0, 0, 219, 356, 220,
	357, 358, 359, 360, 361, 0, 362, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	363, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 365, 242, 366, 243, 244, 0,
	245, 0, 0, 2161, 0, 0, 247, 367, 0, 248,
	0, 368, 249, 250, 251, 252, 253, 0, 254, 369,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 371,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	372, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	374, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	376, 298, 299, 377, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 379, 380, 0, 0,
	310, 311, 381, 382, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 383, 321,
	322, 323, 384, 385, 172, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 393, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	221, 0, 218, 0, 0, 219, 356, 220, 357, 358,
	359, 360, 361, 0, 362, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 363, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 364, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 365, 242, 366, 243, 244, 0, 245, 0,
	738, 246, 0, 0, 247, 367, 0, 248, 0, 368,
	249, 250, 251, 252, 253, 0, 254, 369, 255, 370,
	256, 0, 257, 258, 259, 260, 261, 371, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 372, 279,
	0, 283, 284, 285, 286, 0, 288, 373, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 374, 375,
	294, 0, 301, 295, 296, 282, 297, 300, 376, 298,
	299, 377, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 378, 379, 380, 0, 0, 310, 311,
	381, 382, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 383, 321, 322, 323,
	384, 385, 0, 1354, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 393, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 0,
	0, 221, 0, 218, 0, 0, 219, 356, 220, 357,
	358, 359, 360, 361, 0, 362, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 363,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 365, 242, 366, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 367, 0, 248, 0,
	368, 249, 250, 251, 252, 253, 0, 254, 369, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 371, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 372,
	279, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 374,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 376,
	298, 299, 377, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 379, 380, 0, 0, 310,
	311, 381, 382, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 383, 321, 322,
	323, 384, 385, 0, 1352, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 393, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 354, 355,
	0, 0, 221, 0, 218, 0, 0, 219, 356, 220,
	357, 358, 359, 360, 361, 0, 362, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	363, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 365, 242, 366, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 367, 0, 248,
	0, 368, 249, 250, 251, 252, 253, 0, 254, 369,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 371,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	372, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	374, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	376, 298, 299, 377, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 379, 380, 0, 0,
	310, 311, 381, 382, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 383, 321,
	322, 323, 384, 385, 172, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	175, 176, 1334, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 393, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	221, 0, 218, 0, 0, 219, 356, 220, 357, 358,
	359, 360, 361, 0, 362, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 363, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 364, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 365, 242, 366, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 367, 0, 248, 0, 368,
	249, 250, 251, 252, 253, 0, 254, 369, 255, 370,
	256, 0, 257, 258, 259, 260, 261, 371, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 372, 279,
	0, 283, 284, 285, 286, 0, 288, 373, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 374, 375,
	294, 0, 301, 295, 296, 282, 297, 300, 376, 298,
	299, 377, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 378, 379, 380, 0, 0, 310, 311,
	381, 382, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 383, 321, 322, 323,
	384, 385, 0, 506, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 853, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 393, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 354, 355, 0,
	0, 221, 0, 218, 0, 0, 219, 356, 220, 357,
	358, 359, 360, 361, 0, 362, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 363,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 508, 0, 238, 239, 241, 240,
	0, 0, 0, 365, 242, 366, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 367, 0, 248, 0,
	368, 249, 250, 251, 252, 253, 0, 254, 369, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 371, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 372,
	279, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 374,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 376,
	298, 299, 377, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 503, 379, 380, 0, 0, 310,
	311, 381, 382, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 383, 321, 322,
	323, 384, 385, 0, 1214, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 393, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 1213, 355,
	0, 0, 221, 0, 218, 0, 0, 219, 356, 220,
	357, 358, 359, 360, 361, 0, 362, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	363, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 365, 242, 366, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 367, 0, 248,
	0, 368, 249, 250, 251, 252, 253, 0, 254, 369,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 371,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	372, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	374, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	376, 298, 299, 377, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 379, 380, 0, 0,
	310, 311, 381, 382, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 383, 321,
	322, 323, 384, 385, 0, 506, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 853, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 393, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 221, 0, 218, 0, 0, 219, 356,
	220, 357, 358, 359, 360, 361, 0, 362, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 363, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 364, 508, 0, 238, 239,
	241, 240, 0, 0, 0, 365, 242, 366, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 367, 0,
	248, 0, 368, 249, 250, 251, 252, 253, 0, 254,
	369, 255, 370, 256, 0, 257, 258, 259, 260, 261,
	371, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 372, 279, 0, 283, 284, 285, 286, 0, 288,
	373, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 374, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 376, 298, 299, 377, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 503, 379, 380, 0,
	0, 310, 854, 381, 382, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 383,
	321, 322, 323, 384, 385, 0, 506, 324, 172, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 497,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 393, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 0, 0, 221, 0, 218, 0, 0, 219,
	356, 220, 357, 358, 359, 360, 361, 0, 362, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 363, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 508, 0, 238,
	239, 241, 240, 0, 0, 0, 365, 242, 366, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 367,
	0, 248, 0, 368, 249, 250, 251, 252, 253, 0,
	254, 369, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 371, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 372, 279, 0, 283, 284, 285, 286, 0,
	288, 373, 287, 837, 290, 0, 291, 280, 281, 292,
	0, 293, 374, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 376, 298, 299, 377, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 503, 379, 380,
	0, 0, 310, 311, 381, 382, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	383, 321, 322, 323, 384, 385, 0, 812, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 393, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 811, 355, 0, 0, 221, 0, 218, 0, 0,
	219, 356, 220, 357, 358, 359, 360, 361, 0, 362,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 363, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 365, 242, 366,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 0, 248, 0, 368, 249, 250, 251, 252, 253,
	0, 254, 369, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 371, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 372, 279, 0, 283, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 374, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 376, 298, 299, 377, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 379,
	380, 0, 0, 310, 311, 381, 382, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 383, 321, 322, 323, 384, 385, 0, 809, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 393,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 808, 355, 0, 0, 221, 0, 218, 0,
	0, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 363, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 365, 242,
	366, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 0, 248, 0, 368, 249, 250, 251, 252,
	253, 0, 254, 369, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 377, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 381, 382, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 383, 321, 322, 323, 384, 385, 0, 805,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	393, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 804, 355, 0, 0, 221, 0, 218,
	0, 0, 219, 356, 220, 357, 358, 359, 360, 361,
	0, 362, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 363, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 365,
	242, 366, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 0, 248, 0, 368, 249, 250, 251,
	252, 253, 0, 254, 369, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 371, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 372, 279, 0, 283, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 374, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 376, 298, 299, 377, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 379, 380, 0, 0, 310, 311, 381, 382, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 383, 321, 322, 323, 384, 385, 0,
	802, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 393, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 801, 355, 0, 0, 221, 0,
	218, 0, 0, 219, 356, 220, 357, 358, 359, 360,
	361, 0, 362, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 363, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	365, 242, 366, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 367, 0, 248, 0, 368, 249, 250,
	251, 252, 253, 0, 254, 369, 255, 370, 256, 0,
	257, 258, 259, 260, 261, 371, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 372, 279, 0, 283,
	284, 285, 286, 0, 288, 373, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 374, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 376, 298, 299, 377,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 379, 380, 0, 0, 310, 311, 381, 382,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 383, 321, 322, 323, 384, 385,
	0, 798, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 393, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 797, 355, 0, 0, 221,
	0, 218, 0, 0, 219, 356, 220, 357, 358, 359,
	360, 361, 0, 362, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 363, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 365, 242, 366, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 367, 0, 248, 0, 368, 249,
	250, 251, 252, 253, 0, 254, 369, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 371, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 372, 279, 0,
	283, 284, 285, 286, 0, 288, 373, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 374, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 376, 298, 299,
	377, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 379, 380, 0, 0, 310, 311, 381,
	382, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 383, 321, 322, 323, 384,
	385, 172, 0, 324, 0, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 175, 176, 786,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	393, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 221, 0, 218,
	0, 0, 219, 356, 220, 357, 358, 359, 360, 361,
	0, 362, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 363, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 365,
	242, 366, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 0, 248, 0, 368, 249, 250, 251,
	252, 253, 0, 254, 369, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 371, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 372, 279, 0, 283, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 374, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 376, 298, 299, 377, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 379, 380, 0, 0, 310, 311, 381, 382, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 383, 321, 322, 323, 384, 385, 0,
	784, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 393, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 783, 355, 0, 0, 221, 0,
	218, 0, 0, 219, 356, 220, 357, 358, 359, 360,
	361, 0, 362, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 363, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	365, 242, 366, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 367, 0, 248, 0, 368, 249, 250,
	251, 252, 253, 0, 254, 369, 255, 370, 256, 0,
	257, 258, 259, 260, 261, 371, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 372, 279, 0, 283,
	284, 285, 286, 0, 288, 373, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 374, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 376, 298, 299, 377,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 379, 380, 0, 0, 310, 311, 381, 382,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 383, 321, 322, 323, 384, 385,
	0, 780, 324, 172, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 0, 0, 0, 175,
	176, 0, 177, 0, 0, 0, 0, 330, 0, 0,
	0, 0, 178, 179, 180, 331, 332, 333, 334, 181,
	335, 336, 0, 182, 337, 338, 183, 184, 0, 0,
	339, 340, 341, 0, 185, 342, 0, 0, 0, 186,
	187, 188, 0, 189, 0, 190, 191, 192, 0, 0,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	196, 197, 393, 198, 343, 199, 344, 345, 0, 200,
	0, 201, 0, 202, 0, 0, 203, 204, 0, 205,
	0, 0, 0, 346, 206, 207, 208, 347, 348, 0,
	0, 0, 209, 210, 349, 350, 351, 0, 211, 0,
	212, 0, 0, 0, 0, 213, 352, 0, 353, 0,
	0, 214, 215, 216, 217, 354, 355, 0, 0, 221,
	0, 218, 0, 0, 219, 356, 220, 357, 358, 359,
	360, 361, 0, 362, 0, 0, 222, 223, 224, 0,
	225, 226, 227, 0, 229, 228, 0, 363, 0, 230,
	0, 0, 231, 0, 0, 232, 0, 233, 234, 235,
	237, 364, 236, 0, 238, 239, 241, 240, 0, 0,
	0, 365, 242, 366, 243, 244, 0, 245, 0, 0,
	246, 0, 0, 247, 367, 0, 248, 0, 368, 249,
	250, 251, 252, 253, 0, 254, 369, 255, 370, 256,
	0, 257, 258, 259, 260, 261, 371, 262, 263, 0,
	264, 265, 266, 267, 268, 270, 271, 269, 272, 273,
	274, 275, 0, 276, 0, 277, 278, 372, 279, 0,
	283, 284, 285, 286, 0, 288, 373, 287, 289, 290,
	0, 291, 280, 281, 292, 0, 293, 374, 375, 294,
	0, 301, 295, 296, 282, 297, 300, 376, 298, 299,
	377, 0, 302, 0, 303, 304, 305, 306, 307, 308,
	309, 0, 378, 379, 380, 0, 0, 310, 311, 381,
	382, 0, 312, 313, 314, 315, 0, 0, 316, 317,
	318, 319, 0, 320, 0, 383, 321, 322, 323, 384,
	385, 0, 778, 324, 172, 0, 0, 0, 325, 326,
	327, 328, 329, 0, 0, 0, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 393, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	221, 0, 218, 0, 0, 219, 356, 220, 357, 358,
	359, 360, 361, 0, 362, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 363, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 364, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 365, 242, 366, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 367, 0, 248, 0, 368,
	249, 250, 251, 252, 253, 0, 254, 369, 255, 370,
	256, 0, 257, 258, 259, 260, 261, 371, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 372, 279,
	0, 283, 284, 285, 286, 0, 288, 373, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 374, 375,
	294, 0, 301, 295, 296, 282, 297, 300, 376, 298,
	299, 377, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 378, 379, 380, 0, 0, 310, 311,
	381, 382, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 383, 321, 322, 323,
	384, 385, 0, 772, 324, 172, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 0, 0,
	0, 175, 176, 0, 177, 0, 0, 0, 0, 330,
	0, 0, 0, 0, 178, 179, 180, 331, 332, 333,
	334, 181, 335, 336, 0, 182, 337, 338, 183, 184,
	0, 0, 339, 340, 341, 0, 185, 342, 0, 0,
	0, 186, 187, 188, 0, 189, 0, 190, 191, 192,
	0, 0, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 196, 197, 393, 198, 343, 199, 344, 345,
	0, 200, 0, 201, 0, 202, 0, 0, 203, 204,
	0, 205, 0, 0, 0, 346, 206, 207, 208, 347,
	348, 0, 0, 0, 209, 210, 349, 350, 351, 0,
	211, 0, 212, 0, 0, 0, 0, 213, 352, 0,
	353, 0, 0, 214, 215, 216, 217, 774, 355, 0,
	0, 221, 0, 218, 0, 0, 219, 356, 220, 357,
	358, 359, 360, 361, 0, 362, 0, 0, 222, 223,
	224, 0, 225, 226, 227, 0, 229, 228, 0, 363,
	0, 230, 0, 0, 231, 0, 0, 232, 0, 233,
	234, 235, 237, 364, 236, 0, 238, 239, 241, 240,
	0, 0, 0, 365, 242, 366, 243, 244, 0, 245,
	0, 0, 246, 0, 0, 247, 367, 0, 248, 0,
	368, 249, 250, 251, 252, 253, 0, 254, 369, 255,
	370, 256, 0, 257, 258, 259, 260, 261, 371, 262,
	263, 0, 264, 265, 266, 267, 268, 270, 271, 269,
	272, 273, 274, 275, 0, 276, 0, 277, 278, 372,
	279, 0, 283, 284, 285, 286, 0, 288, 373, 287,
	289, 290, 0, 291, 280, 281, 292, 0, 293, 374,
	375, 294, 0, 301, 295, 296, 282, 297, 300, 376,
	298, 299, 377, 0, 302, 0, 303, 304, 305, 306,
	307, 308, 309, 0, 378, 379, 380, 0, 0, 310,
	311, 381, 382, 0, 312, 313, 314, 315, 0, 0,
	316, 317, 318, 319, 0, 320, 0, 383, 321, 322,
	323, 384, 385, 0, 750, 324, 172, 0, 0, 0,
	325, 326, 327, 328, 329, 0, 0, 0, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 393, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 752, 355,
	0, 0, 221, 0, 218, 0, 0, 219, 356, 220,
	357, 358, 359, 360, 361, 0, 362, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	363, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 365, 242, 366, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 367, 0, 248,
	0, 368, 249, 250, 251, 252, 253, 0, 254, 369,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 371,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	372, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	374, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	376, 298, 299, 377, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 379, 380, 0, 0,
	310, 311, 381, 382, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 383, 321,
	322, 323, 384, 385, 0, 748, 324, 172, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	0, 0, 0, 175, 176, 0, 177, 0, 0, 0,
	0, 330, 0, 0, 0, 0, 178, 179, 180, 331,
	332, 333, 334, 181, 335, 336, 0, 182, 337, 338,
	183, 184, 0, 0, 339, 340, 341, 0, 185, 342,
	0, 0, 0, 186, 187, 188, 0, 189, 0, 190,
	191, 192, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 0, 0, 0, 196, 197, 393, 198, 343, 199,
	344, 345, 0, 200, 0, 201, 0, 202, 0, 0,
	203, 204, 0, 205, 0, 0, 0, 346, 206, 207,
	208, 347, 348, 0, 0, 0, 209, 210, 349, 350,
	351, 0, 211, 0, 212, 0, 0, 0, 0, 213,
	352, 0, 353, 0, 0, 214, 215, 216, 217, 354,
	355, 0, 0, 221, 0, 218, 0, 0, 219, 356,
	220, 357, 358, 359, 360, 361, 0, 362, 0, 0,
	222, 223, 224, 0, 225, 226, 227, 0, 229, 228,
	0, 363, 0, 230, 0, 0, 231, 0, 0, 232,
	0, 233, 234, 235, 237, 364, 236, 0, 238, 239,
	241, 240, 0, 0, 0, 365, 242, 366, 243, 244,
	0, 245, 0, 0, 246, 0, 0, 247, 367, 0,
	248, 0, 368, 249, 250, 251, 252, 253, 0, 254,
	369, 255, 370, 256, 0, 257, 258, 259, 260, 261,
	371, 262, 263, 0, 264, 265, 266, 267, 268, 270,
	271, 269, 272, 273, 274, 275, 0, 276, 0, 277,
	278, 372, 279, 0, 283, 284, 285, 286, 0, 288,
	373, 287, 289, 290, 0, 291, 280, 281, 292, 0,
	293, 374, 375, 294, 0, 301, 295, 296, 282, 297,
	300, 376, 298, 299, 377, 0, 302, 0, 303, 304,
	305, 306, 307, 308, 309, 0, 378, 379, 380, 0,
	0, 310, 311, 381, 382, 0, 312, 313, 314, 315,
	0, 0, 316, 317, 318, 319, 0, 320, 0, 383,
	321, 322, 323, 384, 385, 0, 506, 324, 172, 0,
	0, 0, 325, 326, 327, 328, 329, 0, 0, 0,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 497,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 393, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	354, 355, 0, 0, 221, 0, 218, 0, 0, 219,
	356, 220, 357, 358, 359, 360, 361, 0, 362, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 363, 0, 230, 0, 0, 496, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 508, 0, 238,
	239, 241, 240, 0, 0, 0, 365, 242, 366, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 367,
	0, 248, 0, 368, 249, 250, 251, 252, 253, 0,
	254, 369, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 371, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 498, 279, 0, 283, 284, 285, 286, 0,
	288, 373, 287, 499, 290, 0, 291, 280, 281, 292,
	0, 293, 374, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 376, 298, 299, 377, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 503, 379, 380,
	0, 0, 310, 501, 381, 382, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	383, 321, 322, 323, 384, 385, 0, 488, 324, 172,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 0, 0, 0, 175, 176, 0, 177, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 178, 179,
	180, 331, 332, 333, 334, 181, 335, 336, 0, 182,
	337, 338, 183, 184, 0, 0, 339, 340, 341, 0,
	185, 342, 0, 0, 0, 186, 187, 188, 0, 189,
	0, 190, 191, 192, 0, 0, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 196, 197, 393, 198,
	343, 199, 344, 345, 0, 200, 0, 201, 0, 202,
	0, 0, 203, 204, 0, 205, 0, 0, 0, 346,
	206, 207, 208, 347, 348, 0, 0, 0, 209, 210,
	349, 350, 351, 0, 211, 0, 212, 0, 0, 0,
	0, 213, 352, 0, 353, 0, 0, 214, 215, 216,
	217, 354, 355, 0, 0, 221, 0, 218, 0, 0,
	219, 356, 220, 357, 358, 359, 360, 361, 0, 362,
	0, 0, 222, 223, 224, 0, 225, 226, 227, 0,
	229, 228, 0, 363, 0, 230, 0, 0, 231, 0,
	0, 232, 0, 233, 234, 235, 237, 364, 236, 0,
	238, 239, 241, 240, 0, 0, 0, 365, 242, 366,
	243, 244, 0, 245, 0, 0, 246, 0, 0, 247,
	367, 0, 248, 0, 368, 249, 250, 251, 252, 253,
	0, 254, 369, 255, 370, 256, 0, 257, 258, 259,
	260, 261, 371, 262, 263, 0, 264, 265, 266, 267,
	268, 270, 271, 269, 272, 273, 274, 275, 0, 276,
	0, 277, 278, 372, 279, 0, 489, 284, 285, 286,
	0, 288, 373, 287, 289, 290, 0, 291, 280, 281,
	292, 0, 293, 374, 375, 294, 0, 301, 295, 296,
	282, 297, 300, 376, 298, 299, 377, 0, 302, 0,
	303, 304, 305, 306, 307, 308, 309, 0, 378, 379,
	380, 0, 0, 310, 311, 381, 382, 0, 312, 313,
	314, 315, 0, 0, 316, 317, 318, 319, 0, 320,
	0, 383, 321, 322, 323, 384, 385, 0, 486, 324,
	172, 0, 0, 0, 325, 326, 327, 328, 329, 0,
	0, 0, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 393,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 221, 0, 218, 0,
	0, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 363, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 365, 242,
	366, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 0, 248, 0, 368, 249, 250, 251, 252,
	253, 0, 254, 369, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 377, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 381, 382, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 383, 321, 322, 323, 384, 385, 0, 478,
	324, 172, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 0, 0, 0, 175, 176, 0,
	177, 0, 0, 0, 0, 330, 0, 0, 0, 0,
	178, 179, 180, 331, 332, 333, 334, 181, 335, 336,
	0, 182, 337, 338, 183, 184, 0, 0, 339, 340,
	341, 0, 185, 342, 0, 0, 0, 186, 187, 188,
	0, 189, 0, 190, 191, 192, 0, 0, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 196, 197,
	393, 198, 343, 199, 344, 345, 0, 200, 0, 201,
	0, 202, 0, 0, 203, 204, 0, 205, 0, 0,
	0, 346, 206, 207, 208, 347, 348, 0, 0, 0,
	209, 210, 349, 350, 351, 0, 211, 0, 212, 0,
	0, 0, 0, 213, 352, 0, 353, 0, 0, 214,
	215, 216, 217, 354, 355, 0, 0, 221, 0, 218,
	0, 0, 219, 356, 220, 357, 358, 359, 360, 361,
	0, 362, 0, 0, 222, 223, 224, 0, 225, 226,
	227, 0, 229, 228, 0, 363, 0, 230, 0, 0,
	231, 0, 0, 232, 0, 233, 234, 235, 237, 364,
	236, 0, 238, 239, 241, 240, 0, 0, 0, 365,
	242, 366, 243, 244, 0, 245, 0, 0, 246, 0,
	0, 247, 367, 0, 248, 0, 368, 249, 250, 251,
	252, 253, 0, 254, 369, 255, 370, 256, 0, 257,
	258, 259, 260, 261, 371, 262, 263, 0, 264, 265,
	266, 267, 268, 270, 271, 269, 272, 273, 274, 275,
	0, 276, 0, 277, 278, 372, 279, 0, 283, 284,
	285, 286, 0, 288, 373, 287, 289, 290, 0, 291,
	280, 281, 292, 0, 293, 374, 375, 294, 0, 301,
	295, 296, 282, 297, 300, 376, 298, 299, 377, 0,
	302, 0, 303, 304, 305, 306, 307, 308, 309, 0,
	378, 379, 380, 0, 0, 310, 311, 381, 382, 0,
	312, 313, 314, 315, 0, 0, 316, 317, 318, 319,
	0, 320, 0, 383, 321, 322, 323, 384, 385, 0,
	435, 324, 172, 0, 0, 0, 325, 326, 327, 328,
	329, 0, 0, 0, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 393, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 221, 0,
	218, 0, 0, 219, 356, 220, 357, 358, 359, 360,
	361, 0, 362, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 363, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	365, 242, 366, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 367, 0, 248, 0, 368, 249, 250,
	251, 252, 253, 0, 254, 369, 255, 370, 256, 0,
	257, 258, 259, 260, 261, 371, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 372, 279, 0, 283,
	284, 285, 286, 0, 288, 373, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 374, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 376, 298, 299, 377,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 379, 380, 0, 0, 310, 311, 381, 382,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 383, 321, 322, 323, 384, 385,
	172, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 0, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 393,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 221, 0, 218, 0,
	0, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 363, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 365, 242,
	366, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 0, 248, 0, 368, 249, 250, 251, 252,
	253, 0, 254, 369, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 0, 291, 280,
	281, 292, 0, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 377, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 381, 382, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 383, 321, 322, 323, 384, 385, 172, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 393, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	1886, 355, 0, 0, 221, 0, 218, 0, 0, 219,
	356, 220, 357, 358, 359, 360, 361, 0, 362, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 363, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 365, 242, 366, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 367,
	0, 248, 0, 368, 249, 250, 251, 252, 253, 0,
	254, 369, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 371, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 372, 279, 0, 283, 284, 285, 286, 0,
	288, 373, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 374, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 376, 298, 299, 377, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 378, 379, 380,
	0, 0, 310, 311, 381, 382, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	383, 321, 322, 323, 384, 385, 172, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 393, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 1884, 355,
	0, 0, 221, 0, 218, 0, 0, 219, 356, 220,
	357, 358, 359, 360, 361, 0, 362, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	363, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 365, 242, 366, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 367, 0, 248,
	0, 368, 249, 250, 251, 252, 253, 0, 254, 369,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 371,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	372, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	374, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	376, 298, 299, 377, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 379, 380, 0, 0,
	310, 311, 381, 382, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 383, 321,
	322, 323, 384, 385, 172, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 393, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 1873, 355, 0, 0,
	221, 0, 218, 0, 0, 219, 356, 220, 357, 358,
	359, 360, 361, 0, 362, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 363, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 364, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 365, 242, 366, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 367, 0, 248, 0, 368,
	249, 250, 251, 252, 253, 0, 254, 369, 255, 370,
	256, 0, 257, 258, 259, 260, 261, 371, 262, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 372, 279,
	0, 283, 284, 285, 286, 0, 288, 373, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 374, 375,
	294, 0, 301, 295, 296, 282, 297, 300, 376, 298,
	299, 377, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 378, 379, 380, 0, 0, 310, 311,
	381, 382, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 383, 321, 322, 323,
	384, 385, 172, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 393, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 221, 0,
	218, 0, 0, 219, 356, 220, 357, 358, 359, 360,
	361, 0, 362, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 363, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	365, 242, 366, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 367, 0, 248, 0, 368, 249, 250,
	251, 252, 253, 0, 254, 369, 255, 370, 256, 0,
	257, 258, 259, 260, 261, 371, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 372, 279, 0, 489,
	284, 285, 286, 0, 288, 373, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 374, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 376, 298, 299, 377,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 379, 380, 0, 0, 310, 311, 381, 382,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 383, 321, 322, 323, 384, 385,
	172, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 0, 0, 0, 0, 175, 176, 0, 177,
	0, 0, 0, 0, 330, 0, 1224, 0, 0, 178,
	179, 180, 331, 332, 333, 334, 181, 335, 336, 0,
	182, 337, 338, 183, 184, 0, 0, 339, 340, 341,
	0, 185, 342, 0, 0, 0, 186, 187, 188, 0,
	189, 0, 190, 191, 192, 0, 0, 193, 194, 195,
	0, 0, 0, 0, 0, 0, 0, 196, 197, 393,
	198, 343, 199, 344, 345, 0, 200, 0, 201, 0,
	202, 0, 0, 203, 204, 0, 205, 0, 0, 0,
	346, 206, 207, 208, 347, 348, 0, 0, 0, 209,
	210, 349, 350, 351, 0, 211, 0, 212, 0, 0,
	0, 0, 213, 352, 0, 353, 0, 0, 214, 215,
	216, 217, 354, 355, 0, 0, 221, 0, 218, 0,
	0, 219, 356, 220, 357, 358, 359, 360, 361, 0,
	362, 0, 0, 222, 223, 224, 0, 225, 226, 227,
	0, 229, 228, 0, 363, 0, 230, 0, 0, 231,
	0, 0, 232, 0, 233, 234, 235, 237, 364, 236,
	0, 238, 239, 241, 240, 0, 0, 0, 365, 242,
	366, 243, 244, 0, 245, 0, 0, 246, 0, 0,
	247, 367, 0, 248, 0, 368, 249, 250, 251, 252,
	253, 0, 254, 369, 255, 370, 256, 0, 257, 258,
	259, 260, 261, 371, 262, 263, 0, 264, 265, 266,
	267, 268, 270, 271, 269, 272, 273, 274, 275, 0,
	276, 0, 277, 278, 372, 279, 0, 283, 284, 285,
	286, 0, 288, 373, 287, 289, 290, 0, 0, 280,
	281, 292, 0, 293, 374, 375, 294, 0, 301, 295,
	296, 282, 297, 300, 376, 298, 299, 377, 0, 302,
	0, 303, 304, 305, 306, 307, 308, 309, 0, 378,
	379, 380, 0, 0, 310, 311, 381, 382, 0, 312,
	313, 314, 315, 0, 0, 316, 317, 318, 319, 0,
	320, 0, 383, 321, 322, 323, 384, 385, 172, 0,
	324, 0, 0, 0, 0, 325, 326, 327, 328, 329,
	0, 0, 0, 0, 175, 176, 0, 177, 0, 0,
	0, 0, 330, 0, 0, 0, 0, 178, 179, 180,
	331, 332, 333, 334, 181, 335, 336, 0, 182, 337,
	338, 183, 184, 0, 0, 339, 340, 341, 0, 185,
	342, 0, 0, 0, 186, 187, 188, 0, 189, 0,
	190, 191, 192, 0, 0, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 196, 197, 393, 198, 343,
	199, 344, 345, 0, 200, 0, 201, 0, 202, 0,
	0, 203, 204, 0, 205, 0, 0, 0, 346, 206,
	207, 208, 347, 348, 0, 0, 0, 209, 210, 349,
	350, 351, 0, 211, 0, 212, 0, 0, 0, 0,
	213, 352, 0, 353, 0, 0, 214, 215, 216, 217,
	1205, 355, 0, 0, 221, 0, 218, 0, 0, 219,
	356, 220, 357, 358, 359, 360, 361, 0, 362, 0,
	0, 222, 223, 224, 0, 225, 226, 227, 0, 229,
	228, 0, 363, 0, 230, 0, 0, 231, 0, 0,
	232, 0, 233, 234, 235, 237, 364, 236, 0, 238,
	239, 241, 240, 0, 0, 0, 365, 242, 366, 243,
	244, 0, 245, 0, 0, 246, 0, 0, 247, 367,
	0, 248, 0, 368, 249, 250, 251, 252, 253, 0,
	254, 369, 255, 370, 256, 0, 257, 258, 259, 260,
	261, 371, 262, 263, 0, 264, 265, 266, 267, 268,
	270, 271, 269, 272, 273, 274, 275, 0, 276, 0,
	277, 278, 372, 279, 0, 283, 284, 285, 286, 0,
	288, 373, 287, 289, 290, 0, 291, 280, 281, 292,
	0, 293, 374, 375, 294, 0, 301, 295, 296, 282,
	297, 300, 376, 298, 299, 377, 0, 302, 0, 303,
	304, 305, 306, 307, 308, 309, 0, 378, 379, 380,
	0, 0, 310, 311, 381, 382, 0, 312, 313, 314,
	315, 0, 0, 316, 317, 318, 319, 0, 320, 0,
	383, 321, 322, 323, 384, 385, 172, 0, 324, 0,
	0, 0, 0, 325, 326, 327, 328, 329, 0, 0,
	0, 0, 175, 176, 0, 177, 0, 0, 0, 0,
	330, 0, 0, 0, 0, 178, 179, 180, 331, 332,
	333, 334, 181, 335, 336, 0, 182, 337, 338, 183,
	184, 0, 0, 339, 340, 341, 0, 185, 342, 0,
	0, 0, 186, 187, 188, 0, 189, 0, 190, 191,
	192, 0, 0, 193, 194, 195, 0, 0, 0, 0,
	0, 0, 0, 196, 197, 393, 198, 343, 199, 344,
	345, 0, 200, 0, 201, 0, 202, 0, 0, 203,
	204, 0, 205, 0, 0, 0, 346, 206, 207, 208,
	347, 348, 0, 0, 0, 209, 210, 349, 350, 351,
	0, 211, 0, 212, 0, 0, 0, 0, 213, 352,
	0, 353, 0, 0, 214, 215, 216, 217, 1203, 355,
	0, 0, 221, 0, 218, 0, 0, 219, 356, 220,
	357, 358, 359, 360, 361, 0, 362, 0, 0, 222,
	223, 224, 0, 225, 226, 227, 0, 229, 228, 0,
	363, 0, 230, 0, 0, 231, 0, 0, 232, 0,
	233, 234, 235, 237, 364, 236, 0, 238, 239, 241,
	240, 0, 0, 0, 365, 242, 366, 243, 244, 0,
	245, 0, 0, 246, 0, 0, 247, 367, 0, 248,
	0, 368, 249, 250, 251, 252, 253, 0, 254, 369,
	255, 370, 256, 0, 257, 258, 259, 260, 261, 371,
	262, 263, 0, 264, 265, 266, 267, 268, 270, 271,
	269, 272, 273, 274, 275, 0, 276, 0, 277, 278,
	372, 279, 0, 283, 284, 285, 286, 0, 288, 373,
	287, 289, 290, 0, 291, 280, 281, 292, 0, 293,
	374, 375, 294, 0, 301, 295, 296, 282, 297, 300,
	376, 298, 299, 377, 0, 302, 0, 303, 304, 305,
	306, 307, 308, 309, 0, 378, 379, 380, 0, 0,
	310, 311, 381, 382, 0, 312, 313, 314, 315, 0,
	0, 316, 317, 318, 319, 0, 320, 0, 383, 321,
	322, 323, 384, 385, 172, 0, 324, 0, 0, 0,
	0, 325, 326, 327, 328, 329, 0, 0, 0, 0,
	175, 176, 0, 177, 0, 0, 0, 0, 330, 0,
	0, 0, 0, 178, 179, 180, 331, 332, 333, 334,
	181, 335, 336, 0, 182, 337, 338, 183, 184, 0,
	0, 339, 340, 341, 0, 185, 342, 0, 0, 0,
	186, 187, 188, 0, 189, 0, 190, 191, 192, 0,
	0, 193, 194, 195, 0, 0, 0, 0, 0, 0,
	0, 196, 197, 393, 198, 343, 199, 344, 345, 0,
	200, 0, 201, 0, 202, 0, 0, 203, 204, 0,
	205, 0, 0, 0, 346, 206, 207, 208, 347, 348,
	0, 0, 0, 209, 210, 349, 350, 351, 0, 211,
	0, 212, 0, 0, 0, 0, 213, 352, 0, 353,
	0, 0, 214, 215, 216, 217, 354, 355, 0, 0,
	221, 0, 218, 0, 0, 219, 356, 220, 357, 358,
	359, 360, 361, 0, 362, 0, 0, 222, 223, 224,
	0, 225, 226, 227, 0, 229, 228, 0, 363, 0,
	230, 0, 0, 231, 0, 0, 232, 0, 233, 234,
	235, 237, 364, 236, 0, 238, 239, 241, 240, 0,
	0, 0, 365, 242, 366, 243, 244, 0, 245, 0,
	0, 246, 0, 0, 247, 367, 0, 248, 0, 368,
	249, 250, 251, 252, 253, 0, 254, 369, 255, 370,
	256, 0, 257, 258, 259, 260, 261, 371, 714, 263,
	0, 264, 265, 266, 267, 268, 270, 271, 269, 272,
	273, 274, 275, 0, 276, 0, 277, 278, 372, 279,
	0, 283, 284, 285, 286, 0, 288, 373, 287, 289,
	290, 0, 291, 280, 281, 292, 0, 293, 374, 375,
	294, 0, 301, 295, 296, 282, 297, 300, 376, 298,
	299, 377, 0, 302, 0, 303, 304, 305, 306, 307,
	308, 309, 0, 378, 379, 380, 0, 0, 310, 311,
	381, 382, 0, 312, 313, 314, 315, 0, 0, 316,
	317, 318, 319, 0, 320, 0, 383, 321, 322, 323,
	384, 385, 172, 0, 324, 0, 0, 0, 0, 325,
	326, 327, 328, 329, 0, 0, 0, 0, 175, 176,
	0, 177, 0, 0, 0, 0, 330, 0, 0, 0,
	0, 178, 179, 180, 331, 332, 333, 334, 181, 335,
	336, 0, 182, 337, 338, 183, 184, 0, 0, 339,
	340, 341, 0, 185, 342, 0, 0, 0, 186, 187,
	188, 0, 189, 0, 190, 191, 192, 0, 0, 193,
	194, 195, 0, 0, 0, 0, 0, 0, 0, 196,
	197, 393, 198, 343, 199, 344, 345, 0, 200, 0,
	201, 0, 202, 0, 0, 203, 204, 0, 205, 0,
	0, 0, 346, 206, 207, 208, 347, 348, 0, 0,
	0, 209, 210, 349, 350, 351, 0, 211, 0, 212,
	0, 0, 0, 0, 213, 352, 0, 353, 0, 0,
	214, 215, 216, 217, 354, 355, 0, 0, 221, 0,
	218, 0, 0, 219, 356, 220, 357, 358, 359, 360,
	361, 0, 362, 0, 0, 222, 223, 224, 0, 225,
	226, 227, 0, 229, 228, 0, 363, 0, 230, 0,
	0, 231, 0, 0, 232, 0, 233, 234, 235, 237,
	364, 236, 0, 238, 239, 241, 240, 0, 0, 0,
	365, 242, 366, 243, 244, 0, 245, 0, 0, 246,
	0, 0, 247, 367, 0, 248, 0, 368, 249, 250,
	0, 252, 253, 0, 254, 369, 255, 370, 256, 0,
	257, 258, 259, 0, 261, 371, 262, 263, 0, 264,
	265, 266, 267, 268, 270, 271, 269, 272, 273, 274,
	275, 0, 276, 0, 277, 278, 372, 0, 0, 283,
	284, 285, 286, 0, 288, 373, 287, 289, 290, 0,
	291, 280, 281, 292, 0, 293, 374, 375, 294, 0,
	301, 295, 296, 282, 297, 300, 376, 298, 299, 377,
	0, 302, 0, 303, 304, 305, 306, 307, 308, 309,
	0, 378, 379, 380, 0, 0, 310, 311, 381, 382,
	0, 312, 313, 314, 315, 0, 0, 316, 317, 318,
	319, 0, 320, 0, 383, 321, 322, 323, 384, 385,
	0, 0, 324, 0, 0, 0, 0, 325, 326, 327,
	328, 329, 943, 944, 0, 963, 964, 965, 973, 974,
	975, 0, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 0, 0, 0, 0, 946, 0, 0, 977, 0,
	943, 944, 0, 963, 964, 965, 973, 974, 975, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 945,
	0, 0, 0, 946, 0, 960, 977, 0, 943, 944,
	0, 963, 964, 965, 973, 974, 975, 0, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 945, 0, 0,
	0, 946, 0, 960, 977, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 945, 0, 0, 0, 0,
	951, 960, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	970, 978, 0, 0, 0, 0, 0, 0, 951, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 970, 978,
	0, 0, 0, 968, 0, 0, 951, 0, 0, 961,
	0, 0, 0, 0, 0, 0, 976, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 978, 0, 0,
	0, 968, 0, 0, 967, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	0, 0, 967, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	962, 943, 944, 0, 963, 964, 965, 973, 974, 975,
	0, 0, 0, 0, 0, 0, 971, 966, 0, 0,
	0, 0, 0, 0, 946, 0, 0, 977, 962, 943,
	944, 0, 963, 964, 965, 973, 974, 975, 0, 0,
	0, 0, 0, 0, 971, 966, 0, 0, 945, 0,
	0, 0, 946, 0, 960, 977, 969, 0, 0, 957,
	958, 959, 972, 0, 956, 954, 955, 947, 948, 949,
	950, 952, 953, 0, 0, 0, 945, 2390, 0, 0,
	0, 0, 960, 0, 969, 0, 0, 957, 958, 959,
	972, 0, 956, 954, 955, 947, 948, 949, 950, 952,
	953, 0, 0, 0, 0, 2340, 0, 0, 0, 951,
	0, 0, 969, 0, 0, 957, 958, 959, 972, 0,
	956, 954, 955, 947, 948, 949, 950, 952, 953, 970,
	978, 0, 0, 2310, 0, 0, 0, 951, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 978, 0,
	0, 0, 968, 0, 0, 0, 0, 0, 961, 0,
	0, 0, 0, 0, 0, 976, 0, 0, 0, 0,
	0, 943, 944, 0, 963, 964, 965, 973, 974, 975,
	968, 0, 0, 967, 0, 0, 961, 966, 0, 0,
	0, 0, 0, 0, 946, 0, 0, 977, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 437, 0, 0,
	0, 967, 0, 0, 0, 0, 0, 0, 945, 0,
	0, 0, 0, 0, 960, 0, 0, 0, 38, 0,
	0, 962, 0, 0, 0, 0, 0, 943, 944, 39,
	963, 964, 965, 973, 974, 975, 0, 971, 0, 0,
	0, 0, 42, 966, 0, 0, 0, 0, 0, 962,
	946, 0, 0, 977, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 48, 971, 0, 0, 0, 951,
	0, 0, 0, 0, 945, 0, 0, 0, 943, 944,
	960, 963, 964, 965, 973, 974, 975, 0, 0, 970,
	978, 0, 0, 59, 966, 0, 0, 0, 0, 0,
	60, 946, 61, 0, 977, 969, 0, 976, 957, 958,
	959, 972, 0, 956, 954, 955, 947, 948, 949, 950,
	952, 953, 968, 0, 0, 945, 2305, 0, 961, 63,
	0, 960, 0, 969, 0, 951, 957, 958, 959, 972,
	0, 956, 954, 955, 947, 948, 949, 950, 952, 953,
	0, 0, 0, 967, 2301, 970, 978, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 976, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 951, 0, 968, 0,
	0, 0, 0, 0, 961, 0, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 970, 978, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 967,
	0, 0, 0, 0, 976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 66, 0, 67, 0, 968,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 460, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 962, 0, 0,
	967, 0, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 971, 0, 969, 0, 0, 957, 958,
	959, 972, 0, 956, 954, 955, 947, 948, 949, 950,
	952, 953, 0, 0, 0, 0, 2237, 0, 0, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 962, 0,
	0, 943, 944, 126, 963, 964, 965, 973, 974, 975,
	127, 0, 0, 0, 971, 0, 0, 966, 0, 0,
	0, 0, 0, 0, 946, 0, 0, 977, 0, 438,
	0, 969, 0, 0, 957, 958, 959, 972, 0, 956,
	954, 955, 947, 948, 949, 950, 952, 953, 945, 0,
	0, 0, 2203, 0, 960, 943, 944, 0, 963, 964,
	965, 973, 974, 975, 0, 0, 0, 0, 0, 0,
	0, 966, 0, 0, 0, 0, 0, 0, 946, 0,
	0, 977, 969, 0, 0, 957, 958, 959, 972, 0,
	956, 954, 955, 947, 948, 949, 950, 952, 953, 0,
	0, 0, 945, 2202, 0, 0, 0, 0, 960, 951,
	0, 0, 0, 0, 0, 0, 0, 943, 944, 0,
	963, 964, 965, 973, 974, 975, 0, 0, 0, 970,
	978, 0, 0, 966, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 977, 0, 0, 0, 976, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 968, 951, 945, 0, 0, 0, 961, 0,
	960, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 978, 0, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 976, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	0, 0, 961, 0, 0, 951, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 970, 978, 967, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 976, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 961, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 0, 943, 944, 0,
	963, 964, 965, 973, 974, 975, 0, 0, 0, 967,
	0, 971, 0, 966, 0, 0, 0, 0, 0, 0,
	946, 0, 0, 977, 0, 969, 0, 0, 957, 958,
	959, 972, 0, 956, 954, 955, 947, 948, 949, 950,
	952, 953, 0, 0, 945, 0, 2167, 0, 0, 0,
	960, 0, 0, 0, 0, 943, 944, 962, 963, 964,
	965, 973, 974, 975, 0, 0, 0, 0, 0, 0,
	0, 966, 0, 971, 0, 0, 0, 0, 946, 969,
	0, 977, 957, 958, 959, 972, 0, 956, 954, 955,
	947, 948, 949, 950, 952, 953, 0, 0, 0, 0,
	2015, 0, 945, 0, 0, 951, 0, 0, 960, 0,
	0, 0, 943, 944, 0, 963, 964, 965, 973, 974,
	975, 0, 0, 0, 0, 970, 978, 0, 966, 0,
	0, 0, 0, 0, 0, 946, 0, 0, 977, 0,
	0, 969, 0, 976, 957, 958, 959, 972, 0, 956,
	954, 955, 947, 948, 949, 950, 952, 953, 968, 945,
	0, 0, 1991, 951, 961, 960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 978, 0, 0, 0, 0, 967,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 976, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	951, 2503, 961, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 962, 0, 0,
	970, 978, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 976, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 0, 0, 961,
	0, 0, 0, 0, 0, 0, 0, 0, 1781, 1782,
	0, 1799, 1800, 1801, 0, 962, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	2502, 969, 0, 0, 957, 958, 959, 972, 0, 956,
	954, 955, 947, 948, 949, 950, 952, 953, 0, 0,
	0, 1796, 1450, 0, 0, 0, 0, 0, 0, 0,
	943, 944, 962, 963, 964, 965, 973, 974, 975, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 971, 0,
	0, 0, 0, 946, 0, 0, 977, 0, 0, 969,
	0, 0, 957, 958, 959, 972, 0, 956, 954, 955,
	947, 948, 949, 950, 952, 953, 1787, 945, 1743, 0,
	0, 0, 0, 960, 0, 0, 943, 944, 0, 963,
	964, 965, 973, 974, 975, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 1716, 0, 946,
	0, 0, 977, 0, 1802, 0, 969, 0, 0, 957,
	958, 959, 972, 0, 956, 954, 955, 947, 948, 949,
	950, 952, 953, 945, 0, 1797, 0, 0, 951, 960,
	1813, 0, 1548, 1812, 0, 0, 0, 0, 943, 944,
	0, 963, 964, 965, 973, 974, 975, 0, 970, 978,
	0, 0, 0, 0, 966, 0, 0, 0, 1547, 1717,
	0, 946, 0, 0, 977, 0, 976, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 951, 945, 0, 961, 0, 0,
	0, 960, 0, 0, 0, 0, 0, 0, 1798, 0,
	0, 0, 0, 0, 970, 978, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 976, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 0, 0,
	0, 0, 0, 961, 0, 0, 951, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 970, 978, 967, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 976, 1793, 1794, 1795, 0, 0,
	1792, 1790, 1791, 1783, 1784, 1785, 1786, 1788, 1789, 968,
	0, 0, 0, 0, 0, 961, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 962, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	967, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 957, 958, 959,
	972, 0, 956, 954, 955, 947, 948, 949, 950, 952,
	953, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 943, 944, 962, 963,
	964, 965, 973, 974, 975, 0, 0, 0, 0, 0,
	0, 0, 966, 0, 971, 0, 0, 0, 0, 946,
	969, 0, 977, 957, 958, 959, 972, 0, 956, 954,
	955, 947, 948, 949, 950, 952, 953, 0, 0, 0,
	0, 0, 0, 945, 0, 0, 0, 0, 0, 960,
	0, 0, 0, 0, 0, 0, 0, 0, 943, 944,
	0, 963, 964, 965, 973, 974, 975, 0, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 0, 0, 0,
	0, 946, 969, 0, 977, 957, 958, 959, 972, 0,
	956, 954, 955, 947, 948, 949, 950, 952, 953, 0,
	0, 0, 0, 0, 951, 945, 0, 0, 0, 0,
	0, 960, 0, 0, 943, 944, 0, 963, 964, 965,
	973, 974, 975, 0, 970, 978, 0, 0, 0, 0,
	966, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	977, 0, 976, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 968, 0, 0,
	0, 945, 0, 961, 0, 0, 951, 960, 0, 0,
	0, 0, 0, 0, 0, 0, 943, 944, 0, 963,
	964, 965, 973, 974, 975, 0, 970, 978, 967, 572,
	0, 0, 966, 0, 0, 0, 1814, 0, 0, 946,
	0, 0, 977, 0, 976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	0, 0, 951, 945, 0, 961, 0, 1819, 0, 960,
	0, 0, 0, 0, 0, 0, 962, 0, 0, 0,
	0, 0, 970, 978, 0, 0, 0, 0, 0, 0,
	967, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 0,
	0, 961, 0, 0, 951, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 962, 0,
	0, 0, 0, 0, 970, 978, 967, 0, 0, 0,
	0, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	969, 0, 976, 957, 958, 959, 972, 0, 956, 954,
	955, 947, 948, 949, 950, 952, 953, 968, 0, 0,
	1995, 0, 0, 961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 967, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 0, 957, 958, 959, 972, 0,
	956, 954, 955, 947, 948, 949, 950, 952, 953, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 943, 944, 962, 963, 964, 965,
	973, 974, 975, 0, 0, 0, 0, 0, 0, 0,
	966, 0, 971, 0, 0, 0, 0, 946, 969, 0,
	977, 957, 958, 959, 972, 0, 956, 954, 955, 947,
	948, 949, 950, 952, 953, 0, 0, 0, 0, 0,
	0, 945, 0, 0, 0, 0, 0, 960, 0, 0,
	943, 944, 0, 963, 964, 965, 973, 974, 975, 0,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 0,
	1772, 0, 0, 946, 0, 0, 977, 0, 0, 0,
	969, 0, 0, 957, 958, 959, 972, 0, 956, 954,
	955, 947, 948, 949, 950, 952, 953, 945, 0, 0,
	0, 0, 951, 960, 0, 0, 0, 0, 0, 0,
	943, 944, 0, 963, 964, 965, 973, 974, 975, 0,
	0, 0, 970, 978, 0, 0, 966, 0, 0, 0,
	0, 0, 0, 946, 0, 0, 977, 0, 0, 0,
	976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 968, 0, 945, 951, 0,
	0, 961, 0, 960, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 970, 978,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 976, 0, 0, 1779,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 961, 951, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 970, 978,
	0, 0, 967, 0, 0, 0, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 976, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 968, 0, 0, 0, 0, 0, 961, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 967, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 0,
	0, 957, 958, 959, 972, 0, 956, 954, 955, 947,
	948, 949, 950, 952, 953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 957, 958, 959,
	972, 0, 956, 954, 955, 947, 948, 949, 950, 952,
	953, 0, 0, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 0, 0, 943, 944, 39, 963, 964, 965,
	973, 974, 975, 0, 0, 0, 0, 0, 0, 42,
	966, 0, 0, 0, 0, 0, 0, 946, 0, 0,
	977, 0, 0, 0, 969, 0, 0, 957, 958, 959,
	972, 48, 956, 954, 955, 947, 948, 949, 950, 952,
	953, 945, 0, 0, 0, 943, 944, 960, 963, 964,
	965, 973, 974, 975, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 0, 0, 0, 0, 60, 946, 61,
	0, 977, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 945, 0, 0, 0, 63, 0, 960, 0,
	0, 0, 951, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 978, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	976, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 951, 0, 968, 0, 0, 0, 0,
	0, 961, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 970, 978, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 976, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 66, 0, 67, 0, 968, 0, 0, 0,
	0, 0, 961, 0, 0, 0, 0, 132, 0, 0,
	0, 0, 0, 0, 460, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 962, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 969, 0,
	0, 957, 958, 959, 972, 0, 956, 954, 955, 947,
	948, 949, 950, 952, 953, 0, 0, 0, 1273, 1263,
	1292, 1255, 1283, 1282, 0, 0, 1257, 1256, 0, 0,
	0, 0, 1294, 1293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 969,
	0, 0, 957, 958, 959, 972, 0, 956, 954, 955,
	947, 948, 949, 950, 952, 953, 1288, 0, 1280, 1279,
	0, 0, 0, 0, 0, 0, 0, 0, 1278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1277, 1275, 1276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1273, 1263,
	1292, 1255, 1283, 1282, 0, 0, 1257, 1256, 0, 0,
	0, 0, 1294, 1293, 0, 0, 0, 1266, 1265, 1267,
	1268, 1269, 1270, 1271, 0, 1291, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1288, 0, 1280, 1279,
	0, 0, 0, 1259, 0, 0, 0, 0, 1278, 0,
	0, 0, 0, 0, 0, 1281, 0, 0, 0, 1264,
	0, 0, 0, 0, 0, 0, 1277, 1275, 1276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1274, 0,
	0, 0, 1385, 1383, 1384, 1387, 1386, 1266, 1265, 1267,
	1268, 1269, 1270, 1271, 0, 1291, 0, 0, 527, 0,
	553, 0, 0, 0, 0, 0, 0, 0, 1260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 532, 1272,
	1261, 0, 0, 1259, 0, 0, 0, 0, 0, 1296,
	530, 0, 0, 0, 0, 1281, 0, 0, 0, 1264,
	0, 0, 1258, 0, 0, 1289, 1290, 0, 0, 0,
	0, 531, 0, 0, 0, 0, 533, 0, 0, 0,
	0, 539, 540, 0, 0, 549, 0, 1262, 1274, 0,
	0, 0, 1295, 0, 0, 0, 0, 0, 0, 554,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1260, 0,
	0, 0, 552, 0, 0, 0, 0, 0, 0, 1272,
	1261, 0, 0, 0, 0, 0, 0, 0, 0, 1296,
	0, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1258, 0, 0, 1289, 1290, 536, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 543, 0, 1262, 538, 545,
	0, 0, 1295, 0, 0, 0, 0, 0, 0, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 541,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 529, 546, 556, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 547, 0, 0, 0, 551, 0, 0, 0, 557,
	0, 0, 0, 0, 544, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	550,
}
var sqlPact = [...]int{

	4670, -1000, -1, -1000, -1000, -1000, 169, -1000, -1000, -1000,
	167, 165, 164, -1000, 163, 151, 147, 146, 145, 144,
	141, 140, 139, 138, 134, -1000, 129, -1000, -1000, -1000,
	-1000, 128, 122, 120, 119, 115, 114, 113, 1050, 22828,
	112, 111, 1336, 35626, 105, 96, 94, 91, 1130, 89,
	88, 26338, 884, 1326, 86, 84, 83, 81, 80, 998,
	35308, 39305, 1641, 1127, 1605, 34987, 22507, 1599, 1445, 34666,
	-1000, -1000, 34345, 79, 72, 70, 68, 67, -1000, -1000,
	34024, 66, 63, 62, 59, 58, 56, 55, 53, 50,
	43, 41, 40, 39, 36, -1000, 35, 34, 33, 42016,
	31, 30, 26, 1114, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 130, -1000, 909, 369, 1736,
	8269, 1028, 1023, 1016, 1002, 992, 38170, 35626, 25, -119,
	24, -1000, 1946, 648, 19913, 4670, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	26017, 25696, 33703, 33382, 796, -1000, -5, 24100, 35626, -1000,
	125, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15614,
	15257, 564, 125, -1000, -1000, -1000, -1000, -1000, 33061, -1000,
	839, 835, 32740, 32419, 1461, 32098, -1000, -1000, -1000, -1000,
	31777, -1000, -1000, 1838, 1639, 1609, 25375, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 31459,
	31138, 30817, 30496, 30175, 489, -1000, -1000, -1000, 18299, -1000,
	-1000, -1000, -1000, 20, -1000, 19, -1000, 18, 16, 15,
	12, -1000, 11, 8, -1000, 5, 4, -1000, 3, 2,
	29854, 1205, -1000, -1000, -3, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35626, -1000, 16300, -1000, 488, -1000, 1607,
	-1000, 16300, -1000, 1203, -1000, -1000, -1000, -1000, -1000, 35626,
	-1000, -1000, -1000, -1000, -1000, -1000, 2095, 1176, 487, 29533,
	-1000, 1459, -1000, 610, 761, -1000, -1000, -1000, 9299, 174,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1363,
	22186, 1237, 1910, 1824, 2094, 1379, 1803, 1790, 1754, 1716,
	1712, 2083, 957, 2082, 1839, 1004, 2078, 1690, 1148, 682,
	2074, 1606, 1602, -1000, -1000, -1000, -1000, 945, -1000, -1000,
	-1000, 27610, -1000, -1000, 909, -1000, -1000, -1000, 1323, 1885,
	1885, 1885, 1930, 294, 290, -1000, 130, -1000, 1367, -1000,
	1154, -1000, -1000, -1000, -1000, -1000, 41160, -1000, -1000, 16300,
	16300, 16300, 16300, 16300, 1115, 530, -1000, 486, 483, 7569,
	-1000, -1000, 2055, -1000, -1000, -1000, 319, -1000, -1000, 16300,
	125, -1000, -1000, -1000, -1000, 479, 2070, -1000, 642, -1000,
	-1000, -1000, 616, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1648, 470, 469, 461, -1000, 457, -1000, -1000,
	456, 451, 450, 449, 448, 446, 445, 444, 443, 441,
	439, 432, 431, 430, 429, 1030, -1000, 641, -1000, -1000,
	641, 641, -1000, 410, 410, 411, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 410, -1000, -1000, -1000, 602, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 426,
	1267, -1000, -1000, 1267, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 792, 36898, -15, 35626, -1000, 425, -15, -1000, -1000,
	421, -1000, 11371, 11371, -1000, -1000, -1000, -1000, -1000, 9999,
	1692, -1000, 4773, -200, 325, 593, -1000, 18944, 21524, -1000,
	-1000, 1186, 1776, 668, -1000, 1007, 1775, 536, -1000, 1005,
	-1000, 868, 1774, -193, 23146, 24100, -5, -51, -1000, -1000,
	-1000, 5863, 41160, -1000, 41160, -1000, 862, 20557, 125, -1000,
	-1000, -1000, -1000, 420, 1347, 37852, 37534, 625, -1000, 316,
	-1000, 29212, 625, 1344, -1000, -1000, -1000, 27610, -1000, 35626,
	-1000, 35626, -1000, 915, -1000, 37216, 107, 1770, -1000, -1000,
	107, 1769, -1000, 106, 1767, -1000, -1000, 1277, 1765, -1000,
	-51, 1759, -1000, -1000, 16300, -4, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 648, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 28891, 23464, 1309,
	535, 41160, 2000, 41861, 23146, 41160, 23464, -1000, -1000, 35626,
	-1000, 16300, -1000, 1998, 1384, -17, -1000, -1000, -1000, -1000,
	-1000, 1388, 1364, 759, 1110, 9299, 9299, 1852, -1000, 171,
	6193, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 28570,
	-1000, -1000, -1000, 1173, 35626, -1000, -1000, 1645, -1000, 23464,
	35626, -1000, 35626, -1000, 35626, -1000, 35626, -1000, 35626, -1000,
	-1000, -1000, -1000, -1000, 3898, -1000, 1629, -1000, -1000, 35626,
	-1000, 1368, -1000, -1000, -1000, 28252, 27931, -1000, 981, 823,
	-1000, -1000, 108, -1000, -1000, 1323, -1000, 1175, 1427, 14900,
	1449, 16300, 130, -1000, -1000, 130, 130, 8956, -1000, -1000,
	-1000, 35626, -1000, 41771, 41861, 6193, 804, 16300, 16300, 16300,
	16300, 16300, 16300, 16300, 16300, 16300, 16300, 16300, 16300, 16300,
	16300, 16300, 16300, 16300, 16300, 16300, 16300, 16300, 16300, 1360,
	16300, 783, 16300, 16300, 16300, 16300, 1123, 1098, 409, 1144,
	-1000, 2032, 2032, 2032, 41505, 41505, 390, 530, -1000, 16300,
	-1000, 74, 14557, 290, 39917, -7, 7226, -1000, -1000, -1000,
	9642, 638, 41160, 125, 6525, -1000, 2052, 975, 1665, 1526,
	419, 556, 541, 532, 526, 16300, 16300, 14214, 13857, 13500,
	16986, 13143, 16300, 7912, 16300, 16300, 16300, 16300, 12786, 12429,
	-1000, 418, -1000, -1000, -1000, -1000, 2051, -1000, -1000, 2050,
	-1000, 802, 800, 2047, -1000, -17, -1000, 36898, -1000, 35626,
	-15, 1992, 35626, -1000, 104, -1000, 40388, -1000, 104, -18,
	-1000, 1433, 1429, 20235, 1206, 1149, 1149, 1149, -1000, 417,
	514, 593, 5188, 12072, -1000, 26656, 1159, 190, 289, 18622,
	1692, -1000, 35626, -67, 944, -1000, 25054, 1919, 1873, 1866,
	27610, 1949, 74, 1600, 781, 27610, 779, 1944, 74, 1581,
	778, 35626, 6193, 562, -1000, 35626, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1576, -33, -1000, -1000,
	24736, 1991, 1756, 1333, 416, 1332, 415, -1000, 1040, -1000,
	1990, 35626, 1198, 1324, -1000, -1000, 811, 1749, 629, 358,
	1981, 358, 20880, -1000, 35626, -1000, 35626, -1000, -1000, 35626,
	-1000, 35626, -1000, 35626, 35626, -1000, 35626, 35626, -35, 41160,
	41432, 24418, 764, -1000, 659, 24736, 124, -38, -1000, 836,
	-1000, -1000, -1000, -1000, 356, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 411, 1030, 410,
	410, 410, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 602,
	-1000, -1000, 641, 641, 641, -1000, -1000, -122, -1000, 1573,
	590, -41, 687, -17, -1000, 1267, -1000, 989, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2069, -1000, 2037, -1000, -1000, 2046, -20, -1000, -20,
	-1000, 6193, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35626,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3164, -1000,
	-1000, -1000, -1000, -1000, -1000, 35626, 35626, 35626, -1000, 27610,
	-1000, -1000, -1000, -1000, 41160, -1000, 388, -1000, -1000, 41160,
	1008, 1455, -1000, 1455, -23, -1000, 40326, 1422, 35626, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	608, 601, 601, 911, 911, 911, 911, 2006, 528, 2618,
	950, 3013, 3013, 3013, 924, 472, 472, 3013, 3013, 3013,
	41505, 41454, 689, 16300, 16300, 760, 1094, 409, 689, 16300,
	689, 689, 689, 689, -1000, 1214, -1000, -1000, -1000, -1000,
	1570, 407, 16986, 16986, -1000, -1000, -1000, 7569, 17316, -1000,
	-1000, -1000, -1000, 406, 16300, -1000, 39975, -213, -48, -1000,
	-1000, 16300, -49, -50, -1000, -1000, 865, -1000, 16300, -1000,
	-44, 16300, 16300, 16300, 288, -1000, 284, -1000, 758, -1000,
	753, 751, 748, -1000, 405, 1126, 400, 399, 16300, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 41100, 4506, 282,
	-1000, 1567, -184, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	280, -1000, 263, -1000, 41044, -184, 261, 4046, -1000, 16986,
	16986, 16986, 7569, 395, 260, -1000, 40270, -184, 40806, 11715,
	11715, 11715, 259, 40744, 16300, -184, 4309, 4066, 4012, -53,
	-68, -1000, -70, -1000, 2045, -71, 254, 605, 603, 252,
	-1000, -1000, 394, -76, 629, 11371, 19590, 6193, -1000, 629,
	9999, -1000, 20235, 20235, 1289, 1426, 20235, -1000, -1000, -1000,
	-1000, 26656, 480, 593, 26656, -1000, 2044, 1451, -77, -1000,
	-1000, -1000, 35626, 393, -1000, 593, 251, 972, 35626, 35626,
	35626, -1000, -1000, 1313, 36580, 1312, 41861, 35626, -1000, 391,
	387, 1416, 1414, 35626, 35626, 36262, 35944, 35626, 1113, 74,
	-1000, 386, 35626, 986, 35626, 74, -1000, 383, 35626, 984,
	-1000, 1500, 1224, -1000, 861, 1564, 35626, 250, -78, -36,
	41861, -1000, -1000, -1000, -1000, -1000, 35626, 500, 35626, 74,
	35626, 1745, 24736, 1973, 1743, 24736, 1972, 2068, 74, 35626,
	1730, 1793, 549, 35626, 1427, 16300, 1118, -1000, 19267, 649,
	35626, 949, 90, -1000, -1000, -1000, 588, 35626, -1000, -1000,
	107, 107, -1000, 106, 1277, -51, -1000, 16300, -1000, -1000,
	35626, 23146, -79, -1000, -1000, 41861, -1000, 527, 736, -1000,
	2043, 624, 23146, 35626, 9299, 9299, -1000, 1430, -1000, -1000,
	925, -1000, 1037, -1000, -1000, -1000, -1000, 9299, -1000, -69,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1008, -1000, 16300,
	2042, -1000, -1000, -1000, 8956, -1000, -1000, -1000, 35626, -195,
	16300, 689, 689, 16300, 16986, 16986, -1000, 689, -1000, -1000,
	-1000, -1000, -1000, 1557, 381, 16300, 41861, 3490, 3462, -85,
	-1000, 11028, -54, -1000, 16300, -1000, 39737, -1000, -1000, 518,
	1784, -1000, 16300, 40688, 248, 10685, -1000, 40626, -46, -46,
	-1000, 2065, 1345, 1209, 1027, 929, 2041, -1000, 21202, 636,
	1161, 39675, 41771, 41861, -1000, 16300, -1000, -1000, 1551, 16300,
	-1000, 41771, 41861, 16986, 16986, 16986, 16986, 16986, 16986, 16986,
	16986, 16986, 16986, 16986, 16986, 16986, 16986, 16986, 16986, 16986,
	16986, 16986, 1335, 16986, 2027, 2027, 2027, -64, 10342, -1000,
	1621, 1551, 16300, 16300, 41861, 247, 246, 234, -1000, 16300,
	-184, 16300, 16300, 16300, -1000, -1000, -1000, 229, -1000, 2040,
	-1000, -1000, -1000, -1000, 124, -1000, 1525, -1000, -162, -1000,
	1692, -1000, 1525, -1000, -1000, 1289, -1000, 378, 16300, 20235,
	-1000, 511, -1000, -86, -1000, 26656, -1000, 510, -211, -1000,
	587, -1000, 593, 376, 35626, 26656, -1000, -1000, -1000, 745,
	744, 1711, -1000, 1301, -1000, 654, -1000, 936, 16300, 17976,
	374, 373, 1112, -1000, 1694, 1277, 1686, 1277, -1000, -67,
	932, -1000, 16300, -1000, 731, -1000, -1000, 16300, -1000, 723,
	624, 1547, 842, -1000, 855, -1000, 1478, -1000, 24736, 371,
	35626, 370, -1000, 366, 35626, 227, 74, 35626, 226, 74,
	-1000, -1000, 362, 35626, 1383, 549, 23782, -1000, 625, 949,
	-1000, 41160, -1000, 949, 8612, 1886, -104, -1000, -1000, -1000,
	629, 20880, 20235, 9999, -105, -1000, -1000, -1000, -1000, 41160,
	-69, 1858, 1858, -1000, 2039, -1000, 509, 225, -1000, 27292,
	-1000, -69, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35626,
	1168, 39621, -1000, 1890, 6193, 1975, 689, 1133, 249, 16300,
	41861, 283, -107, 16300, 16300, -1000, -110, -1000, 16300, 507,
	41160, -1000, -1000, -1000, 41160, 16300, 2064, 16300, 224, 222,
	219, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 218,
	-1000, -1000, 38488, 16300, 217, -1000, 216, 213, 41160, 1621,
	41160, -1000, -1000, 565, 565, 858, 858, 858, 858, 2027,
	207, 815, 1162, 168, 168, 168, 559, 482, 482, 168,
	168, 168, 1541, 1308, 360, 40208, 16300, -120, -1000, -1000,
	-1000, 41160, 41160, 209, -1000, -1000, -1000, -184, 317, 39378,
	39327, -1000, 208, 205, 1522, 1923, -1000, 20235, 1522, -1000,
	35626, 41160, -1000, -200, -1000, 2033, -1000, -1000, 1451, -1000,
	5530, 26656, 35626, -123, -1000, 35626, 35626, 35626, 1683, -1000,
	3031, -1000, 39261, -125, -1000, 313, 1901, 16300, -1000, -1000,
	357, 17976, 35626, -1000, 1403, 1502, 684, 35626, -1000, 35626,
	-1000, 35626, 35626, 35626, -126, 35626, -131, 35626, -1000, 23146,
	762, -1000, -1000, 1493, -1000, 17976, 355, 35626, 24736, 1963,
	354, 1478, -1000, 352, 1478, -1000, 17976, 1195, 1401, 549,
	23782, -1000, 811, -1000, -1000, -98, -1000, 367, 74, 949,
	-1000, -103, -1000, 586, 1841, -1000, 1840, 493, -1000, -1000,
	-106, 349, -1000, 585, 580, -1000, -1000, -1000, -1000, 1890,
	16300, 16300, 283, -133, -1000, 689, 689, -1000, 39109, -1000,
	41160, -1000, 40626, -1000, -1000, -1000, -1000, 1107, -1000, 39081,
	-1000, -1000, -1000, -1000, 16986, 1539, 348, 41861, 38868, -1000,
	-1000, 16300, -1000, -1000, -1000, -1000, 627, 16300, 16300, 1692,
	627, -134, 593, -1000, -1000, -1000, 2028, -1000, -136, -1000,
	-1000, -1000, -1000, 35626, -1000, 35626, -1000, 6193, 35626, 1531,
	1296, -1000, -1000, 1406, 347, 16986, 35626, -1000, 1067, 17976,
	1890, 125, 6193, 1890, 38840, 6525, -143, -148, 1294, -1000,
	1250, 16300, -1000, 41861, 1277, 1277, -1000, 721, 717, 714,
	-1000, 702, -1000, -163, 21854, 1119, -149, 17976, -150, 204,
	74, 24736, 1960, -1000, 24736, 1958, -1000, -151, 35626, -1000,
	549, 23782, -1000, 1793, 1798, 35626, 1865, -1000, -1000, 344,
	341, 340, -1000, 26974, 26974, 23146, 23146, -1000, 689, 689,
	-1000, -1000, 192, 1161, 1922, -1000, 3476, 16986, 41861, -156,
	-1000, 38812, -1000, 35626, 41160, -184, -1000, -1000, 26656, 491,
	-1000, -1000, 1338, -1000, -1000, 35626, 1279, -1000, -1000, 16300,
	40208, 338, 1478, 337, -1000, -1000, -1000, -1000, -1000, -1000,
	1901, -44, -1000, 1015, -1000, -1000, 41160, 1897, -1000, -1000,
	35626, 35626, 336, 331, -1000, 330, 125, 35626, 1067, -157,
	-1000, 1478, -1000, 191, 74, 187, 74, 1067, 327, 23782,
	-1000, 1383, 795, -164, 35626, -1000, -1000, 6869, 23146, 23146,
	-1000, -165, -1000, -1000, -1000, 999, 16300, 3476, -166, -1000,
	-1000, -177, -1000, 1957, -1000, -1000, -1000, -1000, 1676, 4800,
	1348, 35626, -1000, 35626, 1890, 186, 35626, 658, 6193, -1000,
	-1000, 16300, 16300, 16300, 326, 1478, 1067, -1000, 1478, -1000,
	1478, -1000, 1478, 17976, -1000, 1401, 908, -1000, 629, -1000,
	-167, -172, -1000, 182, 16643, 16643, -184, -1000, 35626, 321,
	1668, -1000, 1178, 1025, 177, -174, -1000, -1000, 316, -1000,
	16300, -1000, -175, -182, -46, 35626, -1000, 1478, -1000, -1000,
	-1000, -183, -1000, 20880, -1000, 624, 624, -1000, -1000, -1000,
	17646, 1268, 939, 40032, -1000, -1000, -1000, 35626, -1000, 1185,
	1183, 883, -1000, -1000, -1000, -1000, -1000, 1348, 41160, -1000,
	-1000, 109, -189, -1000, 1067, -173, -1000, -1000, 1979, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1810, -1000, 672, 1207,
	1207, 1178, 2064, 1204, 1478, -1000, 15957, -1000, 2013, -1000,
	-1000, 1337, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 2424, 2422, 1645, 1900, 2420, 2419, 2414, 2413, 2411,
	2410, 2408, 2406, 2405, 2403, 2395, 2394, 2390, 2389, 2388,
	1898, 2387, 1891, 2386, 2385, 2384, 2383, 1889, 2382, 2381,
	2378, 2373, 2372, 2363, 1882, 2362, 1845, 2360, 2359, 2356,
	2353, 2350, 1843, 2349, 69, 103, 1837, 2345, 2344, 1820,
	1817, 1810, 2343, 1808, 2342, 2341, 1800, 1759, 2340, 242,
	2339, 2338, 2337, 1752, 1697, 2336, 2334, 2332, 140, 2329,
	1678, 2323, 2322, 2321, 2315, 2313, 2312, 2311, 2309, 2308,
	2307, 2306, 2298, 2293, 2290, 2289, 2287, 2284, 2280, 152,
	2276, 2274, 1676, 1647, 2273, 2270, 33, 29, 7, 51,
	19, 149, 2653, 130, 2267, 2266, 2261, 2260, 2259, 2258,
	27, 95, 89, 2256, 47, 2254, 2253, 45, 32, 24,
	18, 2251, 88, 2250, 2248, 1661, 28, 2247, 2246, 121,
	2245, 23, 26, 652, 144, 139, 102, 111, 2244, 2242,
	2241, 53, 108, 2, 2240, 2239, 14, 83, 13, 2238,
	31, 75, 2235, 2234, 120, 2233, 55, 87, 1576, 76,
	113, 257, 2232, 57, 12, 58, 2230, 2227, 147, 39,
	2225, 30, 62, 125, 2221, 42, 146, 114, 74, 119,
	123, 2220, 2219, 2218, 101, 2217, 107, 93, 2216, 2215,
	64, 2214, 92, 131, 2213, 2212, 2211, 85, 2208, 115,
	2207, 2204, 145, 134, 104, 9, 54, 60, 11, 1555,
	1544, 122, 86, 56, 48, 2201, 2734, 1151, 1189, 35,
	96, 72, 59, 97, 46, 77, 136, 38, 2200, 2198,
	124, 2195, 2194, 2193, 2190, 2189, 94, 2187, 2186, 20,
	2185, 68, 50, 49, 84, 43, 112, 118, 106, 142,
	91, 2184, 71, 110, 2183, 241, 2181, 2179, 1795, 126,
	2176, 2175, 2174, 1746, 1421, 1145, 859, 2173, 2172, 923,
	806, 2171, 2170, 82, 2169, 105, 98, 99, 132, 129,
	21, 2166, 109, 22, 2165, 34, 36, 0, 729, 674,
	2164, 116, 63, 2153, 2152, 2147, 2144, 25, 3, 8,
	4, 6, 5, 65, 17, 2140, 2139, 117, 79, 78,
	2138, 143, 2136, 2131, 2126, 41, 2124, 15, 2117, 10,
	2111, 2109, 16, 1, 2107, 2106, 133, 2105, 90, 2104,
	1957, 2101, 137, 2100, 2099, 1682, 2098, 37, 100,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 112, 112,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 109, 109, 114, 114, 114,
	116, 116, 113, 113, 108, 108, 20, 20, 57, 57,
	99, 50, 50, 50, 285, 285, 286, 286, 95, 95,
	96, 96, 96, 96, 97, 97, 98, 98, 98, 26,
	26, 26, 22, 22, 22, 22, 22, 23, 23, 24,
	24, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 34, 34, 35, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 41, 41, 41, 39, 39, 39,
	38, 38, 38, 37, 37, 37, 40, 40, 40, 160,
	160, 159, 159, 162, 162, 42, 42, 42, 42, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 45, 45, 45, 45, 45,
	45, 45, 254, 254, 253, 43, 43, 228, 228, 46,
	46, 185, 185, 47, 47, 47, 47, 47, 48, 48,
	58, 58, 326, 326, 326, 330, 330, 331, 331, 332,
	332, 332, 332, 332, 332, 332, 328, 328, 53, 53,
	53, 53, 54, 54, 54, 55, 55, 94, 94, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 64, 64,
	64, 66, 63, 63, 63, 65, 65, 65, 65, 67,
	67, 68, 68, 68, 68, 68, 69, 69, 279, 277,
	277, 278, 278, 139, 139, 139, 139, 139, 140, 140,
	140, 284, 284, 284, 284, 284, 284, 283, 283, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
	70, 70, 70, 70, 70, 82, 82, 82, 89, 89,
	89, 89, 89, 89, 89, 71, 71, 76, 76, 76,
	76, 76, 72, 72, 77, 77, 78, 78, 79, 79,
	79, 79, 79, 79, 73, 73, 73, 73, 81, 81,
	81, 81, 80, 80, 86, 86, 86, 86, 86, 86,
	83, 83, 83, 83, 84, 84, 84, 87, 87, 87,
	87, 74, 74, 75, 75, 88, 88, 85, 85, 85,
	327, 327, 329, 329, 51, 51, 30, 30, 30, 30,
	30, 30, 31, 31, 31, 31, 31, 31, 141, 141,
	142, 142, 207, 207, 207, 207, 143, 143, 115, 115,
	115, 206, 295, 295, 296, 296, 296, 296, 296, 296,
	297, 297, 297, 297, 297, 297, 297, 293, 293, 294,
	291, 291, 292, 292, 292, 292, 333, 333, 205, 205,
	146, 146, 300, 300, 300, 300, 298, 298, 298, 298,
	298, 301, 299, 302, 302, 302, 302, 302, 240, 240,
	240, 91, 91, 32, 32, 121, 121, 33, 33, 29,
	29, 29, 189, 189, 150, 150, 245, 245, 245, 132,
	132, 110, 110, 110, 14, 11, 11, 11, 11, 11,
	11, 19, 19, 17, 17, 190, 190, 191, 191, 52,
	52, 56, 56, 61, 61, 90, 90, 90, 90, 90,
	90, 21, 21, 21, 21, 25, 25, 25, 25, 60,
	60, 335, 335, 128, 128, 128, 128, 129, 129, 202,
	202, 203, 203, 336, 336, 204, 204, 204, 123, 122,
	124, 124, 28, 28, 28, 117, 117, 118, 118, 119,
	119, 120, 120, 337, 337, 49, 49, 49, 93, 93,
	135, 135, 199, 199, 199, 201, 201, 200, 200, 200,
	175, 175, 175, 92, 92, 155, 155, 164, 164, 165,
	165, 251, 166, 166, 59, 59, 102, 102, 100, 100,
	100, 100, 100, 100, 101, 101, 101, 103, 103, 103,
	103, 103, 103, 103, 106, 106, 106, 107, 107, 107,
	105, 105, 308, 308, 308, 311, 311, 307, 309, 309,
	310, 310, 334, 334, 176, 176, 176, 145, 144, 144,
	148, 148, 147, 149, 149, 244, 244, 244, 173, 173,
	173, 173, 194, 194, 192, 192, 193, 193, 195, 195,
	196, 196, 196, 197, 197, 198, 198, 172, 172, 224,
	224, 104, 104, 104, 154, 154, 154, 156, 156, 214,
	214, 214, 215, 215, 213, 213, 213, 213, 246, 246,
	246, 246, 246, 246, 246, 246, 324, 324, 324, 325,
	325, 243, 243, 247, 247, 247, 247, 247, 247, 241,
	241, 241, 241, 242, 242, 252, 252, 179, 179, 179,
	179, 177, 177, 178, 178, 248, 248, 248, 248, 174,
	174, 249, 249, 249, 208, 208, 255, 255, 255, 273,
	273, 153, 153, 153, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 257, 257, 257, 257, 259, 259, 259, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 272, 272, 272, 272,
	272, 260, 260, 267, 267, 268, 268, 269, 270, 261,
	261, 262, 262, 263, 264, 271, 271, 271, 271, 275,
	275, 265, 265, 265, 265, 265, 266, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 187, 187, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 218, 218, 218, 218, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	303, 303, 303, 303, 303, 303, 303, 303, 305, 305,
	306, 306, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 312, 312, 313, 313, 315, 315, 316, 316,
	317, 318, 318, 318, 319, 320, 320, 314, 314, 321,
	321, 321, 322, 322, 323, 323, 323, 323, 323, 230,
	230, 230, 231, 231, 232, 238, 238, 238, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 130, 130, 130, 130, 130, 161,
	161, 227, 227, 225, 225, 225, 229, 229, 180, 180,
	274, 274, 274, 274, 274, 274, 274, 181, 181, 181,
	188, 182, 182, 183, 183, 183, 183, 183, 183, 221,
	222, 184, 184, 184, 223, 223, 233, 237, 237, 236,
	235, 235, 234, 234, 211, 211, 212, 212, 210, 209,
	169, 169, 168, 168, 167, 167, 338, 338, 239, 239,
	170, 170, 171, 163, 163, 250, 250, 250, 250, 157,
	157, 137, 137, 158, 158, 133, 133, 136, 136, 134,
	134, 134, 134, 151, 151, 152, 152, 131, 131, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	276, 276, 276, 226, 125, 125, 125, 126, 126, 127,
	127, 281, 281, 281, 282, 282, 282, 282, 280, 280,
	280, 280, 280, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 3,
	1, 2, 1, 2, 2, 7, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 3,
	4, 4, 4, 3, 2, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 2, 3,
	3, 3, 2, 3, 4, 3, 5, 3, 4, 5,
	2, 3, 3, 3, 4, 2, 3, 4, 3, 3,
	3, 4, 4, 4, 4, 2, 3, 5, 5, 5,
	2, 0, 2, 0, 3, 2, 7, 10, 11, 11,
	8, 8, 6, 9, 10, 10, 7, 7, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 2, 4, 3, 3, 0, 6, 3, 11,
	14, 4, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 1, 0, 2, 0, 2,
	2, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 3, 2, 3, 2, 2, 2, 2, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	0, 1, 3, 1, 0, 1, 1, 1, 2, 3,
	2, 2, 8, 11, 3, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 3, 6, 3,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 3, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 2, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 8, 8, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 2, 3, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	6, 3, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 3, 3, 1, 3, 3, 1,
	3, 3, 1, 1, 3, 3, 1, 1, 6, 6,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 1,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 3, 5, 1, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	1, 2, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 1, 5, 1, 1, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 357, -4, -20, -22, -26, -27,
	-47, -34, -35, -36, -46, -42, -48, -49, -50, -51,
	-43, -57, -56, -58, -61, -59, -52, -53, -62, -70,
	-90, -91, -92, -93, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 67, -28, -29, -30, -31, 69, -32,
	-33, 90, -310, 94, -37, -38, -39, -41, -40, 98,
	105, 107, 125, 134, 214, 220, 240, 242, 244, 251,
	-100, -102, 238, -54, -55, -63, -64, -65, -66, -94,
	262, -71, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, -87, -88, 265,
	-21, -25, -60, 303, -9, -10, -13, -12, -11, -16,
	-18, -15, -17, -19, -14, -308, -103, -101, 354, 239,
	312, 35, 274, 61, 101, 246, 328, 335, -106, -104,
	-105, -107, 255, 320, 284, 358, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 2,
	284, 323, 83, 141, -326, 2, -158, 284, 83, -134,
	-125, 347, 4, -287, -289, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 64,
	66, 67, 68, 71, 72, 73, 81, 82, 84, 86,
	90, 92, 94, 97, 98, 100, 105, 106, 107, 113,
	114, 119, 121, 126, 132, 133, 134, 135, 142, 145,
	147, 140, 157, 158, 159, 161, 162, 163, 166, 165,
	170, 173, 176, 178, 179, 180, 183, 181, 185, 186,
	188, 187, 193, 195, 196, 198, 201, 204, 207, 210,
	211, 212, 213, 214, 216, 218, 220, 222, 223, 224,
	225, 226, 228, 229, 231, 232, 233, 234, 235, 238,
	236, 237, 239, 240, 241, 242, 244, 246, 247, 249,
	263, 264, 275, 251, 252, 253, 254, 258, 256, 259,
	260, 262, 265, 267, 270, 273, 274, 276, 279, 280,
	277, 272, 283, 285, 286, 287, 288, 289, 290, 291,
	298, 299, 303, 304, 305, 306, 309, 310, 311, 312,
	314, 317, 318, 319, 324, 329, 330, 331, 332, 333,
	28, 36, 37, 38, 39, 41, 42, 45, 46, 51,
	52, 53, 56, 85, 87, 88, 104, 108, 109, 115,
	116, 117, 127, 129, 136, 137, 146, 148, 149, 150,
	151, 152, 154, 168, 182, 192, 194, 205, 209, 217,
	219, 227, 248, 257, 268, 269, 278, 281, 293, 294,
	295, 300, 301, 316, 320, 321, 357, 357, 2, 158,
	224, -133, -125, 83, 357, 357, 357, 357, 284, 2,
	286, 288, 313, 323, -189, 83, 308, 357, 357, -125,
	220, 22, 2, 92, 145, 311, 310, 22, 216, 256,
	286, 288, 2, 357, 357, 357, 357, 357, 2, 323,
	284, 141, 83, 313, -125, 2, -45, 2, 354, -44,
	-4, -27, -36, -46, -42, -20, -22, -34, -50, -49,
	-51, -53, -57, -56, -59, -63, -64, -70, -92, -93,
	262, -330, 2, 22, -331, -332, 69, 98, 125, 255,
	145, 92, 310, 284, 2, 158, 2, -125, 2, -326,
	2, 158, 2, -330, 2, -125, 2, -129, 2, 251,
	-125, 357, 357, 357, 357, 357, 173, 55, 248, 259,
	-68, 299, -67, 293, -279, -69, 2, -159, 183, -125,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 2, -89, 259,
	34, 55, 22, 60, 84, 126, 141, 142, 162, 65,
	66, 223, 173, 159, 298, 163, 260, 285, 299, 69,
	314, 289, 106, 4, 83, 183, 261, 293, 357, 357,
	357, -334, 2, 284, -101, -103, -102, -147, -148, 307,
	153, 103, 203, -100, -102, 2, -308, -89, 259, 2,
	55, 22, -277, 2, -239, 199, -216, 89, -218, 345,
	346, 340, 189, 334, -230, -220, -233, 104, 248, 354,
	-133, -219, 360, 9, -305, -102, 29, -231, -232, 49,
	-125, 7, 8, 5, 6, -131, -257, -226, -266, 302,
	110, 191, -303, -304, 4, -287, -281, -258, -268, -262,
	-265, 154, 58, 75, 76, 79, 77, 80, 261, 313,
	50, 28, 108, 109, 209, 217, 281, 300, 301, 136,
	192, 137, 56, 127, 168, 97, 37, 39, 41, 42,
	51, 52, 85, 87, 88, 115, 116, 117, 146, 148,
	149, 150, 151, 152, 194, 227, 268, 278, 294, 295,
	321, -288, -269, -270, -263, -264, 70, 124, 144, 138,
	156, 160, 169, 171, 184, 206, 208, 245, 266, -271,
	-335, 2, 299, 299, 2, -335, 2, -335, 2, -128,
	2, 299, 296, -311, 228, -307, -125, -311, 357, 357,
	359, 357, -144, -145, 2, 22, 95, -171, 2, 354,
	-246, 2, 352, -248, -133, -102, -247, 354, 200, -3,
	2, -248, 136, -133, 2, -248, 136, -133, 2, -125,
	2, -136, 136, -133, 296, 359, -158, -151, -125, -210,
	-209, 356, -216, 2, -216, 2, 123, 354, -168, -169,
	-209, -210, 2, -159, 136, 284, 284, -125, 2, -159,
	2, 141, -125, 136, 2, -125, 22, 123, 2, 155,
	2, 155, 2, -249, 2, -248, -160, 136, 2, -159,
	-160, 136, 2, -137, 136, 2, -136, -125, 136, 2,
	-151, 136, 2, -185, 354, -254, 2, -253, -282, 4,
	-287, -289, -288, 320, 58, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 259, 199, 359,
	-159, -216, -228, 354, 123, -216, 199, -125, 2, 263,
	2, 354, -68, 53, 299, -203, 2, -204, -122, -123,
	-124, 157, 222, 226, 333, 296, 339, 123, -277, -162,
	356, -89, 2, -285, 2, -283, 9, -282, 5, 263,
	2, 223, 260, 55, 123, 2, 2, -327, 2, 199,
	123, 2, 123, 2, 123, 2, 123, 2, 123, 2,
	2, 223, 260, 2, 120, 2, 298, 2, 2, 123,
	2, 157, 222, 275, 2, 284, 323, 2, 123, 123,
	333, 2, -174, -248, -147, -148, -173, -192, -193, 172,
	112, 197, -176, 22, 95, -176, -176, 44, 355, 355,
	-89, 263, 2, 10, 11, 57, 33, 345, 346, 347,
	348, 118, 349, 350, 343, 344, 342, 337, 338, 339,
	63, 177, 250, 13, 14, 15, 26, 202, 171, 334,
	138, 266, 340, 16, 17, 18, 156, 36, 139, -130,
	-138, -216, -216, -216, -216, -216, 208, -167, -211, 352,
	-102, 354, 354, -102, -216, -161, 354, 7, -102, -225,
	352, -234, -216, -168, 354, 5, 354, 5, -312, 329,
	120, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	219, -275, 324, -275, -275, -259, 354, -259, -260, 354,
	-259, 330, 335, 354, -202, -203, -202, 296, -129, 359,
	-311, -152, 354, -171, -163, -250, -216, 347, -163, -170,
	-239, 70, -179, 160, 184, 124, 169, 245, 144, 7,
	-45, -213, 360, 354, 347, -243, 335, -102, -247, 354,
	-246, -133, 354, -112, 236, -111, 21, 23, 98, 318,
	104, 272, 290, 252, 236, 104, 236, 272, 290, 252,
	236, 104, 360, -285, -134, 359, -280, 347, 4, -287,
	-289, -288, -290, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 49, 50, 54, 57, 59, 65, 69,
	74, 75, 77, 76, 78, 79, 80, 89, 91, 93,
	95, 96, 99, 101, 103, 110, 111, 112, 120, 122,
	123, 125, 128, 130, 139, 141, 143, 153, 155, 164,
	167, 172, 174, 175, 189, 190, 191, 197, 199, 200,
	202, 203, 215, 221, 230, 243, 255, 261, 271, 282,
	284, 292, 296, 297, 302, 307, 308, 313, 315, 322,
	323, 325, 326, 327, 328, 276, 355, -157, -133, -169,
	354, -146, 189, 136, -159, 136, -159, -121, -309, 328,
	-146, 354, -126, 136, 2, -125, -309, 189, -249, -135,
	-133, -135, 262, -125, 30, -114, 359, 48, 241, 104,
	-114, 104, -114, 359, 104, -114, 104, 104, -161, -216,
	355, 359, -326, -332, 69, 354, 30, -227, -255, -256,
	-258, -267, -261, -265, -266, 40, 46, 45, 291, 182,
	257, 269, 316, 38, 198, 147, 146, 148, 149, 150,
	151, 152, 268, 37, 227, 116, 117, 115, 97, 88,
	87, 194, 42, 41, -269, -270, -263, -264, 85, 294,
	295, 154, 39, 52, 51, 321, 278, -286, -285, -326,
	-279, -161, 30, -203, 2, -336, 359, 170, -140, 176,
	188, 132, 200, 331, -284, 5, 4, -226, -240, 89,
	173, -266, 8, 346, -276, 7, 345, -278, -277, -278,
	73, 356, -280, -159, 22, 264, 2, -279, -329, 120,
	-326, -279, -279, -279, -279, -279, 259, -45, 120, -125,
	170, -279, 2, -279, 2, 284, 141, 284, -114, 359,
	-173, -193, -192, -195, -216, 22, -198, 114, 185, -216,
	-218, -101, -101, -101, -149, -244, -216, 221, 141, -279,
	-273, -255, -272, 232, 233, 231, 235, 234, -255, -280,
	293, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
	-216, -216, -216, 171, 138, 266, 36, 139, -216, 296,
	-216, -216, -216, -216, 181, 189, 191, 302, 110, 309,
	95, 195, -338, 282, 32, -223, -102, 354, -238, 27,
	271, 22, -230, 248, 354, -211, -216, -212, -161, 355,
	355, 359, -161, -229, 353, -225, -237, -236, 325, 355,
	-161, 322, 22, 95, 347, 2, 7, -186, 332, 180,
	86, 133, 179, -187, 254, -313, 113, 128, 354, 355,
	2, 355, 2, 355, 2, 355, 2, -216, -216, -180,
	2, -274, -161, 4, 332, 180, 86, 133, 179, 254,
	-180, 2, -181, 2, -216, -161, -182, -217, -218, 345,
	346, 340, 354, 248, -183, 2, -216, -161, -216, 43,
	167, 297, -184, -216, 123, -161, -216, -216, -216, -161,
	-161, 2, -161, 2, 354, 7, 7, 293, 293, 7,
	-129, -307, 30, -151, -154, 359, 123, 30, 4, -154,
	359, 355, 160, 160, -246, -179, 160, -177, 206, -177,
	-177, -324, 354, 353, -243, -280, 352, 361, -161, 2,
	-242, -241, 30, -125, 204, 355, -133, 359, 296, -190,
	65, 59, -206, 136, 59, -291, -125, 65, -292, 54,
	308, 221, 122, -190, 65, -190, 65, 65, -248, 33,
	-59, 123, 296, -248, 296, 33, -59, 123, 296, -136,
	-280, -252, 336, -125, 123, 355, 359, -141, -151, -142,
	-125, -207, -206, -293, -294, -291, 141, 308, 111, 30,
	104, 189, 354, -146, 189, 354, -146, 213, 30, 199,
	189, -117, 287, 104, -208, 326, -199, -59, 354, 89,
	30, -199, -164, -165, -251, -166, -133, 354, -125, -159,
	-160, -160, -136, -137, -125, -151, 355, 359, -45, -253,
	296, 315, -142, -44, 355, 359, -153, 29, 352, -186,
	354, -252, 359, 123, 339, 296, 355, 299, -204, -139,
	226, 270, 237, 258, 8, 7, 7, 359, -280, -328,
	-125, 259, -45, -133, -136, -133, -248, -196, -276, 354,
	346, -197, 248, 249, 359, -110, 31, 93, 161, -133,
	333, -216, -216, 296, -338, 282, -223, -216, 181, 191,
	302, 110, 309, 95, 195, 123, 354, -217, -217, -161,
	-220, 354, -161, 353, 363, 355, -216, 353, 353, 359,
	-235, -236, 99, -216, -148, 359, -147, -216, -161, -161,
	355, 355, 296, 296, 296, 296, 354, -318, 207, 354,
	354, -216, 30, 359, 355, 123, 355, 355, -188, 215,
	355, 10, 11, 345, 346, 347, 348, 118, 349, 350,
	343, 344, 342, 337, 338, 339, 63, 177, 250, 13,
	14, 15, 156, 139, -217, -217, -217, -161, 354, 355,
	-221, -222, 123, 120, 30, -184, -184, -184, 355, 123,
	-161, 359, 359, 359, 355, 355, 355, 7, 355, 359,
	355, 333, 333, 355, 354, 355, -208, -250, -156, 2,
	-246, -280, -208, -239, -246, -246, -178, 315, 199, 160,
	-246, -241, 355, -325, 7, -243, -242, 7, -215, -214,
	121, 187, 355, -125, 354, -243, 355, -111, -133, -125,
	-125, 189, -206, 136, -116, 189, -255, -125, 354, 354,
	161, 161, -125, -125, 136, -125, 136, -125, -125, -112,
	236, -59, 354, -133, 236, -125, -59, 354, -125, 236,
	-95, 135, 195, 276, 123, -133, 355, 355, 359, -126,
	141, -126, -59, -159, 104, -141, 30, 104, -141, 30,
	5, -59, -133, 104, -118, 100, -337, 339, -125, -194,
	-192, -216, -175, -201, 243, 199, -157, 320, -125, -175,
	-155, 359, 123, 339, -157, -114, -114, -114, -114, -216,
	-328, -285, 355, -255, 352, 353, 7, 7, -98, 328,
	-285, -328, -277, -277, -122, 306, 62, 226, -277, 359,
	-197, -216, -244, -133, 360, -216, -216, -217, -217, 123,
	354, -216, -227, 26, 26, 355, -161, 355, 359, -212,
	-216, 355, -225, 101, -216, 292, 355, 322, -148, -148,
	-148, 5, 180, 133, 179, -187, 179, -187, -187, 7,
	-319, -125, 354, 326, -147, 355, -273, -255, -216, -221,
	-216, -273, -255, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -217, 95, 189, 195, -217, 359, -161, 355, -222,
	-221, -216, -216, -255, 355, 355, 355, -161, -216, -216,
	-216, 355, 7, -44, -172, 128, -252, 359, -172, -178,
	354, -216, -246, 353, 355, 359, -242, 353, 359, 362,
	339, -243, 354, -151, -241, 296, 296, 104, 189, 317,
	-295, -292, -216, -150, -245, -125, -306, 354, -303, -304,
	-131, 354, 354, -109, 98, 262, -191, 104, -114, 104,
	-114, 296, -190, 65, -161, 296, -161, 296, -98, 123,
	283, 276, -143, 140, -207, 354, -126, 354, 354, -146,
	-159, 355, -59, -159, 355, -59, 354, -125, -119, 166,
	-337, -283, -309, -175, -175, -163, 190, 64, 355, -208,
	-165, -156, -239, 355, -99, 71, -99, 7, 353, 355,
	-97, 201, -96, -125, 5, -125, 200, 355, -110, -280,
	26, 26, -216, -227, 355, -216, -216, 355, -216, 353,
	-216, 5, -216, 355, 355, 355, 355, -320, -125, -216,
	355, 355, 355, -222, 123, 95, 195, 354, -216, 355,
	355, 359, 355, 355, 355, 355, -224, 130, 44, -246,
	-224, -151, -213, 7, -214, -280, 352, -242, -151, 355,
	-125, -125, -206, 104, -296, 65, -297, 57, 111, 69,
	189, 191, 308, 221, 54, 89, 230, 355, 355, 359,
	-132, -168, 57, -132, -216, 354, -150, -151, 189, 89,
	189, 89, 82, 304, -125, -125, -133, -125, -125, 355,
	-133, 355, -125, -286, 293, 139, -150, 354, -151, -141,
	30, 354, -146, -143, 354, -146, -143, -150, 199, -120,
	165, -337, -283, -117, -200, 354, 199, -59, -175, 339,
	82, 82, 353, 359, 354, 339, 339, -110, -216, -216,
	355, 355, -148, -314, 212, 355, -217, 123, 354, -227,
	355, -216, -315, 327, -216, -161, -315, 355, -243, 7,
	355, -206, -125, -280, -125, 111, 136, 191, 161, 354,
	-217, -133, -205, -333, 68, 280, -245, -110, -280, -110,
	355, -161, 355, 355, 191, 191, -216, -255, -114, -114,
	296, 296, 296, 296, -219, -131, -125, 210, 355, -150,
	355, 355, -59, -141, 30, -141, 30, 355, -133, -337,
	-283, -118, 96, -151, 65, -171, -102, 354, 354, 354,
	-96, -97, -285, -285, 355, -148, 44, -217, -227, 355,
	355, -316, -317, -125, -242, 353, -297, -126, 189, -216,
	-127, 354, -143, 354, -132, -148, 230, -113, 57, -125,
	-125, 354, 354, 354, -133, -205, 355, -143, 355, -59,
	355, -59, -205, 354, -283, -119, 310, 190, 355, -125,
	-286, -286, 355, -321, 225, 249, -161, 355, 359, 30,
	104, 355, -300, 178, -125, -151, -110, 355, -133, -108,
	315, -280, -161, -161, -161, 354, -143, -205, -143, -143,
	-143, -150, -120, 262, -208, 355, 355, 355, -322, -323,
	36, 305, 73, -216, -322, -317, -319, 111, -298, -301,
	-299, 199, 124, 211, 267, 355, 355, -146, -216, 355,
	355, -148, -151, -143, 355, -164, -98, -98, -323, 218,
	119, 248, 218, 119, -125, -299, 199, -301, 199, 310,
	92, -300, 355, 355, -205, -208, 26, -302, 186, 241,
	48, 262, -302, -298, -115, 48, 241, -143, -323, 20,
	191, 89,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 0, 0, 151, 153, 155, 157, -2, 160,
	162, 0, 0, 0, 173, 175, 177, 179, 181, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	644, -2, 0, 278, 280, 289, 291, 293, 295, 296,
	0, 339, 341, 343, 345, 347, 349, 351, 353, 355,
	357, 359, 361, 363, 365, 367, 368, 370, 372, 0,
	565, 567, 569, -2, 63, 64, 65, 66, 67, 73,
	74, 75, 76, 69, 71, 680, -2, 691, 0, 0,
	0, -2, 0, -2, -2, -2, 0, 0, 657, 659,
	661, 663, -2, 0, 0, -2, 7, 12, 14, 16,
	19, 21, 23, 25, 27, 29, 31, 33, 35, 37,
	39, 42, 48, 50, 52, 55, 57, 59, 61, 62,
	0, 0, 0, 0, 0, 117, 262, 0, 1246, 1173,
	1179, 1180, 1204, 1205, 1206, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
	1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
	1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
	1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
	1429, 1430, 1431, 1432, 1433, 1434, 143, 145, 146, 0,
	0, 0, 1175, 1246, 152, 154, 156, 158, 0, 164,
	0, 0, 0, 0, 0, 0, 532, 161, 163, 253,
	1305, 255, 257, 0, 0, 0, 0, 167, 168, 169,
	170, 171, 172, 174, 176, 178, 180, 182, 183, 0,
	0, 0, 0, 0, 252, 250, 205, 206, 0, 235,
	236, 237, 238, 239, 241, 209, 211, 212, 214, 216,
	218, 220, 221, 223, 225, 226, 228, 230, 231, 233,
	0, 0, 259, 265, 266, 267, 269, 270, 271, 272,
	273, 274, 275, 0, 123, 0, 445, 248, 246, 0,
	119, 0, 562, 0, 261, 563, 564, 559, 560, 1332,
	588, 279, 281, 290, 292, 294, -2, -2, 1421, -2,
	303, -2, 311, 1427, 0, 314, 315, 318, -2, 201,
	340, 342, 344, 346, 348, 350, 352, 354, 356, 358,
	360, 362, 364, 366, 369, 371, 373, 374, 375, 0,
	0, 0, 379, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, 0, -2, -2, 0, 0,
	-2, 0, 0, 378, 380, 381, 382, 0, 566, 568,
	570, 0, 522, 682, -2, 655, 656, -2, 0, 686,
	686, 686, 0, 0, 656, 654, 0, 282, 0, 284,
	0, 379, 287, 288, 319, 320, 1158, 1159, 883, 0,
	0, 0, 0, 0, 0, 975, 977, 1395, 1421, 0,
	979, 980, 0, 982, 984, 985, 0, 988, 989, 1143,
	1175, 1189, 1190, 1191, 1192, 0, 0, 1195, 0, 1197,
	1198, 1199, 1043, 999, -2, -2, 1187, 811, 812, 813,
	814, -2, 1435, 1003, 1006, 1009, 1012, 1013, 1016, 1017,
	0, 1379, 1396, 1397, 1417, 1418, 1426, 1430, 1431, 1403,
	1414, 1404, 1391, 1401, 1412, 1252, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1213, 845, 846, 851, 852, 1436, 1437, 1438, 1439,
	1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 854,
	590, 572, 581, 590, 574, 575, 576, 577, 578, 579,
	580, 583, 0, 672, 1311, 675, 1186, 673, 658, 660,
	0, 662, 0, 0, 666, 688, 687, 721, 722, 0,
	670, 671, 681, 737, 775, 752, 743, 0, 0, 2,
	68, 0, 1403, 775, 70, 0, 1403, 775, 72, 0,
	77, 0, 1403, 1178, 0, 0, 263, 264, 1183, 1181,
	1182, 0, 147, 148, 149, 150, 0, 0, 1176, 1152,
	1150, 1151, 159, 501, 1403, 0, 0, -2, 524, 501,
	528, -2, 679, 1403, 604, 254, 256, 0, 166, 0,
	617, 0, 619, 0, 634, 781, 109, 1403, 186, 199,
	109, 1403, 189, 109, 1403, 192, 1171, 109, 1403, 195,
	196, 1403, 198, 249, 0, 0, -2, 242, 244, 1214,
	1215, 1216, 1217, -2, 1435, 240, 210, 213, 215, 217,
	219, 222, 224, 227, 229, 232, 234, -2, 0, 0,
	0, 444, 0, 0, 0, 561, 0, 587, 297, 0,
	300, 0, 302, 1390, -2, -2, 306, 591, 595, 596,
	597, 0, 0, 0, 0, 0, 0, 0, 316, 202,
	0, 376, 377, 385, 386, 124, 125, 337, 338, 0,
	389, 410, 422, 0, 0, 393, 395, 443, 397, 0,
	0, 399, 0, 401, 0, 403, 0, 405, 0, 407,
	409, 411, 423, 413, 681, 415, 0, 417, 421, 0,
	426, 0, 428, 429, 430, 0, 0, 436, 0, 0,
	383, 384, 109, 779, -2, 0, 650, 700, 701, 0,
	0, 0, 0, 684, 685, 0, 0, 0, 646, 647,
	283, 0, 286, 0, 0, 0, 0, 1078, 1079, 1080,
	1081, 1082, 1083, 1086, 1087, 1084, 1085, 1088, 1089, 1090,
	0, 0, 0, 1091, 1092, 1093, 0, 0, 1095, 0,
	1097, 0, 0, 0, 0, 0, 0, 1157, 0, 0,
	1094, 888, 889, 890, 912, 913, 0, 976, 1154, 1147,
	978, 0, 0, -2, 1099, 0, 0, 981, 986, 987,
	0, 0, 1142, -2, 0, 1194, 0, 880, 1045, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1122, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	830, 848, 859, 856, 855, 832, 0, 831, 829, 0,
	833, 0, 0, 0, 571, -2, 573, 0, 585, 0,
	674, 0, 0, 723, 726, 1163, 1167, 1168, 726, 0,
	1160, 0, 0, 0, 0, 772, 772, 772, 770, 746,
	0, 752, 0, 0, 776, 764, 0, -2, 743, 0,
	0, 777, 0, 78, 556, 88, 0, 556, 556, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 766, 1174, 0, 1148, 1149, 1218, 1219,
	1220, 1221, 1222, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
	1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
	1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515,
	1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
	1526, 1527, 1528, 1529, 1530, 139, 0, 0, 1169, 1153,
	459, 0, 0, 1403, 501, 1403, 501, 523, 0, 678,
	0, 0, 0, 1403, 531, 1207, 606, 0, 785, 0,
	620, 0, 0, 782, 0, 184, 0, 107, 108, 0,
	187, 0, 190, 0, 0, 193, 0, 0, 0, 1099,
	681, 0, 0, 268, 0, 0, 681, 0, 1101, 793,
	794, 795, 796, 797, 880, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 842, 0, 817,
	817, 817, 834, 835, 843, 844, 849, 850, 861, 862,
	864, 866, 860, 860, 860, 857, 858, 766, 126, 0,
	0, 0, 0, -2, 308, 0, 593, 0, 598, 328,
	329, 330, 600, 601, 312, 331, 332, 333, 334, 335,
	336, 0, 518, 0, 520, 1200, 0, 309, 321, 310,
	313, 0, 203, 387, 388, 390, 391, 392, 396, 0,
	440, 398, 400, 402, 404, 406, 414, 418, 681, 424,
	427, 431, 432, 433, 434, 0, 0, 0, 521, 0,
	653, 698, 699, 704, 708, 709, 712, 715, 716, 706,
	883, 667, 668, 669, 692, 693, 543, 0, 0, 285,
	884, 789, 790, 836, 837, 838, 839, 840, 885, 886,
	0, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, -2, -2, -2, 904, 905, 906, -2, -2, -2,
	910, 911, -2, 1096, 1098, 0, 1157, 0, -2, 0,
	-2, -2, -2, -2, 924, 0, 926, 929, 931, 933,
	0, 0, 0, 0, 1156, 943, 1134, 0, 0, 1075,
	1076, 1077, 928, 0, 0, 1155, 1146, 0, 0, -2,
	983, 0, 0, 0, 1105, 1106, 1141, 1137, 0, 990,
	691, 0, 0, 0, 0, 997, 0, 1203, 867, 868,
	869, 870, 871, 872, 881, 1053, 0, 0, 0, 1004,
	1005, 1007, 1008, 1010, 1011, 1014, 1015, 0, 0, 0,
	1021, 0, 1109, -2, -2, -2, -2, -2, -2, -2,
	0, 1023, 0, 1025, 1099, 1119, 0, 0, 946, 0,
	0, 0, 0, 1421, 0, 1028, 1099, 1127, 0, 0,
	0, 0, 0, 1099, 0, 1133, 0, 0, 0, 0,
	0, 1039, 0, 1041, 0, 0, 0, 0, 0, 0,
	584, 676, 0, 0, 785, 0, 0, 0, 1166, 785,
	0, 1162, 0, 0, 0, 0, 0, 767, 771, 768,
	769, 0, 0, 752, 764, 734, 0, 0, 0, 741,
	742, 763, 0, 762, 751, -2, 0, 0, 0, 0,
	0, 555, 90, 1403, 0, 111, 0, 0, 491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 83, 0, 0, 0,
	1177, 129, 0, 1184, 0, 0, 0, 0, 0, 458,
	1183, 460, 462, 463, 464, 465, 1208, 0, 1208, 0,
	0, 0, 459, 0, 0, 459, 0, 0, 0, 0,
	0, 608, 614, 0, 703, 0, 632, 622, 0, 0,
	0, 632, 636, 637, 639, 640, 0, 0, 783, 200,
	109, 109, 1172, 109, 109, 197, 251, 0, 207, 243,
	0, 0, 0, 245, 247, 0, 786, 788, 0, 798,
	0, 138, 0, 0, 0, 0, 301, 0, 592, 599,
	0, 325, 0, 327, 519, 1202, 1201, 0, 204, 442,
	276, 416, 419, 437, 438, 439, 780, 0, 710, 0,
	0, 707, 713, 714, 0, 695, 541, 542, 0, 0,
	0, -2, -2, 0, 0, 0, 944, -2, 925, 927,
	930, 932, 934, 0, 0, 0, 0, 0, 0, 0,
	945, 0, 0, 1144, 1147, -2, 1100, 1103, 1104, 0,
	0, 1138, 0, 0, 0, 0, 690, 691, 691, 691,
	996, 0, 0, 0, 0, 0, 0, 998, 0, 0,
	0, 0, 0, 0, 1020, 0, 1022, 1024, 0, 0,
	1026, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 949, 950, 951, 0, 0, 1027,
	1125, 1126, 0, 0, 0, 0, 0, 0, 1033, 0,
	1132, 0, 0, 0, 1037, 1038, 1040, 0, 815, 0,
	841, 863, 865, 853, 681, 1185, 718, 1164, 766, 725,
	727, 1165, 718, 1161, 754, 0, 756, 0, 0, 0,
	758, 0, 747, 0, 749, 764, 739, 0, 0, 732,
	0, 731, 752, 760, 0, 0, 778, 89, 545, 0,
	0, 0, 92, 1403, 100, 0, 473, 0, 0, 0,
	0, 0, 558, 101, 1403, 109, 1403, 109, 102, 79,
	556, 80, 0, 551, 0, 544, 81, 0, 553, 0,
	138, 0, 0, 140, 0, 1170, 467, 500, 0, 0,
	1208, 0, 452, 501, 0, 0, 0, 0, 0, 0,
	525, 527, 0, 0, 610, 614, 0, 613, 679, 632,
	702, 784, 615, 632, 0, 0, 0, 624, 621, 618,
	785, 0, 0, 0, 0, 185, 188, 191, 194, 1100,
	258, 0, 0, 1102, 0, 791, 0, 0, 118, 0,
	127, 260, 298, 299, 304, 323, 324, 326, 322, 0,
	0, 0, 694, 543, 0, 887, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1135, 0, 1070, 0, 0,
	1146, -2, 1107, 1136, 1140, 0, 991, 0, 0, 0,
	0, 1196, 873, 874, 875, 876, 877, 878, 879, 0,
	1051, 1052, 1056, 0, 0, 1002, 0, 0, 1108, 1118,
	1120, 947, 948, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, -2, -2, -2, 965, 966, 967, -2,
	-2, -2, 0, 0, 0, 1121, 0, 0, 1073, 1123,
	1124, 1129, 1130, 0, 1030, 1031, 1032, 1131, 0, 0,
	0, 847, 0, 0, 720, 0, 724, 0, 720, 755,
	0, 774, 757, 737, 748, 0, 745, 735, 0, 736,
	0, 764, 0, 0, 744, 0, 0, 0, 0, 110,
	471, 490, 0, 0, 534, 540, 540, 0, 1000, 1001,
	0, 0, 0, 94, 0, 0, 0, 0, 98, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 141, 446, 0, 461, 0, 0, 0, 459, 0,
	501, 467, 456, 501, 467, 457, 0, 0, 612, 614,
	0, 605, 606, 165, 616, 630, 631, 629, 0, 632,
	638, 635, 641, 0, 0, 120, 0, 0, 792, 799,
	136, 1295, 134, 131, 133, 277, 705, 711, 696, 543,
	0, 0, -2, 0, 937, -2, -2, 1069, 1100, 1145,
	1139, 1193, 691, 992, 994, 995, 882, 1058, 1055, 0,
	1042, 1018, 1019, 1117, 0, 0, 0, 0, 1100, 1072,
	1029, 0, 1035, 1036, 816, 677, 1047, 0, 0, 728,
	1047, 0, 752, 750, 733, 729, 0, 740, 0, 761,
	547, 549, 91, 0, 472, 0, 475, 0, 0, 0,
	0, 481, 482, 0, 0, 0, 0, 492, 499, 0,
	543, 1188, 0, 543, 0, 0, 0, 0, 0, 106,
	0, 0, 557, 0, 109, 109, 546, 0, 0, 0,
	552, 0, 554, 128, 0, 0, 0, 0, 0, 0,
	0, 459, 0, 450, 459, 0, 451, 0, 0, 602,
	614, 0, 607, 608, 0, 0, 0, 623, 633, 0,
	0, 0, 787, 0, 0, 0, 0, 697, -2, -2,
	938, 1071, 0, 691, 0, 1044, -2, 0, 0, 0,
	1074, 0, 664, 0, 719, 717, 665, 773, 764, 0,
	759, 93, 0, 476, 477, 1208, 0, 480, 483, 0,
	485, 1210, 467, 0, 496, 497, 535, 536, 539, 537,
	540, 691, 494, 0, 95, 96, 105, 113, 97, 103,
	0, 0, 0, 0, 765, 0, 0, 0, 499, 0,
	489, 467, 453, 0, 0, 0, 0, 499, 0, 0,
	609, 610, 0, 0, 0, 642, 643, 0, 0, 0,
	135, 0, 130, 132, 993, 1061, 0, -2, 0, 973,
	1034, 1046, 1048, 0, 738, 730, 474, 478, 0, 0,
	505, 0, 493, 0, 543, 0, 0, 115, 0, 548,
	550, 0, 0, 0, 0, 467, 499, 447, 467, 454,
	467, 455, 467, 0, 611, 612, 0, 626, 785, 628,
	0, 0, 137, 0, 0, 0, 1057, 974, 0, 0,
	0, 484, 510, 0, 0, 0, 538, 991, 501, 99,
	0, 112, 0, 0, 691, 0, 487, 467, 448, 449,
	529, 0, 603, 0, 627, 138, 138, 1054, 1059, 1062,
	-2, 1363, 1243, 0, 1060, 1049, 1050, 0, 486, 506,
	507, 0, 502, 503, 504, 1209, 498, 505, 114, 85,
	87, 0, 0, 488, 499, 785, 121, 122, 0, 1064,
	1065, 1066, 1067, 1068, 479, 508, 0, 509, 0, 0,
	0, 510, 0, 470, 467, 625, 0, 511, 0, 514,
	515, 0, 512, 495, 466, 468, 469, 530, 1063, 513,
	516, 517,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 343, 3, 349, 344, 3,
	354, 355, 347, 345, 359, 346, 356, 348, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 363, 358,
	337, 339, 338, 3, 360, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 352, 3, 353, 350, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 361, 342, 362, 340,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 341,
	57680, 351, 57681, 357, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:859
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:865
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:871
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:880
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:882
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:983
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1003
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1029
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1035
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1101
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1124
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1196
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1197
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1200
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1201
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1228
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1254
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1361
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1394
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1405
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			return helpWith(sqllex, "DELETE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1450
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1462
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "DROP")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1517
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1555
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			return helpWith(sqllex, "DELETE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1621
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			return helpWith(sqllex, "INSERT")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1643
		{ /* SKIP DOC */
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "GRANT")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return helpWith(sqllex, "RESET")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1864
		{
			return helpWith(sqllex, "RESET")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1875
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1880
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1887
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1888
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{ /* SKIP DOC */
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1891
		{ /* SKIP DOC */
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1892
		{
			return unimplemented(sqllex, "set local")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1908
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1963
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			return unimplemented(sqllex, "set from current")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1985
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = Low
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = Normal
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = High
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2097
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2098
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2099
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2121
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.str = "client_encoding"
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2147
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2164
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2169
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2223
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2336
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2344
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2358
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2369
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2384
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2388
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2392
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2398
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2426
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, IsTemp: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, IsTemp: false, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[7].union.normalizableTableName(), IfNotExists: true, IsTemp: true, Interleave: sqlDollar[11].union.interleave(), Defs: sqlDollar[9].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[7].union.normalizableTableName(), IfNotExists: true, IsTemp: true, Interleave: sqlDollar[11].union.interleave(), Defs: sqlDollar[9].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[4].union.normalizableTableName(), IfNotExists: false, IsTemp: true, Interleave: sqlDollar[8].union.interleave(), Defs: sqlDollar[6].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[4].union.normalizableTableName(), IfNotExists: false, IsTemp: true, Interleave: sqlDollar[8].union.interleave(), Defs: sqlDollar[6].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, IsTemp: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, IsTemp: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[7].union.normalizableTableName(), IfNotExists: true, IsTemp: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[10].union.slct(), AsColumnNames: sqlDollar[8].union.nameList()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[7].union.normalizableTableName(), IfNotExists: true, IsTemp: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[10].union.slct(), AsColumnNames: sqlDollar[8].union.nameList()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[4].union.normalizableTableName(), IfNotExists: false, IsTemp: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[7].union.slct(), AsColumnNames: sqlDollar[5].union.nameList()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[4].union.normalizableTableName(), IfNotExists: false, IsTemp: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[7].union.slct(), AsColumnNames: sqlDollar[5].union.nameList()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2558
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2562
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = DropDefault
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2572
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2777
		{
			return unimplemented(sqllex, "match full")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2778
		{
			return unimplemented(sqllex, "match partial")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2779
		{
			return unimplemented(sqllex, "match simple")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2780
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2786
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2787
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2788
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2789
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2790
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2793
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2796
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2799
		{
			return unimplemented(sqllex, "no action")
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2802
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2803
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			return unimplemented(sqllex, "action set null")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2805
		{
			return unimplemented(sqllex, "action set default")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2830
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2841
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2845
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2866
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2906
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = true
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = false
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2936
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2937
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2940
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2941
		{
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = Ascending
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = Descending
		}
	case 543:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2981
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2983
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = true
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = false
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3016
		{
		}
	case 558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3017
		{
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3028
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3039
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3050
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3054
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3055
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3056
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3079
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3092
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3097
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3112
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3116
		{
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.str = ""
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.str = ""
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3162
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3175
		{
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3177
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = ReadOnly
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = ReadWrite
		}
	case 602:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.str = ""
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.str = ""
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.str = ""
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.str = ""
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3284
		{
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3285
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3309
		{
			return helpWith(sqllex, "INSERT")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3326
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3368
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3380
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 633:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3403
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3407
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3408
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3537
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3572
		{
			return helpWith(sqllex, "SELECT")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3573
		{
			return helpWith(sqllex, "VALUES")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3574
		{
			return helpWith(sqllex, "TABLE")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3620
		{
			return helpWith(sqllex, "SELECT")
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3664
		{
			return helpWith(sqllex, "TABLE")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3675
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3676
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3677
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3681
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3684
		{
			return unimplemented(sqllex, "cte")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3687
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3688
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3692
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3695
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3696
		{
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = true
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = false
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = false
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = true
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3719
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3720
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3767
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3791
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3843
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3844
		{
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3847
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3848
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3906
		{
			return helpWith(sqllex, "VALUES")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3923
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &From{}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3945
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3963
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3990
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4027
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = nil
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4093
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = true
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = false
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.str = astFullJoin
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.str = astLeftJoin
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.str = astRightJoin
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.str = astInnerJoin
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4210
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4211
		{
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4297
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4311
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4319
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4343
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4354
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4417
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4426
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = nil
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4491
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4587
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4619
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4659
		{
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 863:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = year
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = month
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = day
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = hour
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = minute
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = month
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = hour
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = minute
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = minute
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = nil
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = second
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4754
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4789
		{
			return unimplemented(sqllex, "at tz")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4957
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5023
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5071
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5075
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5083
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5087
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5091
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5123
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5127
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5196
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5249
		{
			return unimplemented(sqllex, "variadic")
		}
	case 993:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5250
		{
			return unimplemented(sqllex, "variadic")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5263
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5274
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5290
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5291
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5295
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5304
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5313
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5322
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5323
		{
			return unimplemented(sqllex, "current role")
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5332
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5338
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5342
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5353
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5358
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5363
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5372
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5373
		{
			return unimplemented(sqllex, "treat")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5379
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5383
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5387
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5391
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5399
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5403
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5410
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5415
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5419
		{
			return unimplemented(sqllex, "within group")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5420
		{
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5445
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5455
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5463
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5467
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5471
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.str = ""
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5517
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5518
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5519
		{
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5522
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5523
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5529
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5530
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5531
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5532
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5533
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = Any
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = Some
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = All
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = Plus
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = Minus
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = Mult
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5590
		{
			sqlVAL.union.val = Div
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5592
		{
			sqlVAL.union.val = Mod
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5593
		{
			sqlVAL.union.val = Bitand
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = Bitor
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = Pow
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5596
		{
			sqlVAL.union.val = Bitxor
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5597
		{
			sqlVAL.union.val = LT
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = GT
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = EQ
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5600
		{
			sqlVAL.union.val = LE
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5601
		{
			sqlVAL.union.val = GE
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = NE
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = Like
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = NotLike
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = ILike
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5609
		{
			sqlVAL.union.val = NotILike
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5640
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5644
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5664
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5698
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5711
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5736
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5740
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5748
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5770
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5774
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5788
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5799
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5806
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5826
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5833
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5839
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5843
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5892
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5897
		{
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5898
		{
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5932
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5955
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5967
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5971
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5977
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5981
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6016
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6029
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6047
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6060
		{
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6081
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6085
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6089
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6093
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6096
		{
			return unimplemented(sqllex, "func const")
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6105
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6107
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6111
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6115
		{
			sqlVAL.union.val = DNull
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6126
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6132
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6167
		{
			sqlVAL.str = ""
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6177
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
